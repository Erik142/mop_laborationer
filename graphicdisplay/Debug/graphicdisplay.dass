
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 typedef unsigned char uint8_t;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb0e 	bl	20000624 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *SYSTICK_CTRL = 0x0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles - 1 = 0x29)
    *SYSTICK_LOAD = 0x29;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *SYSTICK_LOAD /= 0x29; // Decrease delay if we're simulating
#endif
    
    *SYSTICK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *SYSTICK_CTRL = 0x5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*SYSTICK_CTRL & 0x10000) == 0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    
    *SYSTICK_CTRL = 0x0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(void)
{
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
    delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
    delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000066:	b580      	push	{r7, lr}
20000068:	b084      	sub	sp, #16
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	009b      	lsls	r3, r3, #2
20000072:	60bb      	str	r3, [r7, #8]
        limit = 50;
    }
#endif

    
    for (int i = 1; i <= limit; i++)
20000074:	2301      	movs	r3, #1
20000076:	60fb      	str	r3, [r7, #12]
20000078:	e004      	b.n	20000084 <delay_mikro+0x1e>
    {
        delay_250ns();
2000007a:	f7ff ffc9 	bl	20000010 <delay_250ns>
    for (int i = 1; i <= limit; i++)
2000007e:	68fb      	ldr	r3, [r7, #12]
20000080:	3301      	adds	r3, #1
20000082:	60fb      	str	r3, [r7, #12]
20000084:	68fa      	ldr	r2, [r7, #12]
20000086:	68bb      	ldr	r3, [r7, #8]
20000088:	429a      	cmp	r2, r3
2000008a:	ddf6      	ble.n	2000007a <delay_mikro+0x14>
    }
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46bd      	mov	sp, r7
20000090:	b004      	add	sp, #16
20000092:	bd80      	pop	{r7, pc}

20000094 <delay_mili>:

void delay_mili(unsigned int ms)
{
20000094:	b580      	push	{r7, lr}
20000096:	b084      	sub	sp, #16
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
2000009c:	23fa      	movs	r3, #250	; 0xfa
2000009e:	009b      	lsls	r3, r3, #2
200000a0:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
#endif
    
    for (i = 1; i <= limit; i++)
200000a2:	2301      	movs	r3, #1
200000a4:	60fb      	str	r3, [r7, #12]
200000a6:	e006      	b.n	200000b6 <delay_mili+0x22>
    {
        delay_mikro(ms);
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	0018      	movs	r0, r3
200000ac:	f7ff ffdb 	bl	20000066 <delay_mikro>
    for (i = 1; i <= limit; i++)
200000b0:	68fb      	ldr	r3, [r7, #12]
200000b2:	3301      	adds	r3, #1
200000b4:	60fb      	str	r3, [r7, #12]
200000b6:	68fa      	ldr	r2, [r7, #12]
200000b8:	68bb      	ldr	r3, [r7, #8]
200000ba:	429a      	cmp	r2, r3
200000bc:	ddf4      	ble.n	200000a8 <delay_mili+0x14>
    }
}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	46bd      	mov	sp, r7
200000c2:	b004      	add	sp, #16
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
200000d2:	4b06      	ldr	r3, [pc, #24]	; (200000ec <graphic_ctrl_bit_set+0x26>)
200000d4:	781a      	ldrb	r2, [r3, #0]
200000d6:	4905      	ldr	r1, [pc, #20]	; (200000ec <graphic_ctrl_bit_set+0x26>)
200000d8:	1dfb      	adds	r3, r7, #7
200000da:	781b      	ldrb	r3, [r3, #0]
200000dc:	4313      	orrs	r3, r2
200000de:	b2db      	uxtb	r3, r3
200000e0:	700b      	strb	r3, [r1, #0]
}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b002      	add	sp, #8
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
200000fc:	4b08      	ldr	r3, [pc, #32]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b25b      	sxtb	r3, r3
20000102:	1dfa      	adds	r2, r7, #7
20000104:	7812      	ldrb	r2, [r2, #0]
20000106:	b252      	sxtb	r2, r2
20000108:	43d2      	mvns	r2, r2
2000010a:	b252      	sxtb	r2, r2
2000010c:	4013      	ands	r3, r2
2000010e:	b25a      	sxtb	r2, r3
20000110:	4b03      	ldr	r3, [pc, #12]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
20000112:	b2d2      	uxtb	r2, r2
20000114:	701a      	strb	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b002      	add	sp, #8
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <select_controller>:

void select_controller(uint8_t controller)
{
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
    switch(controller)
20000130:	1dfb      	adds	r3, r7, #7
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	2b08      	cmp	r3, #8
20000136:	d00c      	beq.n	20000152 <select_controller+0x2e>
20000138:	dc02      	bgt.n	20000140 <select_controller+0x1c>
2000013a:	2b00      	cmp	r3, #0
2000013c:	d005      	beq.n	2000014a <select_controller+0x26>
            break;
        case (B_CS1 | B_CS2):
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
        default:
            break;
2000013e:	e01a      	b.n	20000176 <select_controller+0x52>
    switch(controller)
20000140:	2b10      	cmp	r3, #16
20000142:	d00d      	beq.n	20000160 <select_controller+0x3c>
20000144:	2b18      	cmp	r3, #24
20000146:	d012      	beq.n	2000016e <select_controller+0x4a>
            break;
20000148:	e015      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000014a:	2018      	movs	r0, #24
2000014c:	f7ff ffd0 	bl	200000f0 <graphic_ctrl_bit_clear>
            break;
20000150:	e011      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000152:	2008      	movs	r0, #8
20000154:	f7ff ffb7 	bl	200000c6 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000158:	2010      	movs	r0, #16
2000015a:	f7ff ffc9 	bl	200000f0 <graphic_ctrl_bit_clear>
            break;
2000015e:	e00a      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000160:	2008      	movs	r0, #8
20000162:	f7ff ffc5 	bl	200000f0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000166:	2010      	movs	r0, #16
20000168:	f7ff ffad 	bl	200000c6 <graphic_ctrl_bit_set>
            break;
2000016c:	e003      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000016e:	2018      	movs	r0, #24
20000170:	f7ff ffa9 	bl	200000c6 <graphic_ctrl_bit_set>
            break;
20000174:	46c0      	nop			; (mov r8, r8)
    }
}
20000176:	46c0      	nop			; (mov r8, r8)
20000178:	46bd      	mov	sp, r7
2000017a:	b002      	add	sp, #8
2000017c:	bd80      	pop	{r7, pc}

2000017e <graphic_wait_ready>:

void graphic_wait_ready(void)
{
2000017e:	b580      	push	{r7, lr}
20000180:	b082      	sub	sp, #8
20000182:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ffb3 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
2000018a:	4b14      	ldr	r3, [pc, #80]	; (200001dc <graphic_wait_ready+0x5e>)
2000018c:	4a14      	ldr	r2, [pc, #80]	; (200001e0 <graphic_wait_ready+0x62>)
2000018e:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_RS);
20000190:	2001      	movs	r0, #1
20000192:	f7ff ffad 	bl	200000f0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000196:	2002      	movs	r0, #2
20000198:	f7ff ff95 	bl	200000c6 <graphic_ctrl_bit_set>
    
    delay_500ns();
2000019c:	f7ff ff5a 	bl	20000054 <delay_500ns>
    
    unsigned char busy;
    
    do
    {
        graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff90 	bl	200000c6 <graphic_ctrl_bit_set>
        delay_500ns();
200001a6:	f7ff ff55 	bl	20000054 <delay_500ns>
        
        busy = *GRAPHIC_DATA_IDR & LCD_BUSY;
200001aa:	4b0e      	ldr	r3, [pc, #56]	; (200001e4 <graphic_wait_ready+0x66>)
200001ac:	781a      	ldrb	r2, [r3, #0]
200001ae:	1dfb      	adds	r3, r7, #7
200001b0:	217f      	movs	r1, #127	; 0x7f
200001b2:	438a      	bics	r2, r1
200001b4:	701a      	strb	r2, [r3, #0]
        
        graphic_ctrl_bit_clear(B_E);
200001b6:	2040      	movs	r0, #64	; 0x40
200001b8:	f7ff ff9a 	bl	200000f0 <graphic_ctrl_bit_clear>
        delay_500ns();
200001bc:	f7ff ff4a 	bl	20000054 <delay_500ns>
    } while(busy != 0);
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	2b00      	cmp	r3, #0
200001c6:	d1eb      	bne.n	200001a0 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(B_E);
200001c8:	2040      	movs	r0, #64	; 0x40
200001ca:	f7ff ff7c 	bl	200000c6 <graphic_ctrl_bit_set>
    
    * ( (unsigned long *) portModer) = 0x55555555;
200001ce:	4b03      	ldr	r3, [pc, #12]	; (200001dc <graphic_wait_ready+0x5e>)
200001d0:	4a05      	ldr	r2, [pc, #20]	; (200001e8 <graphic_wait_ready+0x6a>)
200001d2:	601a      	str	r2, [r3, #0]
}
200001d4:	46c0      	nop			; (mov r8, r8)
200001d6:	46bd      	mov	sp, r7
200001d8:	b002      	add	sp, #8
200001da:	bd80      	pop	{r7, pc}
200001dc:	40021000 	andmi	r1, r2, r0
200001e0:	00005555 	andeq	r5, r0, r5, asr r5
200001e4:	40021011 	andmi	r1, r2, r1, lsl r0
200001e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001ec <graphic_read>:

uint8_t graphic_read(uint8_t controller)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b084      	sub	sp, #16
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val;
    
    graphic_ctrl_bit_clear(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff79 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
200001fe:	4b1b      	ldr	r3, [pc, #108]	; (2000026c <graphic_read+0x80>)
20000200:	4a1b      	ldr	r2, [pc, #108]	; (20000270 <graphic_read+0x84>)
20000202:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_RS | B_RW);
20000204:	2003      	movs	r0, #3
20000206:	f7ff ff5e 	bl	200000c6 <graphic_ctrl_bit_set>
    
    select_controller(controller);
2000020a:	1dfb      	adds	r3, r7, #7
2000020c:	781b      	ldrb	r3, [r3, #0]
2000020e:	0018      	movs	r0, r3
20000210:	f7ff ff88 	bl	20000124 <select_controller>
    delay_500ns();
20000214:	f7ff ff1e 	bl	20000054 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff ff54 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
2000021e:	f7ff ff19 	bl	20000054 <delay_500ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
20000222:	4a14      	ldr	r2, [pc, #80]	; (20000274 <graphic_read+0x88>)
20000224:	230f      	movs	r3, #15
20000226:	18fb      	adds	r3, r7, r3
20000228:	7812      	ldrb	r2, [r2, #0]
2000022a:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff5f 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x55555555;
20000232:	4b0e      	ldr	r3, [pc, #56]	; (2000026c <graphic_read+0x80>)
20000234:	4a10      	ldr	r2, [pc, #64]	; (20000278 <graphic_read+0x8c>)
20000236:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1)
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	2b08      	cmp	r3, #8
2000023e:	d104      	bne.n	2000024a <graphic_read+0x5e>
    {
        select_controller(B_CS1);
20000240:	2008      	movs	r0, #8
20000242:	f7ff ff6f 	bl	20000124 <select_controller>
        graphic_wait_ready();
20000246:	f7ff ff9a 	bl	2000017e <graphic_wait_ready>
    }
    if(controller == B_CS2)
2000024a:	1dfb      	adds	r3, r7, #7
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	2b10      	cmp	r3, #16
20000250:	d104      	bne.n	2000025c <graphic_read+0x70>
    {
        select_controller(B_CS2);
20000252:	2010      	movs	r0, #16
20000254:	f7ff ff66 	bl	20000124 <select_controller>
        graphic_wait_ready();
20000258:	f7ff ff91 	bl	2000017e <graphic_wait_ready>
    }
    
    return ret_val;
2000025c:	230f      	movs	r3, #15
2000025e:	18fb      	adds	r3, r7, r3
20000260:	781b      	ldrb	r3, [r3, #0]
}
20000262:	0018      	movs	r0, r3
20000264:	46bd      	mov	sp, r7
20000266:	b004      	add	sp, #16
20000268:	bd80      	pop	{r7, pc}
2000026a:	46c0      	nop			; (mov r8, r8)
2000026c:	40021000 	andmi	r1, r2, r0
20000270:	00005555 	andeq	r5, r0, r5, asr r5
20000274:	40021011 	andmi	r1, r2, r1, lsl r0
20000278:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000027c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
2000027c:	b580      	push	{r7, lr}
2000027e:	b082      	sub	sp, #8
20000280:	af00      	add	r7, sp, #0
20000282:	0002      	movs	r2, r0
20000284:	1dfb      	adds	r3, r7, #7
20000286:	701a      	strb	r2, [r3, #0]
20000288:	1dbb      	adds	r3, r7, #6
2000028a:	1c0a      	adds	r2, r1, #0
2000028c:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_DATA_ODR = value;
2000028e:	4a1a      	ldr	r2, [pc, #104]	; (200002f8 <graphic_write+0x7c>)
20000290:	1dfb      	adds	r3, r7, #7
20000292:	781b      	ldrb	r3, [r3, #0]
20000294:	7013      	strb	r3, [r2, #0]
    
    select_controller(controller);
20000296:	1dbb      	adds	r3, r7, #6
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff42 	bl	20000124 <select_controller>
    delay_500ns();
200002a0:	f7ff fed8 	bl	20000054 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
200002a4:	2040      	movs	r0, #64	; 0x40
200002a6:	f7ff ff0e 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
200002aa:	f7ff fed3 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200002ae:	2040      	movs	r0, #64	; 0x40
200002b0:	f7ff ff1e 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    if ( (controller & B_CS1) )
200002b4:	1dbb      	adds	r3, r7, #6
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	2208      	movs	r2, #8
200002ba:	4013      	ands	r3, r2
200002bc:	d004      	beq.n	200002c8 <graphic_write+0x4c>
    {
        select_controller(B_CS1);
200002be:	2008      	movs	r0, #8
200002c0:	f7ff ff30 	bl	20000124 <select_controller>
        graphic_wait_ready();
200002c4:	f7ff ff5b 	bl	2000017e <graphic_wait_ready>
    }
    if ( (controller & B_CS2) )
200002c8:	1dbb      	adds	r3, r7, #6
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	2210      	movs	r2, #16
200002ce:	4013      	ands	r3, r2
200002d0:	d004      	beq.n	200002dc <graphic_write+0x60>
    {
        select_controller(B_CS2);
200002d2:	2010      	movs	r0, #16
200002d4:	f7ff ff26 	bl	20000124 <select_controller>
        graphic_wait_ready();
200002d8:	f7ff ff51 	bl	2000017e <graphic_wait_ready>
    }
    
    *GRAPHIC_DATA_ODR = 0x0;
200002dc:	4b06      	ldr	r3, [pc, #24]	; (200002f8 <graphic_write+0x7c>)
200002de:	2200      	movs	r2, #0
200002e0:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff feef 	bl	200000c6 <graphic_ctrl_bit_set>
    
    select_controller(0);
200002e8:	2000      	movs	r0, #0
200002ea:	f7ff ff1b 	bl	20000124 <select_controller>
}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b002      	add	sp, #8
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021015 	andmi	r1, r2, r5, lsl r0

200002fc <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller)
{
200002fc:	b580      	push	{r7, lr}
200002fe:	b082      	sub	sp, #8
20000300:	af00      	add	r7, sp, #0
20000302:	0002      	movs	r2, r0
20000304:	1dfb      	adds	r3, r7, #7
20000306:	701a      	strb	r2, [r3, #0]
20000308:	1dbb      	adds	r3, r7, #6
2000030a:	1c0a      	adds	r2, r1, #0
2000030c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff feee 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	0018      	movs	r0, r3
2000031a:	f7ff ff03 	bl	20000124 <select_controller>
    
    graphic_ctrl_bit_clear(B_RS | B_RW);
2000031e:	2003      	movs	r0, #3
20000320:	f7ff fee6 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    graphic_write(cmd, controller);
20000324:	1dbb      	adds	r3, r7, #6
20000326:	781a      	ldrb	r2, [r3, #0]
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	0011      	movs	r1, r2
2000032e:	0018      	movs	r0, r3
20000330:	f7ff ffa4 	bl	2000027c <graphic_write>
}
20000334:	46c0      	nop			; (mov r8, r8)
20000336:	46bd      	mov	sp, r7
20000338:	b002      	add	sp, #8
2000033a:	bd80      	pop	{r7, pc}

2000033c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	1c0a      	adds	r2, r1, #0
2000034c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000034e:	2040      	movs	r0, #64	; 0x40
20000350:	f7ff fece 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff fee3 	bl	20000124 <select_controller>
    
    graphic_ctrl_bit_set(B_RS);
2000035e:	2001      	movs	r0, #1
20000360:	f7ff feb1 	bl	200000c6 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000364:	2002      	movs	r0, #2
20000366:	f7ff fec3 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    graphic_write(data,controller);
2000036a:	1dbb      	adds	r3, r7, #6
2000036c:	781a      	ldrb	r2, [r3, #0]
2000036e:	1dfb      	adds	r3, r7, #7
20000370:	781b      	ldrb	r3, [r3, #0]
20000372:	0011      	movs	r1, r2
20000374:	0018      	movs	r0, r3
20000376:	f7ff ff81 	bl	2000027c <graphic_write>
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b002      	add	sp, #8
20000380:	bd80      	pop	{r7, pc}

20000382 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
20000382:	b580      	push	{r7, lr}
20000384:	b082      	sub	sp, #8
20000386:	af00      	add	r7, sp, #0
20000388:	0002      	movs	r2, r0
2000038a:	1dfb      	adds	r3, r7, #7
2000038c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000038e:	1dfb      	adds	r3, r7, #7
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	0018      	movs	r0, r3
20000394:	f7ff ff2a 	bl	200001ec <graphic_read>
    return graphic_read(controller);
20000398:	1dfb      	adds	r3, r7, #7
2000039a:	781b      	ldrb	r3, [r3, #0]
2000039c:	0018      	movs	r0, r3
2000039e:	f7ff ff25 	bl	200001ec <graphic_read>
200003a2:	0003      	movs	r3, r0
}
200003a4:	0018      	movs	r0, r3
200003a6:	46bd      	mov	sp, r7
200003a8:	b002      	add	sp, #8
200003aa:	bd80      	pop	{r7, pc}

200003ac <graphic_initialize>:

void graphic_initialize(void)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	af00      	add	r7, sp, #0
    //graphic_ctrl_bit_clear(B_SELECT);
    //delay_mikro(10);
    
    graphic_ctrl_bit_set(B_E);
200003b0:	2040      	movs	r0, #64	; 0x40
200003b2:	f7ff fe88 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_mikro(10);
200003b6:	200a      	movs	r0, #10
200003b8:	f7ff fe55 	bl	20000066 <delay_mikro>
    
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003bc:	2078      	movs	r0, #120	; 0x78
200003be:	f7ff fe97 	bl	200000f0 <graphic_ctrl_bit_clear>
    delay_mili(30);
200003c2:	201e      	movs	r0, #30
200003c4:	f7ff fe66 	bl	20000094 <delay_mili>
    
    graphic_ctrl_bit_set(B_RST);
200003c8:	2020      	movs	r0, #32
200003ca:	f7ff fe7c 	bl	200000c6 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003ce:	2118      	movs	r1, #24
200003d0:	203e      	movs	r0, #62	; 0x3e
200003d2:	f7ff ff93 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003d6:	2118      	movs	r1, #24
200003d8:	203f      	movs	r0, #63	; 0x3f
200003da:	f7ff ff8f 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200003de:	2118      	movs	r1, #24
200003e0:	20c0      	movs	r0, #192	; 0xc0
200003e2:	f7ff ff8b 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200003e6:	2118      	movs	r1, #24
200003e8:	2040      	movs	r0, #64	; 0x40
200003ea:	f7ff ff87 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200003ee:	2118      	movs	r1, #24
200003f0:	20b8      	movs	r0, #184	; 0xb8
200003f2:	f7ff ff83 	bl	200002fc <graphic_write_command>
    
    select_controller(0);
200003f6:	2000      	movs	r0, #0
200003f8:	f7ff fe94 	bl	20000124 <select_controller>
}
200003fc:	46c0      	nop			; (mov r8, r8)
200003fe:	46bd      	mov	sp, r7
20000400:	bd80      	pop	{r7, pc}

20000402 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000402:	b580      	push	{r7, lr}
20000404:	b082      	sub	sp, #8
20000406:	af00      	add	r7, sp, #0
    char page, add;
    
    for(page = 0; page <= 7; page++)
20000408:	1dfb      	adds	r3, r7, #7
2000040a:	2200      	movs	r2, #0
2000040c:	701a      	strb	r2, [r3, #0]
2000040e:	e023      	b.n	20000458 <graphic_clear_screen+0x56>
    {
        graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000410:	1dfb      	adds	r3, r7, #7
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	2248      	movs	r2, #72	; 0x48
20000416:	4252      	negs	r2, r2
20000418:	4313      	orrs	r3, r2
2000041a:	b2db      	uxtb	r3, r3
2000041c:	2118      	movs	r1, #24
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ff6c 	bl	200002fc <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000424:	2118      	movs	r1, #24
20000426:	2040      	movs	r0, #64	; 0x40
20000428:	f7ff ff68 	bl	200002fc <graphic_write_command>
        
        for(add = 0; add <= 63; add++)
2000042c:	1dbb      	adds	r3, r7, #6
2000042e:	2200      	movs	r2, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	e008      	b.n	20000446 <graphic_clear_screen+0x44>
        {
            graphic_write_data(0, B_CS1 | B_CS2);
20000434:	2118      	movs	r1, #24
20000436:	2000      	movs	r0, #0
20000438:	f7ff ff80 	bl	2000033c <graphic_write_data>
        for(add = 0; add <= 63; add++)
2000043c:	1dbb      	adds	r3, r7, #6
2000043e:	781a      	ldrb	r2, [r3, #0]
20000440:	1dbb      	adds	r3, r7, #6
20000442:	3201      	adds	r2, #1
20000444:	701a      	strb	r2, [r3, #0]
20000446:	1dbb      	adds	r3, r7, #6
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	2b3f      	cmp	r3, #63	; 0x3f
2000044c:	d9f2      	bls.n	20000434 <graphic_clear_screen+0x32>
    for(page = 0; page <= 7; page++)
2000044e:	1dfb      	adds	r3, r7, #7
20000450:	781a      	ldrb	r2, [r3, #0]
20000452:	1dfb      	adds	r3, r7, #7
20000454:	3201      	adds	r2, #1
20000456:	701a      	strb	r2, [r3, #0]
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	2b07      	cmp	r3, #7
2000045e:	d9d7      	bls.n	20000410 <graphic_clear_screen+0xe>
        }
    }
}
20000460:	46c0      	nop			; (mov r8, r8)
20000462:	46bd      	mov	sp, r7
20000464:	b002      	add	sp, #8
20000466:	bd80      	pop	{r7, pc}

20000468 <pixel>:

void pixel(unsigned x, unsigned y, unsigned set)
{
20000468:	b5f0      	push	{r4, r5, r6, r7, lr}
2000046a:	b087      	sub	sp, #28
2000046c:	af00      	add	r7, sp, #0
2000046e:	60f8      	str	r0, [r7, #12]
20000470:	60b9      	str	r1, [r7, #8]
20000472:	607a      	str	r2, [r7, #4]
    if (x > 128 || x == 0 || y > 64 || y == 0 || set > 1)
20000474:	68fb      	ldr	r3, [r7, #12]
20000476:	2b80      	cmp	r3, #128	; 0x80
20000478:	d900      	bls.n	2000047c <pixel+0x14>
2000047a:	e0b8      	b.n	200005ee <pixel+0x186>
2000047c:	68fb      	ldr	r3, [r7, #12]
2000047e:	2b00      	cmp	r3, #0
20000480:	d100      	bne.n	20000484 <pixel+0x1c>
20000482:	e0b4      	b.n	200005ee <pixel+0x186>
20000484:	68bb      	ldr	r3, [r7, #8]
20000486:	2b40      	cmp	r3, #64	; 0x40
20000488:	d900      	bls.n	2000048c <pixel+0x24>
2000048a:	e0b0      	b.n	200005ee <pixel+0x186>
2000048c:	68bb      	ldr	r3, [r7, #8]
2000048e:	2b00      	cmp	r3, #0
20000490:	d100      	bne.n	20000494 <pixel+0x2c>
20000492:	e0ac      	b.n	200005ee <pixel+0x186>
20000494:	687b      	ldr	r3, [r7, #4]
20000496:	2b01      	cmp	r3, #1
20000498:	d900      	bls.n	2000049c <pixel+0x34>
2000049a:	e0a8      	b.n	200005ee <pixel+0x186>
    {
        return;
    }
    
    uint8_t bitmask, controller, x_fysisk, index = (y-1)/8;
2000049c:	68bb      	ldr	r3, [r7, #8]
2000049e:	3b01      	subs	r3, #1
200004a0:	08da      	lsrs	r2, r3, #3
200004a2:	2314      	movs	r3, #20
200004a4:	18fb      	adds	r3, r7, r3
200004a6:	701a      	strb	r2, [r3, #0]
    
    switch ((y-1) % 8)
200004a8:	68bb      	ldr	r3, [r7, #8]
200004aa:	3b01      	subs	r3, #1
200004ac:	2207      	movs	r2, #7
200004ae:	4013      	ands	r3, r2
200004b0:	2b07      	cmp	r3, #7
200004b2:	d82c      	bhi.n	2000050e <pixel+0xa6>
200004b4:	009a      	lsls	r2, r3, #2
200004b6:	4b50      	ldr	r3, [pc, #320]	; (200005f8 <pixel+0x190>)
200004b8:	18d3      	adds	r3, r2, r3
200004ba:	681b      	ldr	r3, [r3, #0]
200004bc:	469f      	mov	pc, r3
    {
        case 0:
            bitmask = 0x01;
200004be:	2317      	movs	r3, #23
200004c0:	18fb      	adds	r3, r7, r3
200004c2:	2201      	movs	r2, #1
200004c4:	701a      	strb	r2, [r3, #0]
            break;
200004c6:	e022      	b.n	2000050e <pixel+0xa6>
        case 1:
            bitmask = 0x02;
200004c8:	2317      	movs	r3, #23
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	2202      	movs	r2, #2
200004ce:	701a      	strb	r2, [r3, #0]
            break;
200004d0:	e01d      	b.n	2000050e <pixel+0xa6>
        case 2:
            bitmask = 0x04;
200004d2:	2317      	movs	r3, #23
200004d4:	18fb      	adds	r3, r7, r3
200004d6:	2204      	movs	r2, #4
200004d8:	701a      	strb	r2, [r3, #0]
            break;
200004da:	e018      	b.n	2000050e <pixel+0xa6>
        case 3:
            bitmask = 0x08;
200004dc:	2317      	movs	r3, #23
200004de:	18fb      	adds	r3, r7, r3
200004e0:	2208      	movs	r2, #8
200004e2:	701a      	strb	r2, [r3, #0]
            break;
200004e4:	e013      	b.n	2000050e <pixel+0xa6>
        case 4:
            bitmask = 0x10;
200004e6:	2317      	movs	r3, #23
200004e8:	18fb      	adds	r3, r7, r3
200004ea:	2210      	movs	r2, #16
200004ec:	701a      	strb	r2, [r3, #0]
            break;
200004ee:	e00e      	b.n	2000050e <pixel+0xa6>
        case 5:
            bitmask = 0x20;
200004f0:	2317      	movs	r3, #23
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	2220      	movs	r2, #32
200004f6:	701a      	strb	r2, [r3, #0]
            break;
200004f8:	e009      	b.n	2000050e <pixel+0xa6>
        case 6:
            bitmask = 0x40;
200004fa:	2317      	movs	r3, #23
200004fc:	18fb      	adds	r3, r7, r3
200004fe:	2240      	movs	r2, #64	; 0x40
20000500:	701a      	strb	r2, [r3, #0]
            break;
20000502:	e004      	b.n	2000050e <pixel+0xa6>
        case 7:
            bitmask = 0x80;
20000504:	2317      	movs	r3, #23
20000506:	18fb      	adds	r3, r7, r3
20000508:	2280      	movs	r2, #128	; 0x80
2000050a:	701a      	strb	r2, [r3, #0]
            break;
2000050c:	46c0      	nop			; (mov r8, r8)
    }
    
    if (set == 0)
2000050e:	687b      	ldr	r3, [r7, #4]
20000510:	2b00      	cmp	r3, #0
20000512:	d105      	bne.n	20000520 <pixel+0xb8>
    {
        bitmask = ~bitmask;
20000514:	2217      	movs	r2, #23
20000516:	18bb      	adds	r3, r7, r2
20000518:	18ba      	adds	r2, r7, r2
2000051a:	7812      	ldrb	r2, [r2, #0]
2000051c:	43d2      	mvns	r2, r2
2000051e:	701a      	strb	r2, [r3, #0]
    }
    
    if (x > 64)
20000520:	68fb      	ldr	r3, [r7, #12]
20000522:	2b40      	cmp	r3, #64	; 0x40
20000524:	d90a      	bls.n	2000053c <pixel+0xd4>
    {
        controller = B_CS2;
20000526:	2316      	movs	r3, #22
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2210      	movs	r2, #16
2000052c:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-65;
2000052e:	68fb      	ldr	r3, [r7, #12]
20000530:	b2da      	uxtb	r2, r3
20000532:	2315      	movs	r3, #21
20000534:	18fb      	adds	r3, r7, r3
20000536:	3a41      	subs	r2, #65	; 0x41
20000538:	701a      	strb	r2, [r3, #0]
2000053a:	e009      	b.n	20000550 <pixel+0xe8>
    }
    else
    {
        controller = B_CS1;
2000053c:	2316      	movs	r3, #22
2000053e:	18fb      	adds	r3, r7, r3
20000540:	2208      	movs	r2, #8
20000542:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-1;
20000544:	68fb      	ldr	r3, [r7, #12]
20000546:	b2da      	uxtb	r2, r3
20000548:	2315      	movs	r3, #21
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	3a01      	subs	r2, #1
2000054e:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000550:	2615      	movs	r6, #21
20000552:	19bb      	adds	r3, r7, r6
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	2240      	movs	r2, #64	; 0x40
20000558:	4313      	orrs	r3, r2
2000055a:	b2da      	uxtb	r2, r3
2000055c:	2516      	movs	r5, #22
2000055e:	197b      	adds	r3, r7, r5
20000560:	781b      	ldrb	r3, [r3, #0]
20000562:	0019      	movs	r1, r3
20000564:	0010      	movs	r0, r2
20000566:	f7ff fec9 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000056a:	2314      	movs	r3, #20
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2248      	movs	r2, #72	; 0x48
20000572:	4252      	negs	r2, r2
20000574:	4313      	orrs	r3, r2
20000576:	b2da      	uxtb	r2, r3
20000578:	197b      	adds	r3, r7, r5
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	0019      	movs	r1, r3
2000057e:	0010      	movs	r0, r2
20000580:	f7ff febc 	bl	200002fc <graphic_write_command>
    
    uint8_t temp = graphic_read_data(controller);
20000584:	2313      	movs	r3, #19
20000586:	18fc      	adds	r4, r7, r3
20000588:	197b      	adds	r3, r7, r5
2000058a:	781b      	ldrb	r3, [r3, #0]
2000058c:	0018      	movs	r0, r3
2000058e:	f7ff fef8 	bl	20000382 <graphic_read_data>
20000592:	0003      	movs	r3, r0
20000594:	7023      	strb	r3, [r4, #0]
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000596:	19bb      	adds	r3, r7, r6
20000598:	781b      	ldrb	r3, [r3, #0]
2000059a:	2240      	movs	r2, #64	; 0x40
2000059c:	4313      	orrs	r3, r2
2000059e:	b2da      	uxtb	r2, r3
200005a0:	197b      	adds	r3, r7, r5
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	0019      	movs	r1, r3
200005a6:	0010      	movs	r0, r2
200005a8:	f7ff fea8 	bl	200002fc <graphic_write_command>
    
    if (set == 1)
200005ac:	687b      	ldr	r3, [r7, #4]
200005ae:	2b01      	cmp	r3, #1
200005b0:	d109      	bne.n	200005c6 <pixel+0x15e>
    {
        bitmask = bitmask | temp;
200005b2:	2217      	movs	r2, #23
200005b4:	18bb      	adds	r3, r7, r2
200005b6:	18b9      	adds	r1, r7, r2
200005b8:	2213      	movs	r2, #19
200005ba:	18ba      	adds	r2, r7, r2
200005bc:	7809      	ldrb	r1, [r1, #0]
200005be:	7812      	ldrb	r2, [r2, #0]
200005c0:	430a      	orrs	r2, r1
200005c2:	701a      	strb	r2, [r3, #0]
200005c4:	e008      	b.n	200005d8 <pixel+0x170>
    }
    else
    {
        bitmask = bitmask & temp;
200005c6:	2217      	movs	r2, #23
200005c8:	18bb      	adds	r3, r7, r2
200005ca:	18ba      	adds	r2, r7, r2
200005cc:	2113      	movs	r1, #19
200005ce:	1879      	adds	r1, r7, r1
200005d0:	7812      	ldrb	r2, [r2, #0]
200005d2:	7809      	ldrb	r1, [r1, #0]
200005d4:	400a      	ands	r2, r1
200005d6:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_data(bitmask, controller);
200005d8:	2316      	movs	r3, #22
200005da:	18fb      	adds	r3, r7, r3
200005dc:	781a      	ldrb	r2, [r3, #0]
200005de:	2317      	movs	r3, #23
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	0011      	movs	r1, r2
200005e6:	0018      	movs	r0, r3
200005e8:	f7ff fea8 	bl	2000033c <graphic_write_data>
200005ec:	e000      	b.n	200005f0 <pixel+0x188>
        return;
200005ee:	46c0      	nop			; (mov r8, r8)
}
200005f0:	46bd      	mov	sp, r7
200005f2:	b007      	add	sp, #28
200005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	200006c4 	andcs	r0, r0, r4, asr #13

200005fc <app_init>:

void app_init(void)
{    
200005fc:	b580      	push	{r7, lr}
200005fe:	af00      	add	r7, sp, #0
    #ifdef USBDM
    *((unsigned long *) 0x40023830) = 0x18;
20000600:	4b05      	ldr	r3, [pc, #20]	; (20000618 <app_init+0x1c>)
20000602:	2218      	movs	r2, #24
20000604:	601a      	str	r2, [r3, #0]
    __asm volatile ("LDR R0,=0x08000209\n BLX R0 \n");
20000606:	482e      	ldr	r0, [pc, #184]	; (200006c0 <main+0x9c>)
20000608:	4780      	blx	r0
    #endif
    *((unsigned long *) portModer) = 0x55555555;
2000060a:	4b04      	ldr	r3, [pc, #16]	; (2000061c <app_init+0x20>)
2000060c:	4a04      	ldr	r2, [pc, #16]	; (20000620 <app_init+0x24>)
2000060e:	601a      	str	r2, [r3, #0]
}
20000610:	46c0      	nop			; (mov r8, r8)
20000612:	46bd      	mov	sp, r7
20000614:	bd80      	pop	{r7, pc}
20000616:	46c0      	nop			; (mov r8, r8)
20000618:	40023830 	andmi	r3, r2, r0, lsr r8
2000061c:	40021000 	andmi	r1, r2, r0
20000620:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000624 <main>:

void main(void)
{
20000624:	b580      	push	{r7, lr}
20000626:	b082      	sub	sp, #8
20000628:	af00      	add	r7, sp, #0
    unsigned i;
    
    app_init();
2000062a:	f7ff ffe7 	bl	200005fc <app_init>
    graphic_initialize();
2000062e:	f7ff febd 	bl	200003ac <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
20000632:	f7ff fee6 	bl	20000402 <graphic_clear_screen>
#endif

    for(i = 1; i <= 128; i++) // Rita en horisontell linje
20000636:	2301      	movs	r3, #1
20000638:	607b      	str	r3, [r7, #4]
2000063a:	e008      	b.n	2000064e <main+0x2a>
    {
        pixel(i,10,1);
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	2201      	movs	r2, #1
20000640:	210a      	movs	r1, #10
20000642:	0018      	movs	r0, r3
20000644:	f7ff ff10 	bl	20000468 <pixel>
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
20000648:	687b      	ldr	r3, [r7, #4]
2000064a:	3301      	adds	r3, #1
2000064c:	607b      	str	r3, [r7, #4]
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	2b80      	cmp	r3, #128	; 0x80
20000652:	d9f3      	bls.n	2000063c <main+0x18>
    }
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
20000654:	2301      	movs	r3, #1
20000656:	607b      	str	r3, [r7, #4]
20000658:	e008      	b.n	2000066c <main+0x48>
    {
        pixel(10,i,1);
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	2201      	movs	r2, #1
2000065e:	0019      	movs	r1, r3
20000660:	200a      	movs	r0, #10
20000662:	f7ff ff01 	bl	20000468 <pixel>
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	3301      	adds	r3, #1
2000066a:	607b      	str	r3, [r7, #4]
2000066c:	687b      	ldr	r3, [r7, #4]
2000066e:	2b40      	cmp	r3, #64	; 0x40
20000670:	d9f3      	bls.n	2000065a <main+0x36>
    }
    
    delay_mili(500);
20000672:	23fa      	movs	r3, #250	; 0xfa
20000674:	005b      	lsls	r3, r3, #1
20000676:	0018      	movs	r0, r3
20000678:	f7ff fd0c 	bl	20000094 <delay_mili>
    
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
2000067c:	2301      	movs	r3, #1
2000067e:	607b      	str	r3, [r7, #4]
20000680:	e008      	b.n	20000694 <main+0x70>
    {
        pixel(i,10,0);
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	2200      	movs	r2, #0
20000686:	210a      	movs	r1, #10
20000688:	0018      	movs	r0, r3
2000068a:	f7ff feed 	bl	20000468 <pixel>
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	3301      	adds	r3, #1
20000692:	607b      	str	r3, [r7, #4]
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	2b80      	cmp	r3, #128	; 0x80
20000698:	d9f3      	bls.n	20000682 <main+0x5e>
    }
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
2000069a:	2301      	movs	r3, #1
2000069c:	607b      	str	r3, [r7, #4]
2000069e:	e008      	b.n	200006b2 <main+0x8e>
    {
        pixel(10,i,0);
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	2200      	movs	r2, #0
200006a4:	0019      	movs	r1, r3
200006a6:	200a      	movs	r0, #10
200006a8:	f7ff fede 	bl	20000468 <pixel>
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	3301      	adds	r3, #1
200006b0:	607b      	str	r3, [r7, #4]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	2b40      	cmp	r3, #64	; 0x40
200006b6:	d9f3      	bls.n	200006a0 <main+0x7c>
    }
}
200006b8:	46c0      	nop			; (mov r8, r8)
200006ba:	46bd      	mov	sp, r7
200006bc:	b002      	add	sp, #8
200006be:	bd80      	pop	{r7, pc}
200006c0:	08000209 	stmdaeq	r0, {r0, r3, r9}
200006c4:	200004be 			; <UNDEFINED> instruction: 0x200004be
200006c8:	200004c8 	andcs	r0, r0, r8, asr #9
200006cc:	200004d2 	ldrdcs	r0, [r0], -r2
200006d0:	200004dc 	ldrdcs	r0, [r0], -ip
200006d4:	200004e6 	andcs	r0, r0, r6, ror #9
200006d8:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200006dc:	200004fa 	strdcs	r0, [r0], -sl
200006e0:	20000504 	andcs	r0, r0, r4, lsl #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000393 	muleq	r0, r3, r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000019d 	muleq	r0, sp, r1
  10:	0000c00c 	andeq	ip, r0, ip
  14:	00003200 	andeq	r3, r0, r0, lsl #4
	...
  24:	01760200 	cmneq	r6, r0, lsl #4
  28:	2b010000 	blcs	40030 <startup-0x1ffbffd0>
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	78080103 	stmdavc	r8, {r0, r1, r8}
  34:	04000000 	streq	r0, [r0], #-0
  38:	00000115 	andeq	r0, r0, r5, lsl r1
  3c:	24018701 	strcs	r8, [r1], #-1793	; 0xfffff8ff
  40:	9c200006 	stcls	0, cr0, [r0], #-24	; 0xffffffe8
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	00005b9c 	muleq	r0, ip, fp
  4c:	00690500 	rsbeq	r0, r9, r0, lsl #10
  50:	5b018901 	blpl	6245c <startup-0x1ff9dba4>
  54:	02000000 	andeq	r0, r0, #0
  58:	03007491 	movweq	r7, #1169	; 0x491
  5c:	01610704 	cmneq	r1, r4, lsl #14
  60:	a5060000 	strge	r0, [r6, #-0]
  64:	01000000 	mrseq	r0, (UNDEF: 0)
  68:	05fc017e 	ldrbeq	r0, [ip, #382]!	; 0x17e
  6c:	00282000 	eoreq	r2, r8, r0
  70:	9c010000 	stcls	0, cr0, [r1], {-0}
  74:	00002c04 	andeq	r2, r0, r4, lsl #24
  78:	01360100 	teqeq	r6, r0, lsl #2
  7c:	20000468 	andcs	r0, r0, r8, ror #8
  80:	00000194 	muleq	r0, r4, r1
  84:	00ff9c01 	rscseq	r9, pc, r1, lsl #24
  88:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
  8c:	01360100 	teqeq	r6, r0, lsl #2
  90:	0000005b 	andeq	r0, r0, fp, asr r0
  94:	075c9102 	ldrbeq	r9, [ip, -r2, lsl #2]
  98:	36010079 			; <UNDEFINED> instruction: 0x36010079
  9c:	00005b01 	andeq	r5, r0, r1, lsl #22
  a0:	58910200 	ldmpl	r1, {r9}
  a4:	74657307 	strbtvc	r7, [r5], #-775	; 0xfffffcf9
  a8:	01360100 	teqeq	r6, r0, lsl #2
  ac:	0000005b 	andeq	r0, r0, fp, asr r0
  b0:	08549102 	ldmdaeq	r4, {r1, r8, ip, pc}^
  b4:	0000016e 	andeq	r0, r0, lr, ror #2
  b8:	25013d01 	strcs	r3, [r1, #-3329]	; 0xfffff2ff
  bc:	02000000 	andeq	r0, r0, #0
  c0:	b5086791 	strlt	r6, [r8, #-1937]	; 0xfffff86f
  c4:	01000000 	mrseq	r0, (UNDEF: 0)
  c8:	0025013d 	eoreq	r0, r5, sp, lsr r1
  cc:	91020000 	mrsls	r0, (UNDEF: 2)
  d0:	000b0866 	andeq	r0, fp, r6, ror #16
  d4:	3d010000 	stccc	0, cr0, [r1, #-0]
  d8:	00002501 	andeq	r2, r0, r1, lsl #10
  dc:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
  e0:	00021e08 	andeq	r1, r2, r8, lsl #28
  e4:	013d0100 	teqeq	sp, r0, lsl #2
  e8:	00000025 	andeq	r0, r0, r5, lsr #32
  ec:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
  f0:	000000a0 	andeq	r0, r0, r0, lsr #1
  f4:	25016e01 	strcs	r6, [r1, #-3585]	; 0xfffff1ff
  f8:	02000000 	andeq	r0, r0, #0
  fc:	04006391 	streq	r6, [r0], #-913	; 0xfffffc6f
 100:	00000256 	andeq	r0, r0, r6, asr r2
 104:	02012601 	andeq	r2, r1, #1048576	; 0x100000
 108:	66200004 	strtvs	r0, [r0], -r4
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	0001349c 	muleq	r1, ip, r4
 114:	00000800 	andeq	r0, r0, r0, lsl #16
 118:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 11c:	00013401 	andeq	r3, r1, r1, lsl #8
 120:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 124:	64646105 	strbtvs	r6, [r4], #-261	; 0xfffffefb
 128:	01280100 			; <UNDEFINED> instruction: 0x01280100
 12c:	00000134 	andeq	r0, r0, r4, lsr r1
 130:	00769102 	rsbseq	r9, r6, r2, lsl #2
 134:	81080103 	tsthi	r8, r3, lsl #2
 138:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 13c:	00000122 	andeq	r0, r0, r2, lsr #2
 140:	ac011001 	stcge	0, cr1, [r1], {1}
 144:	56200003 	strtpl	r0, [r0], -r3
 148:	01000000 	mrseq	r0, (UNDEF: 0)
 14c:	001a0a9c 	mulseq	sl, ip, sl
 150:	0a010000 	beq	40158 <startup-0x1ffbfea8>
 154:	00002501 	andeq	r2, r0, r1, lsl #10
 158:	00038200 	andeq	r8, r3, r0, lsl #4
 15c:	00002a20 	andeq	r2, r0, r0, lsr #20
 160:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
 164:	0b000001 	bleq	170 <startup-0x1ffffe90>
 168:	000000b5 	strheq	r0, [r0], -r5
 16c:	25010a01 	strcs	r0, [r1, #-2561]	; 0xfffff5ff
 170:	02000000 	andeq	r0, r0, #0
 174:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 178:	00000224 	andeq	r0, r0, r4, lsr #4
 17c:	033cfe01 	teqeq	ip, #1, 28	; <UNPREDICTABLE>
 180:	00462000 	subeq	r2, r6, r0
 184:	9c010000 	stcls	0, cr0, [r1], {-0}
 188:	000001a9 	andeq	r0, r0, r9, lsr #3
 18c:	0000270d 	andeq	r2, r0, sp, lsl #14
 190:	25fe0100 	ldrbcs	r0, [lr, #256]!	; 0x100
 194:	02000000 	andeq	r0, r0, #0
 198:	b50d7791 	strlt	r7, [sp, #-1937]	; 0xfffff86f
 19c:	01000000 	mrseq	r0, (UNDEF: 0)
 1a0:	000025fe 	strdeq	r2, [r0], -lr
 1a4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 1a8:	02780c00 	rsbseq	r0, r8, #0, 24
 1ac:	f3010000 	vhadd.u8	d0, d1, d0
 1b0:	200002fc 	strdcs	r0, [r0], -ip
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
 1b8:	01db9c01 	bicseq	r9, fp, r1, lsl #24
 1bc:	630e0000 	movwvs	r0, #57344	; 0xe000
 1c0:	0100646d 	tsteq	r0, sp, ror #8
 1c4:	000025f3 	strdeq	r2, [r0], -r3
 1c8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1cc:	0000b50d 	andeq	fp, r0, sp, lsl #10
 1d0:	25f30100 	ldrbcs	r0, [r3, #256]!	; 0x100
 1d4:	02000000 	andeq	r0, r0, #0
 1d8:	0c007691 	stceq	6, cr7, [r0], {145}	; 0x91
 1dc:	00000092 	muleq	r0, r2, r0
 1e0:	027cd601 	rsbseq	sp, ip, #1048576	; 0x100000
 1e4:	00802000 	addeq	r2, r0, r0
 1e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1ec:	0000020d 	andeq	r0, r0, sp, lsl #4
 1f0:	0000050d 	andeq	r0, r0, sp, lsl #10
 1f4:	25d60100 	ldrbcs	r0, [r6, #256]	; 0x100
 1f8:	02000000 	andeq	r0, r0, #0
 1fc:	b50d7791 	strlt	r7, [sp, #-1937]	; 0xfffff86f
 200:	01000000 	mrseq	r0, (UNDEF: 0)
 204:	000025d6 	ldrdeq	r2, [r0], -r6
 208:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 20c:	026b0f00 	rsbeq	r0, fp, #0, 30
 210:	b2010000 	andlt	r0, r1, #0
 214:	00000025 	andeq	r0, r0, r5, lsr #32
 218:	200001ec 	andcs	r0, r0, ip, ror #3
 21c:	00000090 	muleq	r0, r0, r0
 220:	02439c01 	subeq	r9, r3, #256	; 0x100
 224:	b50d0000 	strlt	r0, [sp, #-0]
 228:	01000000 	mrseq	r0, (UNDEF: 0)
 22c:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
 230:	6f910200 	svcvs	0x00910200
 234:	00011a10 	andeq	r1, r1, r0, lsl sl
 238:	25b40100 	ldrcs	r0, [r4, #256]!	; 0x100
 23c:	02000000 	andeq	r0, r0, #0
 240:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 244:	00000237 	andeq	r0, r0, r7, lsr r2
 248:	017e9501 	cmneq	lr, r1, lsl #10
 24c:	006e2000 	rsbeq	r2, lr, r0
 250:	9c010000 	stcls	0, cr0, [r1], {-0}
 254:	00000267 	andeq	r0, r0, r7, ror #4
 258:	00011010 	andeq	r1, r1, r0, lsl r0
 25c:	30a00100 	adccc	r0, r0, r0, lsl #2
 260:	02000000 	andeq	r0, r0, #0
 264:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 268:	000000ae 	andeq	r0, r0, lr, lsr #1
 26c:	01247e01 			; <UNDEFINED> instruction: 0x01247e01
 270:	005a2000 	subseq	r2, sl, r0
 274:	9c010000 	stcls	0, cr0, [r1], {-0}
 278:	0000028b 	andeq	r0, r0, fp, lsl #5
 27c:	0000b50d 	andeq	fp, r0, sp, lsl #10
 280:	257e0100 	ldrbcs	r0, [lr, #-256]!	; 0xffffff00
 284:	02000000 	andeq	r0, r0, #0
 288:	11007791 			; <UNDEFINED> instruction: 0x11007791
 28c:	00000135 	andeq	r0, r0, r5, lsr r1
 290:	00f07901 	rscseq	r7, r0, r1, lsl #18
 294:	00342000 	eorseq	r2, r4, r0
 298:	9c010000 	stcls	0, cr0, [r1], {-0}
 29c:	000002ad 	andeq	r0, r0, sp, lsr #5
 2a0:	0100780e 	tsteq	r0, lr, lsl #16
 2a4:	00002579 	andeq	r2, r0, r9, ror r5
 2a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2ac:	014c1100 	mrseq	r1, (UNDEF: 92)
 2b0:	74010000 	strvc	r0, [r1], #-0
 2b4:	200000c6 	andcs	r0, r0, r6, asr #1
 2b8:	0000002a 	andeq	r0, r0, sl, lsr #32
 2bc:	02cf9c01 	sbceq	r9, pc, #256	; 0x100
 2c0:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
 2c4:	25740100 	ldrbcs	r0, [r4, #-256]!	; 0xffffff00
 2c8:	02000000 	andeq	r0, r0, #0
 2cc:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 2d0:	0000018a 	andeq	r0, r0, sl, lsl #3
 2d4:	00946601 	addseq	r6, r4, r1, lsl #12
 2d8:	00322000 	eorseq	r2, r2, r0
 2dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e0:	0000030c 	andeq	r0, r0, ip, lsl #6
 2e4:	00736d0e 	rsbseq	r6, r3, lr, lsl #26
 2e8:	005b6601 	subseq	r6, fp, r1, lsl #12
 2ec:	91020000 	mrsls	r0, (UNDEF: 2)
 2f0:	0069126c 	rsbeq	r1, r9, ip, ror #4
 2f4:	030c6801 	movweq	r6, #51201	; 0xc801
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	00141074 	andseq	r1, r4, r4, ror r0
 300:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 304:	0000030c 	andeq	r0, r0, ip, lsl #6
 308:	00709102 	rsbseq	r9, r0, r2, lsl #2
 30c:	69050413 	stmdbvs	r5, {r0, r1, r4, sl}
 310:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
 314:	0000017e 	andeq	r0, r0, lr, ror r1
 318:	00665201 	rsbeq	r5, r6, r1, lsl #4
 31c:	002e2000 	eoreq	r2, lr, r0
 320:	9c010000 	stcls	0, cr0, [r1], {-0}
 324:	00000363 	andeq	r0, r0, r3, ror #6
 328:	0073750e 	rsbseq	r7, r3, lr, lsl #10
 32c:	005b5201 	subseq	r5, fp, r1, lsl #4
 330:	91020000 	mrsls	r0, (UNDEF: 2)
 334:	0069146c 	rsbeq	r1, r9, ip, ror #8
 338:	030c5401 	movweq	r5, #50177	; 0xc401
 33c:	14100000 	ldrne	r0, [r0], #-0
 340:	01000000 	mrseq	r0, (UNDEF: 0)
 344:	00030c54 	andeq	r0, r3, r4, asr ip
 348:	70910200 	addsvc	r0, r1, r0, lsl #4
 34c:	00007415 	andeq	r7, r0, r5, lsl r4
 350:	00001820 	andeq	r1, r0, r0, lsr #16
 354:	00691200 	rsbeq	r1, r9, r0, lsl #4
 358:	030c6001 	movweq	r6, #49153	; 0xc001
 35c:	91020000 	mrsls	r0, (UNDEF: 2)
 360:	16000074 			; <UNDEFINED> instruction: 0x16000074
 364:	00000086 	andeq	r0, r0, r6, lsl #1
 368:	00544c01 	subseq	r4, r4, r1, lsl #24
 36c:	00122000 	andseq	r2, r2, r0
 370:	9c010000 	stcls	0, cr0, [r1], {-0}
 374:	00024a17 	andeq	r4, r2, r7, lsl sl
 378:	10360100 	eorsne	r0, r6, r0, lsl #2
 37c:	44200000 	strtmi	r0, [r0], #-0
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	0195179c 			; <UNDEFINED> instruction: 0x0195179c
 388:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 38c:	20000000 	andcs	r0, r0, r0
 390:	0000000c 	andeq	r0, r0, ip
 394:	Address 0x00000394 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  38:	06120111 			; <UNDEFINED> instruction: 0x06120111
  3c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  40:	00130119 	andseq	r0, r3, r9, lsl r1
  44:	00340500 	eorseq	r0, r4, r0, lsl #10
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	1349053b 	movtne	r0, #38203	; 0x953b
  50:	00001802 	andeq	r1, r0, r2, lsl #16
  54:	3f002e06 	svccc	0x00002e06
  58:	3a0e0319 	bcc	380cc4 <startup-0x1fc7f33c>
  5c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  60:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  64:	97184006 	ldrls	r4, [r8, -r6]
  68:	00001942 	andeq	r1, r0, r2, asr #18
  6c:	03000507 	movweq	r0, #1287	; 0x507
  70:	3b0b3a08 	blcc	2ce898 <startup-0x1fd31768>
  74:	02134905 	andseq	r4, r3, #81920	; 0x14000
  78:	08000018 	stmdaeq	r0, {r3, r4}
  7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  84:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  88:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  8c:	03193f00 	tsteq	r9, #0, 30
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	11192705 	tstne	r9, r5, lsl #14
  98:	40061201 	andmi	r1, r6, r1, lsl #4
  9c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
  a4:	03193f01 	tsteq	r9, #1, 30
  a8:	3b0b3a0e 	blcc	2ce8e8 <startup-0x1fd31718>
  ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
  b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  b4:	96184006 	ldrls	r4, [r8], -r6
  b8:	13011942 	movwne	r1, #6466	; 0x1942
  bc:	050b0000 	streq	r0, [fp, #-0]
  c0:	3a0e0300 	bcc	380cc8 <startup-0x1fc7f338>
  c4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  c8:	00180213 	andseq	r0, r8, r3, lsl r2
  cc:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
  d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  d4:	0b3b0b3a 	bleq	ec2dc4 <startup-0x1f13d23c>
  d8:	01111927 	tsteq	r1, r7, lsr #18
  dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  e0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
  e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f4:	050e0000 	streq	r0, [lr, #-0]
  f8:	3a080300 	bcc	200d00 <startup-0x1fdff300>
  fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	00180213 	andseq	r0, r8, r3, lsl r2
 104:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
 110:	13491927 	movtne	r1, #39207	; 0x9927
 114:	06120111 			; <UNDEFINED> instruction: 0x06120111
 118:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 11c:	00130119 	andseq	r0, r3, r9, lsl r1
 120:	00341000 	eorseq	r1, r4, r0
 124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
 128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 12c:	00001802 	andeq	r1, r0, r2, lsl #16
 130:	3f012e11 	svccc	0x00012e11
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 13c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 140:	97184006 	ldrls	r4, [r8, -r6]
 144:	13011942 	movwne	r1, #6466	; 0x1942
 148:	34120000 	ldrcc	r0, [r2], #-0
 14c:	3a080300 	bcc	200d54 <startup-0x1fdff2ac>
 150:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 154:	00180213 	andseq	r0, r8, r3, lsl r2
 158:	00241300 	eoreq	r1, r4, r0, lsl #6
 15c:	0b3e0b0b 	bleq	f82d90 <startup-0x1f07d270>
 160:	00000803 	andeq	r0, r0, r3, lsl #16
 164:	03003414 	movweq	r3, #1044	; 0x414
 168:	3b0b3a08 	blcc	2ce990 <startup-0x1fd31670>
 16c:	0013490b 	andseq	r4, r3, fp, lsl #18
 170:	010b1500 	tsteq	fp, r0, lsl #10
 174:	06120111 			; <UNDEFINED> instruction: 0x06120111
 178:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 17c:	03193f00 	tsteq	r9, #0, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	1119270b 	tstne	r9, fp, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 190:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 194:	03193f00 	tsteq	r9, #0, 30
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1a8:	Address 0x000001a8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200006c0 	andcs	r0, r0, r0, asr #13
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000020d 	andeq	r0, r0, sp, lsl #4
   4:	00660002 	rsbeq	r0, r6, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	55472f3a 	strbpl	r2, [r7, #-3898]	; 0xfffff0c6
  20:	5449442f 	strbpl	r4, [r9], #-1071	; 0xfffffbd1
  24:	20313531 	eorscs	r3, r1, r1, lsr r5
  28:	614d202d 	cmpvs	sp, sp, lsr #32
  2c:	6e696b73 	vmovvs.8	d9[7], r6
  30:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  38:	50206461 	eorpl	r6, r0, r1, ror #8
  3c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  40:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  48:	646f432f 	strbtvs	r4, [pc], #-815	; 50 <startup-0x1fffffb0>
  4c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  50:	72672f65 	rsbvc	r2, r7, #404	; 0x194
  54:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  58:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  5c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  60:	74730000 	ldrbtvc	r0, [r3], #-0
  64:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  68:	00632e70 	rsbeq	r2, r3, r0, ror lr
  6c:	00000001 	andeq	r0, r0, r1
  70:	00020500 	andeq	r0, r2, r0, lsl #10
  74:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  78:	2113012e 	tstcs	r3, lr, lsr #2
  7c:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  80:	01010003 	tsteq	r1, r3
  84:	10020500 	andne	r0, r2, r0, lsl #10
  88:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  8c:	3f2f0136 	svccc	0x002f0136
  90:	003f3f42 	eorseq	r3, pc, r2, asr #30
  94:	06010402 	streq	r0, [r1], -r2, lsl #8
  98:	3d680620 	stclcc	6, cr0, [r8, #-128]!	; 0xffffff80
  9c:	2f2f2fa1 	svccs	0x002f2fa1
  a0:	0c034b3f 			; <UNDEFINED> instruction: 0x0c034b3f
  a4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  a8:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
  ac:	002c0304 	eoreq	r0, ip, r4, lsl #6
  b0:	06010402 	streq	r0, [r1], -r2, lsl #8
  b4:	4d4e063c 	stclmi	6, cr0, [lr, #-240]	; 0xffffff10
  b8:	0200424b 	andeq	r4, r0, #-1342177276	; 0xb0000004
  bc:	003e0304 	eorseq	r0, lr, r4, lsl #6
  c0:	48030402 	stmdami	r3, {r1, sl}
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	4e063c06 	cdpmi	12, 0, cr3, cr6, cr6, {0}
  cc:	7783674d 	strvc	r6, [r3, sp, asr #14]
  d0:	6777c967 	ldrbvs	ip, [r7, -r7, ror #18]!
  d4:	03741103 	cmneq	r4, #-1073741824	; 0xc0000000
  d8:	1103206f 	tstne	r3, pc, rrx
  dc:	2072034a 	rsbscs	r0, r2, sl, asr #6
  e0:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  e4:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  e8:	3d4d243d 	cfstrdcc	mvd2, [sp, #-244]	; 0xffffff0c
  ec:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
  f8:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
  fc:	00300104 	eorseq	r0, r0, r4, lsl #2
 100:	68010402 	stmdavs	r1, {r1, sl}
 104:	01040200 	mrseq	r0, R12_usr
 108:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 10c:	3e4c2f01 	cdpcc	15, 4, cr2, cr12, cr1, {0}
 110:	3e69bd3d 	mcrcc	13, 3, fp, cr9, cr13, {1}
 114:	30593e3e 	subscc	r3, r9, lr, lsr lr
 118:	3e5a303d 	mrccc	0, 2, r3, cr10, cr13, {1}
 11c:	303d4c3e 	eorscc	r4, sp, lr, lsr ip
 120:	3d313d4c 	ldccc	13, cr3, [r1, #-304]!	; 0xfffffed0
 124:	594c91cb 	stmdbpl	ip, {r0, r1, r3, r6, r7, r8, ip, pc}^
 128:	3e2f3d30 	mcrcc	13, 1, r3, cr15, cr0, {1}
 12c:	5a303d5a 	bpl	c0f69c <startup-0x1f3f0964>
 130:	3e3e313d 	mrccc	1, 1, r3, cr14, cr13, {1}
 134:	3e91773d 	mrccc	7, 4, r7, cr1, cr13, {1}
 138:	4d833e5a 	stcmi	14, cr3, [r3, #360]	; 0x168
 13c:	3d5a3e91 	ldclcc	14, cr3, [sl, #-580]	; 0xfffffdbc
 140:	674d833e 	smlaldxvs	r8, sp, lr, r3
 144:	324d6759 	subcc	r6, sp, #23330816	; 0x1640000
 148:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 14c:	4b4b4b3e 	blmi	12d2e4c <startup-0x1ed2d1b4>
 150:	3f3d4c4b 	svccc	0x003d4c4b
 154:	4c9f4c3f 	ldcmi	12, cr4, [pc], {63}	; 0x3f
 158:	03040200 	movweq	r0, #16896	; 0x4200
 15c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 160:	02004803 	andeq	r4, r0, #196608	; 0x30000
 164:	58060104 	stmdapl	r6, {r2, r8}
 168:	02040200 	andeq	r0, r4, #0, 4
 16c:	02004506 	andeq	r4, r0, #25165824	; 0x1800000
 170:	58060104 	stmdapl	r6, {r2, r8}
 174:	4a0a0306 	bmi	280d94 <startup-0x1fd7f26c>
 178:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
 17c:	4a060104 	bmi	180594 <startup-0x1fe7fa6c>
 180:	02040200 	andeq	r0, r4, #0, 4
 184:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 188:	02004a03 	andeq	r4, r0, #12288	; 0x3000
 18c:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
 190:	4baf684f 	blmi	febda2d4 <main+0xdebd9cb0>
 194:	4b224b22 	blmi	892e24 <startup-0x1f76d1dc>
 198:	4b224b22 	blmi	892e28 <startup-0x1f76d1d8>
 19c:	4b224b22 	blmi	892e2c <startup-0x1f76d1d4>
 1a0:	3e234b22 	vmulcc.f64	d4, d3, d18
 1a4:	784b3e69 	stmdavc	fp, {r0, r3, r5, r6, r9, sl, fp, ip, sp}^
 1a8:	cac9694b 	bgt	ff25a6dc <main+0xdf25a0b8>
 1ac:	a23eae92 	eorsge	sl, lr, #2336	; 0x920
 1b0:	7fbf0393 	svcvc	0x00bf0393
 1b4:	00c203ac 	sbceq	r0, r2, ip, lsr #7
 1b8:	3d306920 			; <UNDEFINED> instruction: 0x3d306920
 1bc:	3fa13d30 	svccc	0x00a13d30
 1c0:	0031302f 	eorseq	r3, r1, pc, lsr #32
 1c4:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1c8:	03040200 	movweq	r0, #16896	; 0x4200
 1cc:	04020064 	streq	r0, [r2], #-100	; 0xffffff9c
 1d0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1d4:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 1d8:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 1dc:	00640304 	rsbeq	r0, r4, r4, lsl #6
 1e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1e4:	5a41063c 	bpl	1041adc <startup-0x1efbe524>
 1e8:	03040200 	movweq	r0, #16896	; 0x4200
 1ec:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1f0:	02006403 	andeq	r6, r0, #50331648	; 0x3000000
 1f4:	3c060104 	stfccs	f0, [r6], {4}
 1f8:	02004006 	andeq	r4, r0, #6
 1fc:	003e0304 	eorseq	r0, lr, r4, lsl #6
 200:	64030402 	strvs	r0, [r3], #-1026	; 0xfffffbfe
 204:	01040200 	mrseq	r0, R12_usr
 208:	40063c06 	andmi	r3, r6, r6, lsl #24
 20c:	01000602 	tsteq	r0, r2, lsl #12
 210:	Address 0x00000210 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
   4:	6c617600 	stclvs	6, cr7, [r1], #-0
   8:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
   c:	7379665f 	cmnvc	r9, #99614720	; 0x5f00000
  10:	006b7369 	rsbeq	r7, fp, r9, ror #6
  14:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  18:	72670074 	rsbvc	r0, r7, #116	; 0x74
  1c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  20:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  24:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2c <startup-0x1fffffd4>
  28:	00617461 	rsbeq	r7, r1, r1, ror #8
  2c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  30:	3a5a006c 	bcc	16801e8 <startup-0x1e97fe18>
  34:	5c55475c 	mrrcpl	7, 5, r4, r5, cr12
  38:	31544944 	cmpcc	r4, r4, asr #18
  3c:	2d203135 	stfcss	f3, [r0, #-212]!	; 0xffffff2c
  40:	73614d20 	cmnvc	r1, #32, 26	; 0x800
  44:	6f6e696b 	svcvs	0x006e696b
  48:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  4c:	61726574 	cmnvs	r2, r4, ror r5
  50:	72502064 	subsvc	r2, r0, #100	; 0x64
  54:	6172676f 	cmnvs	r2, pc, ror #14
  58:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
  5c:	5c676e69 	stclpl	14, cr6, [r7], #-420	; 0xfffffe5c
  60:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  64:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  68:	6172675c 	cmnvs	r2, ip, asr r7
  6c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  70:	70736964 	rsbsvc	r6, r3, r4, ror #18
  74:	0079616c 	rsbseq	r6, r9, ip, ror #2
  78:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  7c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  80:	61686320 	cmnvs	r8, r0, lsr #6
  84:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  88:	5f79616c 	svcpl	0x0079616c
  8c:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
  90:	72670073 	rsbvc	r0, r7, #115	; 0x73
  94:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  98:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  9c:	00657469 	rsbeq	r7, r5, r9, ror #8
  a0:	706d6574 	rsbvc	r6, sp, r4, ror r5
  a4:	70706100 	rsbsvc	r6, r0, r0, lsl #2
  a8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  ac:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
  b0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  b4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  b8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffef0 <main+0xdffff8cc>
  bc:	0072656c 	rsbseq	r6, r2, ip, ror #10
  c0:	472f3a5a 			; <UNDEFINED> instruction: 0x472f3a5a
  c4:	49442f55 	stmdbmi	r4, {r0, r2, r4, r6, r8, r9, sl, fp, sp}^
  c8:	31353154 	teqcc	r5, r4, asr r1
  cc:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
  d0:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d4:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  d8:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  dc:	20646172 	rsbcs	r6, r4, r2, ror r1
  e0:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  e4:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  e8:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  ec:	6f432f67 	svcvs	0x00432f67
  f0:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  f4:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
  f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  fc:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 100:	616c7073 	smcvs	50947	; 0xc703
 104:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 108:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 10c:	00632e70 	rsbeq	r2, r3, r0, ror lr
 110:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
 114:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 118:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
 11c:	61765f74 	cmnvs	r6, r4, ror pc
 120:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 124:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 128:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 12c:	61697469 	cmnvs	r9, r9, ror #8
 130:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 134:	61726700 	cmnvs	r2, r0, lsl #14
 138:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 13c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 140:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 144:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 148:	00726165 	rsbseq	r6, r2, r5, ror #2
 14c:	70617267 	rsbvc	r7, r1, r7, ror #4
 150:	5f636968 	svcpl	0x00636968
 154:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 158:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 15c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 160:	736e7500 	cmnvc	lr, #0, 10
 164:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 168:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 16c:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
 170:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 174:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 178:	5f38746e 	svcpl	0x0038746e
 17c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 180:	5f79616c 	svcpl	0x0079616c
 184:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 188:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 18c:	5f79616c 	svcpl	0x0079616c
 190:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
 194:	61747300 	cmnvs	r4, r0, lsl #6
 198:	70757472 	rsbsvc	r7, r5, r2, ror r4
 19c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 1a0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 1a4:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 1a8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 1ac:	30373130 	eorscc	r3, r7, r0, lsr r1
 1b0:	20343039 	eorscs	r3, r4, r9, lsr r0
 1b4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 1b8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 1bc:	415b2029 	cmpmi	fp, r9, lsr #32
 1c0:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff476 <main+0xdfffee52>
 1c4:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 1c8:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 1cc:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 1d0:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1d4:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1d8:	6f697369 	svcvs	0x00697369
 1dc:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 1e0:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 1e4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1e8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1ec:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1f0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 1f4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 1f8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1fc:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 200:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 204:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 208:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 20c:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
 210:	304f2d20 	subcc	r2, pc, r0, lsr #26
 214:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 218:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 21c:	6e690039 	mcrvs	0, 3, r0, cr9, cr9, {1}
 220:	00786564 	rsbseq	r6, r8, r4, ror #10
 224:	70617267 	rsbvc	r7, r1, r7, ror #4
 228:	5f636968 	svcpl	0x00636968
 22c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 230:	61645f65 	cmnvs	r4, r5, ror #30
 234:	67006174 	smlsdxvs	r0, r4, r1, r6
 238:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 23c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 240:	5f746961 	svcpl	0x00746961
 244:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 248:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 24c:	5f79616c 	svcpl	0x0079616c
 250:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 254:	72670073 	rsbvc	r0, r7, #115	; 0x73
 258:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 25c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 260:	5f726165 	svcpl	0x00726165
 264:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 268:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 26c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 270:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 274:	00646165 	rsbeq	r6, r4, r5, ror #2
 278:	70617267 	rsbvc	r7, r1, r7, ror #4
 27c:	5f636968 	svcpl	0x00636968
 280:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 284:	6f635f65 	svcvs	0x00635f65
 288:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 28c:	Address 0x0000028c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffecea>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000066 	andcs	r0, r0, r6, rrx
  64:	0000002e 	andeq	r0, r0, lr, lsr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000094 	mulcs	r0, r4, r0
  84:	00000032 	andeq	r0, r0, r2, lsr r0
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	0000002a 	andeq	r0, r0, sl, lsr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000124 	andcs	r0, r0, r4, lsr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000017e 	andcs	r0, r0, lr, ror r1
 104:	0000006e 	andeq	r0, r0, lr, rrx
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001ec 	andcs	r0, r0, ip, ror #3
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	2000027c 	andcs	r0, r0, ip, ror r2
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200002fc 	strdcs	r0, [r0], -ip
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000033c 	andcs	r0, r0, ip, lsr r3
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000382 	andcs	r0, r0, r2, lsl #7
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003ac 	andcs	r0, r0, ip, lsr #7
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000402 	andcs	r0, r0, r2, lsl #8
 1e0:	00000066 	andeq	r0, r0, r6, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000468 	andcs	r0, r0, r8, ror #8
 200:	00000194 	muleq	r0, r4, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	300e4101 	andcc	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	200005fc 	strdcs	r0, [r0], -ip
 224:	00000028 	andeq	r0, r0, r8, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0000070d 	andeq	r0, r0, sp, lsl #14
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	20000624 	andcs	r0, r0, r4, lsr #12
 240:	0000009c 	muleq	r0, ip, r0
 244:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 248:	41018e02 	tstmi	r1, r2, lsl #28
 24c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 250:	00000007 	andeq	r0, r0, r7
