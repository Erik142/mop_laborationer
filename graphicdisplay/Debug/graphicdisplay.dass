
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 typedef unsigned char uint8_t;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb1e 	bl	20000644 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns(void)
{
20000010:	b5b0      	push	{r4, r5, r7, lr}
20000012:	af00      	add	r7, sp, #0
    *SYSTICK_CTRL = 0x0;
20000014:	4b10      	ldr	r3, [pc, #64]	; (20000058 <delay_250ns+0x48>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles - 1 = 0x29)
    *SYSTICK_LOAD = 0x29;
2000001a:	4b10      	ldr	r3, [pc, #64]	; (2000005c <delay_250ns+0x4c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *SYSTICK_LOAD /= 0x29; // Decrease delay if we're simulating
20000020:	4b0e      	ldr	r3, [pc, #56]	; (2000005c <delay_250ns+0x4c>)
20000022:	681b      	ldr	r3, [r3, #0]
20000024:	4c0d      	ldr	r4, [pc, #52]	; (2000005c <delay_250ns+0x4c>)
20000026:	2129      	movs	r1, #41	; 0x29
20000028:	0018      	movs	r0, r3
2000002a:	f000 fb59 	bl	200006e0 <__udivsi3>
2000002e:	0003      	movs	r3, r0
20000030:	6023      	str	r3, [r4, #0]
#endif
    
    *SYSTICK_VAL = 0;
20000032:	4b0b      	ldr	r3, [pc, #44]	; (20000060 <delay_250ns+0x50>)
20000034:	2200      	movs	r2, #0
20000036:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *SYSTICK_CTRL = 0x5;
20000038:	4b07      	ldr	r3, [pc, #28]	; (20000058 <delay_250ns+0x48>)
2000003a:	2205      	movs	r2, #5
2000003c:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*SYSTICK_CTRL & 0x10000) == 0);
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	4b05      	ldr	r3, [pc, #20]	; (20000058 <delay_250ns+0x48>)
20000042:	681a      	ldr	r2, [r3, #0]
20000044:	2380      	movs	r3, #128	; 0x80
20000046:	025b      	lsls	r3, r3, #9
20000048:	4013      	ands	r3, r2
2000004a:	d0f9      	beq.n	20000040 <delay_250ns+0x30>
    
    *SYSTICK_CTRL = 0x0;
2000004c:	4b02      	ldr	r3, [pc, #8]	; (20000058 <delay_250ns+0x48>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	bdb0      	pop	{r4, r5, r7, pc}
20000058:	e000e010 	and	lr, r0, r0, lsl r0
2000005c:	e000e014 	and	lr, r0, r4, lsl r0
20000060:	e000e018 	and	lr, r0, r8, lsl r0

20000064 <delay_500ns>:

void delay_500ns(void)
{
20000064:	b580      	push	{r7, lr}
20000066:	af00      	add	r7, sp, #0
    delay_250ns();
20000068:	f7ff ffd2 	bl	20000010 <delay_250ns>
    delay_250ns();
2000006c:	f7ff ffd0 	bl	20000010 <delay_250ns>
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46bd      	mov	sp, r7
20000074:	bd80      	pop	{r7, pc}

20000076 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000076:	b580      	push	{r7, lr}
20000078:	b084      	sub	sp, #16
2000007a:	af00      	add	r7, sp, #0
2000007c:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	009b      	lsls	r3, r3, #2
20000082:	60fb      	str	r3, [r7, #12]
    
#ifdef SIMULATOR
    limit = limit/10;
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	210a      	movs	r1, #10
20000088:	0018      	movs	r0, r3
2000008a:	f000 fbb3 	bl	200007f4 <__divsi3>
2000008e:	0003      	movs	r3, r0
20000090:	60fb      	str	r3, [r7, #12]
    
    if(limit > 50)
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	2b32      	cmp	r3, #50	; 0x32
20000096:	dd01      	ble.n	2000009c <delay_mikro+0x26>
    {
        limit = 50;
20000098:	2332      	movs	r3, #50	; 0x32
2000009a:	60fb      	str	r3, [r7, #12]
    }
#endif

    
    for (int i = 1; i <= limit; i++)
2000009c:	2301      	movs	r3, #1
2000009e:	60bb      	str	r3, [r7, #8]
200000a0:	e004      	b.n	200000ac <delay_mikro+0x36>
    {
        delay_250ns();
200000a2:	f7ff ffb5 	bl	20000010 <delay_250ns>
    for (int i = 1; i <= limit; i++)
200000a6:	68bb      	ldr	r3, [r7, #8]
200000a8:	3301      	adds	r3, #1
200000aa:	60bb      	str	r3, [r7, #8]
200000ac:	68ba      	ldr	r2, [r7, #8]
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	429a      	cmp	r2, r3
200000b2:	ddf6      	ble.n	200000a2 <delay_mikro+0x2c>
    }
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	46bd      	mov	sp, r7
200000ba:	b004      	add	sp, #16
200000bc:	bd80      	pop	{r7, pc}

200000be <delay_mili>:

void delay_mili(unsigned int ms)
{
200000be:	b580      	push	{r7, lr}
200000c0:	b084      	sub	sp, #16
200000c2:	af00      	add	r7, sp, #0
200000c4:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
200000c6:	23fa      	movs	r3, #250	; 0xfa
200000c8:	009b      	lsls	r3, r3, #2
200000ca:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
200000cc:	230a      	movs	r3, #10
200000ce:	60bb      	str	r3, [r7, #8]
#endif
    
    for (i = 1; i <= limit; i++)
200000d0:	2301      	movs	r3, #1
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	e006      	b.n	200000e4 <delay_mili+0x26>
    {
        delay_mikro(ms);
200000d6:	687b      	ldr	r3, [r7, #4]
200000d8:	0018      	movs	r0, r3
200000da:	f7ff ffcc 	bl	20000076 <delay_mikro>
    for (i = 1; i <= limit; i++)
200000de:	68fb      	ldr	r3, [r7, #12]
200000e0:	3301      	adds	r3, #1
200000e2:	60fb      	str	r3, [r7, #12]
200000e4:	68fa      	ldr	r2, [r7, #12]
200000e6:	68bb      	ldr	r3, [r7, #8]
200000e8:	429a      	cmp	r2, r3
200000ea:	ddf4      	ble.n	200000d6 <delay_mili+0x18>
    }
}
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46bd      	mov	sp, r7
200000f2:	b004      	add	sp, #16
200000f4:	bd80      	pop	{r7, pc}

200000f6 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
200000f6:	b580      	push	{r7, lr}
200000f8:	b082      	sub	sp, #8
200000fa:	af00      	add	r7, sp, #0
200000fc:	0002      	movs	r2, r0
200000fe:	1dfb      	adds	r3, r7, #7
20000100:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
20000102:	4b06      	ldr	r3, [pc, #24]	; (2000011c <graphic_ctrl_bit_set+0x26>)
20000104:	781a      	ldrb	r2, [r3, #0]
20000106:	4905      	ldr	r1, [pc, #20]	; (2000011c <graphic_ctrl_bit_set+0x26>)
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	781b      	ldrb	r3, [r3, #0]
2000010c:	4313      	orrs	r3, r2
2000010e:	b2db      	uxtb	r3, r3
20000110:	700b      	strb	r3, [r1, #0]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b002      	add	sp, #8
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	40021014 	andmi	r1, r2, r4, lsl r0

20000120 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
20000120:	b580      	push	{r7, lr}
20000122:	b082      	sub	sp, #8
20000124:	af00      	add	r7, sp, #0
20000126:	0002      	movs	r2, r0
20000128:	1dfb      	adds	r3, r7, #7
2000012a:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
2000012c:	4b08      	ldr	r3, [pc, #32]	; (20000150 <graphic_ctrl_bit_clear+0x30>)
2000012e:	781b      	ldrb	r3, [r3, #0]
20000130:	b25b      	sxtb	r3, r3
20000132:	1dfa      	adds	r2, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	b252      	sxtb	r2, r2
20000138:	43d2      	mvns	r2, r2
2000013a:	b252      	sxtb	r2, r2
2000013c:	4013      	ands	r3, r2
2000013e:	b25a      	sxtb	r2, r3
20000140:	4b03      	ldr	r3, [pc, #12]	; (20000150 <graphic_ctrl_bit_clear+0x30>)
20000142:	b2d2      	uxtb	r2, r2
20000144:	701a      	strb	r2, [r3, #0]
}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	46bd      	mov	sp, r7
2000014a:	b002      	add	sp, #8
2000014c:	bd80      	pop	{r7, pc}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	40021014 	andmi	r1, r2, r4, lsl r0

20000154 <select_controller>:

void select_controller(uint8_t controller)
{
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
2000015a:	0002      	movs	r2, r0
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	701a      	strb	r2, [r3, #0]
    switch(controller)
20000160:	1dfb      	adds	r3, r7, #7
20000162:	781b      	ldrb	r3, [r3, #0]
20000164:	2b18      	cmp	r3, #24
20000166:	d01a      	beq.n	2000019e <select_controller+0x4a>
20000168:	dc1d      	bgt.n	200001a6 <select_controller+0x52>
2000016a:	2b10      	cmp	r3, #16
2000016c:	d010      	beq.n	20000190 <select_controller+0x3c>
2000016e:	dc1a      	bgt.n	200001a6 <select_controller+0x52>
20000170:	2b00      	cmp	r3, #0
20000172:	d002      	beq.n	2000017a <select_controller+0x26>
20000174:	2b08      	cmp	r3, #8
20000176:	d004      	beq.n	20000182 <select_controller+0x2e>
            break;
        case (B_CS1 | B_CS2):
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
        default:
            break;
20000178:	e015      	b.n	200001a6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000017a:	2018      	movs	r0, #24
2000017c:	f7ff ffd0 	bl	20000120 <graphic_ctrl_bit_clear>
            break;
20000180:	e012      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_set(B_CS1);
20000182:	2008      	movs	r0, #8
20000184:	f7ff ffb7 	bl	200000f6 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000188:	2010      	movs	r0, #16
2000018a:	f7ff ffc9 	bl	20000120 <graphic_ctrl_bit_clear>
            break;
2000018e:	e00b      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_clear(B_CS1);
20000190:	2008      	movs	r0, #8
20000192:	f7ff ffc5 	bl	20000120 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000196:	2010      	movs	r0, #16
20000198:	f7ff ffad 	bl	200000f6 <graphic_ctrl_bit_set>
            break;
2000019c:	e004      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000019e:	2018      	movs	r0, #24
200001a0:	f7ff ffa9 	bl	200000f6 <graphic_ctrl_bit_set>
            break;
200001a4:	e000      	b.n	200001a8 <select_controller+0x54>
            break;
200001a6:	46c0      	nop			; (mov r8, r8)
    }
}
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b002      	add	sp, #8
200001ae:	bd80      	pop	{r7, pc}

200001b0 <graphic_wait_ready>:

void graphic_wait_ready(void)
{
200001b0:	b580      	push	{r7, lr}
200001b2:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
200001b4:	2040      	movs	r0, #64	; 0x40
200001b6:	f7ff ffb3 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
200001ba:	4b11      	ldr	r3, [pc, #68]	; (20000200 <graphic_wait_ready+0x50>)
200001bc:	4a11      	ldr	r2, [pc, #68]	; (20000204 <graphic_wait_ready+0x54>)
200001be:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_RS);
200001c0:	2001      	movs	r0, #1
200001c2:	f7ff ffad 	bl	20000120 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200001c6:	2002      	movs	r0, #2
200001c8:	f7ff ff95 	bl	200000f6 <graphic_ctrl_bit_set>
    
    delay_500ns();
200001cc:	f7ff ff4a 	bl	20000064 <delay_500ns>
    
    do
    {
        graphic_ctrl_bit_set(B_E);
200001d0:	2040      	movs	r0, #64	; 0x40
200001d2:	f7ff ff90 	bl	200000f6 <graphic_ctrl_bit_set>
        delay_500ns();
200001d6:	f7ff ff45 	bl	20000064 <delay_500ns>
        
        graphic_ctrl_bit_clear(B_E);
200001da:	2040      	movs	r0, #64	; 0x40
200001dc:	f7ff ffa0 	bl	20000120 <graphic_ctrl_bit_clear>
        delay_500ns();
200001e0:	f7ff ff40 	bl	20000064 <delay_500ns>
    } while( (*GRAPHIC_DATA_IDR & LCD_BUSY) != 0);
200001e4:	4b08      	ldr	r3, [pc, #32]	; (20000208 <graphic_wait_ready+0x58>)
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	b25b      	sxtb	r3, r3
200001ea:	2b00      	cmp	r3, #0
200001ec:	dbf0      	blt.n	200001d0 <graphic_wait_ready+0x20>
    
    graphic_ctrl_bit_set(B_E);
200001ee:	2040      	movs	r0, #64	; 0x40
200001f0:	f7ff ff81 	bl	200000f6 <graphic_ctrl_bit_set>
    
    * ( (unsigned long *) portModer) = 0x55555555;
200001f4:	4b02      	ldr	r3, [pc, #8]	; (20000200 <graphic_wait_ready+0x50>)
200001f6:	4a05      	ldr	r2, [pc, #20]	; (2000020c <graphic_wait_ready+0x5c>)
200001f8:	601a      	str	r2, [r3, #0]
}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	46bd      	mov	sp, r7
200001fe:	bd80      	pop	{r7, pc}
20000200:	40021000 	andmi	r1, r2, r0
20000204:	00005555 	andeq	r5, r0, r5, asr r5
20000208:	40021011 	andmi	r1, r2, r1, lsl r0
2000020c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000210 <graphic_read>:

uint8_t graphic_read(uint8_t controller)
{
20000210:	b580      	push	{r7, lr}
20000212:	b084      	sub	sp, #16
20000214:	af00      	add	r7, sp, #0
20000216:	0002      	movs	r2, r0
20000218:	1dfb      	adds	r3, r7, #7
2000021a:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val;
    
    graphic_ctrl_bit_clear(B_E);
2000021c:	2040      	movs	r0, #64	; 0x40
2000021e:	f7ff ff7f 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
20000222:	4b1b      	ldr	r3, [pc, #108]	; (20000290 <graphic_read+0x80>)
20000224:	4a1b      	ldr	r2, [pc, #108]	; (20000294 <graphic_read+0x84>)
20000226:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_RS | B_RW);
20000228:	2003      	movs	r0, #3
2000022a:	f7ff ff64 	bl	200000f6 <graphic_ctrl_bit_set>
    
    select_controller(controller);
2000022e:	1dfb      	adds	r3, r7, #7
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	0018      	movs	r0, r3
20000234:	f7ff ff8e 	bl	20000154 <select_controller>
    delay_500ns();
20000238:	f7ff ff14 	bl	20000064 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff5a 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_500ns();
20000242:	f7ff ff0f 	bl	20000064 <delay_500ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
20000246:	4a14      	ldr	r2, [pc, #80]	; (20000298 <graphic_read+0x88>)
20000248:	230f      	movs	r3, #15
2000024a:	18fb      	adds	r3, r7, r3
2000024c:	7812      	ldrb	r2, [r2, #0]
2000024e:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff65 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x55555555;
20000256:	4b0e      	ldr	r3, [pc, #56]	; (20000290 <graphic_read+0x80>)
20000258:	4a10      	ldr	r2, [pc, #64]	; (2000029c <graphic_read+0x8c>)
2000025a:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1)
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	781b      	ldrb	r3, [r3, #0]
20000260:	2b08      	cmp	r3, #8
20000262:	d104      	bne.n	2000026e <graphic_read+0x5e>
    {
        select_controller(B_CS1);
20000264:	2008      	movs	r0, #8
20000266:	f7ff ff75 	bl	20000154 <select_controller>
        graphic_wait_ready();
2000026a:	f7ff ffa1 	bl	200001b0 <graphic_wait_ready>
    }
    if(controller == B_CS2)
2000026e:	1dfb      	adds	r3, r7, #7
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	2b10      	cmp	r3, #16
20000274:	d104      	bne.n	20000280 <graphic_read+0x70>
    {
        select_controller(B_CS2);
20000276:	2010      	movs	r0, #16
20000278:	f7ff ff6c 	bl	20000154 <select_controller>
        graphic_wait_ready();
2000027c:	f7ff ff98 	bl	200001b0 <graphic_wait_ready>
    }
    
    return ret_val;
20000280:	230f      	movs	r3, #15
20000282:	18fb      	adds	r3, r7, r3
20000284:	781b      	ldrb	r3, [r3, #0]
}
20000286:	0018      	movs	r0, r3
20000288:	46bd      	mov	sp, r7
2000028a:	b004      	add	sp, #16
2000028c:	bd80      	pop	{r7, pc}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	40021000 	andmi	r1, r2, r0
20000294:	00005555 	andeq	r5, r0, r5, asr r5
20000298:	40021011 	andmi	r1, r2, r1, lsl r0
2000029c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
200002a0:	b580      	push	{r7, lr}
200002a2:	b082      	sub	sp, #8
200002a4:	af00      	add	r7, sp, #0
200002a6:	0002      	movs	r2, r0
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	701a      	strb	r2, [r3, #0]
200002ac:	1dbb      	adds	r3, r7, #6
200002ae:	1c0a      	adds	r2, r1, #0
200002b0:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_DATA_ODR = value;
200002b2:	4a1a      	ldr	r2, [pc, #104]	; (2000031c <graphic_write+0x7c>)
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	7013      	strb	r3, [r2, #0]
    
    select_controller(controller);
200002ba:	1dbb      	adds	r3, r7, #6
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff48 	bl	20000154 <select_controller>
    delay_500ns();
200002c4:	f7ff fece 	bl	20000064 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
200002c8:	2040      	movs	r0, #64	; 0x40
200002ca:	f7ff ff14 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_500ns();
200002ce:	f7ff fec9 	bl	20000064 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200002d2:	2040      	movs	r0, #64	; 0x40
200002d4:	f7ff ff24 	bl	20000120 <graphic_ctrl_bit_clear>
    
    if ( (controller & B_CS1) )
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2208      	movs	r2, #8
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x4c>
    {
        select_controller(B_CS1);
200002e2:	2008      	movs	r0, #8
200002e4:	f7ff ff36 	bl	20000154 <select_controller>
        graphic_wait_ready();
200002e8:	f7ff ff62 	bl	200001b0 <graphic_wait_ready>
    }
    if ( (controller & B_CS2) )
200002ec:	1dbb      	adds	r3, r7, #6
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	2210      	movs	r2, #16
200002f2:	4013      	ands	r3, r2
200002f4:	d004      	beq.n	20000300 <graphic_write+0x60>
    {
        select_controller(B_CS2);
200002f6:	2010      	movs	r0, #16
200002f8:	f7ff ff2c 	bl	20000154 <select_controller>
        graphic_wait_ready();
200002fc:	f7ff ff58 	bl	200001b0 <graphic_wait_ready>
    }
    
    *GRAPHIC_DATA_ODR = 0x0;
20000300:	4b06      	ldr	r3, [pc, #24]	; (2000031c <graphic_write+0x7c>)
20000302:	2200      	movs	r2, #0
20000304:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_E);
20000306:	2040      	movs	r0, #64	; 0x40
20000308:	f7ff fef5 	bl	200000f6 <graphic_ctrl_bit_set>
    
    select_controller(0);
2000030c:	2000      	movs	r0, #0
2000030e:	f7ff ff21 	bl	20000154 <select_controller>
}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b002      	add	sp, #8
20000318:	bd80      	pop	{r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021015 	andmi	r1, r2, r5, lsl r0

20000320 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller)
{
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
20000326:	0002      	movs	r2, r0
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	701a      	strb	r2, [r3, #0]
2000032c:	1dbb      	adds	r3, r7, #6
2000032e:	1c0a      	adds	r2, r1, #0
20000330:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000332:	2040      	movs	r0, #64	; 0x40
20000334:	f7ff fef4 	bl	20000120 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000338:	1dbb      	adds	r3, r7, #6
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	0018      	movs	r0, r3
2000033e:	f7ff ff09 	bl	20000154 <select_controller>
    
    graphic_ctrl_bit_clear(B_RS | B_RW);
20000342:	2003      	movs	r0, #3
20000344:	f7ff feec 	bl	20000120 <graphic_ctrl_bit_clear>
    
    graphic_write(cmd, controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781a      	ldrb	r2, [r3, #0]
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	0011      	movs	r1, r2
20000352:	0018      	movs	r0, r3
20000354:	f7ff ffa4 	bl	200002a0 <graphic_write>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}

20000360 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
2000036c:	1dbb      	adds	r3, r7, #6
2000036e:	1c0a      	adds	r2, r1, #0
20000370:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff fed4 	bl	20000120 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000378:	1dbb      	adds	r3, r7, #6
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	0018      	movs	r0, r3
2000037e:	f7ff fee9 	bl	20000154 <select_controller>
    
    graphic_ctrl_bit_set(B_RS);
20000382:	2001      	movs	r0, #1
20000384:	f7ff feb7 	bl	200000f6 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000388:	2002      	movs	r0, #2
2000038a:	f7ff fec9 	bl	20000120 <graphic_ctrl_bit_clear>
    
    graphic_write(data,controller);
2000038e:	1dbb      	adds	r3, r7, #6
20000390:	781a      	ldrb	r2, [r3, #0]
20000392:	1dfb      	adds	r3, r7, #7
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	0011      	movs	r1, r2
20000398:	0018      	movs	r0, r3
2000039a:	f7ff ff81 	bl	200002a0 <graphic_write>
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b002      	add	sp, #8
200003a4:	bd80      	pop	{r7, pc}

200003a6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
200003a6:	b580      	push	{r7, lr}
200003a8:	b082      	sub	sp, #8
200003aa:	af00      	add	r7, sp, #0
200003ac:	0002      	movs	r2, r0
200003ae:	1dfb      	adds	r3, r7, #7
200003b0:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
200003b2:	1dfb      	adds	r3, r7, #7
200003b4:	781b      	ldrb	r3, [r3, #0]
200003b6:	0018      	movs	r0, r3
200003b8:	f7ff ff2a 	bl	20000210 <graphic_read>
    return graphic_read(controller);
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	0018      	movs	r0, r3
200003c2:	f7ff ff25 	bl	20000210 <graphic_read>
200003c6:	0003      	movs	r3, r0
}
200003c8:	0018      	movs	r0, r3
200003ca:	46bd      	mov	sp, r7
200003cc:	b002      	add	sp, #8
200003ce:	bd80      	pop	{r7, pc}

200003d0 <graphic_initialize>:

void graphic_initialize(void)
{
200003d0:	b580      	push	{r7, lr}
200003d2:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_SELECT);
200003d4:	2004      	movs	r0, #4
200003d6:	f7ff fea3 	bl	20000120 <graphic_ctrl_bit_clear>
    delay_mikro(10);
200003da:	200a      	movs	r0, #10
200003dc:	f7ff fe4b 	bl	20000076 <delay_mikro>
    
    graphic_ctrl_bit_set(B_E);
200003e0:	2040      	movs	r0, #64	; 0x40
200003e2:	f7ff fe88 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_mikro(10);
200003e6:	200a      	movs	r0, #10
200003e8:	f7ff fe45 	bl	20000076 <delay_mikro>
    
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003ec:	2078      	movs	r0, #120	; 0x78
200003ee:	f7ff fe97 	bl	20000120 <graphic_ctrl_bit_clear>
    delay_mili(30);
200003f2:	201e      	movs	r0, #30
200003f4:	f7ff fe63 	bl	200000be <delay_mili>
    
    graphic_ctrl_bit_set(B_RST);
200003f8:	2020      	movs	r0, #32
200003fa:	f7ff fe7c 	bl	200000f6 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003fe:	2118      	movs	r1, #24
20000400:	203e      	movs	r0, #62	; 0x3e
20000402:	f7ff ff8d 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000406:	2118      	movs	r1, #24
20000408:	203f      	movs	r0, #63	; 0x3f
2000040a:	f7ff ff89 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000040e:	2118      	movs	r1, #24
20000410:	20c0      	movs	r0, #192	; 0xc0
20000412:	f7ff ff85 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000416:	2118      	movs	r1, #24
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff ff81 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000041e:	2118      	movs	r1, #24
20000420:	20b8      	movs	r0, #184	; 0xb8
20000422:	f7ff ff7d 	bl	20000320 <graphic_write_command>
    
    select_controller(0);
20000426:	2000      	movs	r0, #0
20000428:	f7ff fe94 	bl	20000154 <select_controller>
}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	46bd      	mov	sp, r7
20000430:	bd80      	pop	{r7, pc}

20000432 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000432:	b580      	push	{r7, lr}
20000434:	b082      	sub	sp, #8
20000436:	af00      	add	r7, sp, #0
    char page, add;
    
    for(page = 0; page <= 7; page++)
20000438:	1dfb      	adds	r3, r7, #7
2000043a:	2200      	movs	r2, #0
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	e023      	b.n	20000488 <graphic_clear_screen+0x56>
    {
        graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000440:	1dfb      	adds	r3, r7, #7
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2248      	movs	r2, #72	; 0x48
20000446:	4252      	negs	r2, r2
20000448:	4313      	orrs	r3, r2
2000044a:	b2db      	uxtb	r3, r3
2000044c:	2118      	movs	r1, #24
2000044e:	0018      	movs	r0, r3
20000450:	f7ff ff66 	bl	20000320 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000454:	2118      	movs	r1, #24
20000456:	2040      	movs	r0, #64	; 0x40
20000458:	f7ff ff62 	bl	20000320 <graphic_write_command>
        
        for(add = 0; add <= 63; add++)
2000045c:	1dbb      	adds	r3, r7, #6
2000045e:	2200      	movs	r2, #0
20000460:	701a      	strb	r2, [r3, #0]
20000462:	e008      	b.n	20000476 <graphic_clear_screen+0x44>
        {
            graphic_write_data(0, B_CS1 | B_CS2);
20000464:	2118      	movs	r1, #24
20000466:	2000      	movs	r0, #0
20000468:	f7ff ff7a 	bl	20000360 <graphic_write_data>
        for(add = 0; add <= 63; add++)
2000046c:	1dbb      	adds	r3, r7, #6
2000046e:	781a      	ldrb	r2, [r3, #0]
20000470:	1dbb      	adds	r3, r7, #6
20000472:	3201      	adds	r2, #1
20000474:	701a      	strb	r2, [r3, #0]
20000476:	1dbb      	adds	r3, r7, #6
20000478:	781b      	ldrb	r3, [r3, #0]
2000047a:	2b3f      	cmp	r3, #63	; 0x3f
2000047c:	d9f2      	bls.n	20000464 <graphic_clear_screen+0x32>
    for(page = 0; page <= 7; page++)
2000047e:	1dfb      	adds	r3, r7, #7
20000480:	781a      	ldrb	r2, [r3, #0]
20000482:	1dfb      	adds	r3, r7, #7
20000484:	3201      	adds	r2, #1
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	2b07      	cmp	r3, #7
2000048e:	d9d7      	bls.n	20000440 <graphic_clear_screen+0xe>
        }
    }
}
20000490:	46c0      	nop			; (mov r8, r8)
20000492:	46c0      	nop			; (mov r8, r8)
20000494:	46bd      	mov	sp, r7
20000496:	b002      	add	sp, #8
20000498:	bd80      	pop	{r7, pc}

2000049a <pixel>:

void pixel(unsigned x, unsigned y, unsigned set)
{
2000049a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000049c:	b087      	sub	sp, #28
2000049e:	af00      	add	r7, sp, #0
200004a0:	60f8      	str	r0, [r7, #12]
200004a2:	60b9      	str	r1, [r7, #8]
200004a4:	607a      	str	r2, [r7, #4]
    if (x > 128 || x == 0 || y > 64 || y == 0 || set > 1)
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	2b80      	cmp	r3, #128	; 0x80
200004aa:	d900      	bls.n	200004ae <pixel+0x14>
200004ac:	e0b8      	b.n	20000620 <pixel+0x186>
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d100      	bne.n	200004b6 <pixel+0x1c>
200004b4:	e0b4      	b.n	20000620 <pixel+0x186>
200004b6:	68bb      	ldr	r3, [r7, #8]
200004b8:	2b40      	cmp	r3, #64	; 0x40
200004ba:	d900      	bls.n	200004be <pixel+0x24>
200004bc:	e0b0      	b.n	20000620 <pixel+0x186>
200004be:	68bb      	ldr	r3, [r7, #8]
200004c0:	2b00      	cmp	r3, #0
200004c2:	d100      	bne.n	200004c6 <pixel+0x2c>
200004c4:	e0ac      	b.n	20000620 <pixel+0x186>
200004c6:	687b      	ldr	r3, [r7, #4]
200004c8:	2b01      	cmp	r3, #1
200004ca:	d900      	bls.n	200004ce <pixel+0x34>
200004cc:	e0a8      	b.n	20000620 <pixel+0x186>
    {
        return;
    }
    
    uint8_t bitmask, controller, x_fysisk, index = (y-1)/8;
200004ce:	68bb      	ldr	r3, [r7, #8]
200004d0:	3b01      	subs	r3, #1
200004d2:	08da      	lsrs	r2, r3, #3
200004d4:	2314      	movs	r3, #20
200004d6:	18fb      	adds	r3, r7, r3
200004d8:	701a      	strb	r2, [r3, #0]
    
    switch ((y-1) % 8)
200004da:	68bb      	ldr	r3, [r7, #8]
200004dc:	3b01      	subs	r3, #1
200004de:	2207      	movs	r2, #7
200004e0:	4013      	ands	r3, r2
200004e2:	2b07      	cmp	r3, #7
200004e4:	d82c      	bhi.n	20000540 <pixel+0xa6>
200004e6:	009a      	lsls	r2, r3, #2
200004e8:	4b4f      	ldr	r3, [pc, #316]	; (20000628 <pixel+0x18e>)
200004ea:	18d3      	adds	r3, r2, r3
200004ec:	681b      	ldr	r3, [r3, #0]
200004ee:	469f      	mov	pc, r3
    {
        case 0:
            bitmask = 0x01;
200004f0:	2317      	movs	r3, #23
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	2201      	movs	r2, #1
200004f6:	701a      	strb	r2, [r3, #0]
            break;
200004f8:	e022      	b.n	20000540 <pixel+0xa6>
        case 1:
            bitmask = 0x02;
200004fa:	2317      	movs	r3, #23
200004fc:	18fb      	adds	r3, r7, r3
200004fe:	2202      	movs	r2, #2
20000500:	701a      	strb	r2, [r3, #0]
            break;
20000502:	e01d      	b.n	20000540 <pixel+0xa6>
        case 2:
            bitmask = 0x04;
20000504:	2317      	movs	r3, #23
20000506:	18fb      	adds	r3, r7, r3
20000508:	2204      	movs	r2, #4
2000050a:	701a      	strb	r2, [r3, #0]
            break;
2000050c:	e018      	b.n	20000540 <pixel+0xa6>
        case 3:
            bitmask = 0x08;
2000050e:	2317      	movs	r3, #23
20000510:	18fb      	adds	r3, r7, r3
20000512:	2208      	movs	r2, #8
20000514:	701a      	strb	r2, [r3, #0]
            break;
20000516:	e013      	b.n	20000540 <pixel+0xa6>
        case 4:
            bitmask = 0x10;
20000518:	2317      	movs	r3, #23
2000051a:	18fb      	adds	r3, r7, r3
2000051c:	2210      	movs	r2, #16
2000051e:	701a      	strb	r2, [r3, #0]
            break;
20000520:	e00e      	b.n	20000540 <pixel+0xa6>
        case 5:
            bitmask = 0x20;
20000522:	2317      	movs	r3, #23
20000524:	18fb      	adds	r3, r7, r3
20000526:	2220      	movs	r2, #32
20000528:	701a      	strb	r2, [r3, #0]
            break;
2000052a:	e009      	b.n	20000540 <pixel+0xa6>
        case 6:
            bitmask = 0x40;
2000052c:	2317      	movs	r3, #23
2000052e:	18fb      	adds	r3, r7, r3
20000530:	2240      	movs	r2, #64	; 0x40
20000532:	701a      	strb	r2, [r3, #0]
            break;
20000534:	e004      	b.n	20000540 <pixel+0xa6>
        case 7:
            bitmask = 0x80;
20000536:	2317      	movs	r3, #23
20000538:	18fb      	adds	r3, r7, r3
2000053a:	2280      	movs	r2, #128	; 0x80
2000053c:	701a      	strb	r2, [r3, #0]
            break;
2000053e:	46c0      	nop			; (mov r8, r8)
    }
    
    if (set == 0)
20000540:	687b      	ldr	r3, [r7, #4]
20000542:	2b00      	cmp	r3, #0
20000544:	d105      	bne.n	20000552 <pixel+0xb8>
    {
        bitmask = ~bitmask;
20000546:	2217      	movs	r2, #23
20000548:	18bb      	adds	r3, r7, r2
2000054a:	18ba      	adds	r2, r7, r2
2000054c:	7812      	ldrb	r2, [r2, #0]
2000054e:	43d2      	mvns	r2, r2
20000550:	701a      	strb	r2, [r3, #0]
    }
    
    if (x > 64)
20000552:	68fb      	ldr	r3, [r7, #12]
20000554:	2b40      	cmp	r3, #64	; 0x40
20000556:	d90a      	bls.n	2000056e <pixel+0xd4>
    {
        controller = B_CS2;
20000558:	2316      	movs	r3, #22
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2210      	movs	r2, #16
2000055e:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-65;
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	b2da      	uxtb	r2, r3
20000564:	2315      	movs	r3, #21
20000566:	18fb      	adds	r3, r7, r3
20000568:	3a41      	subs	r2, #65	; 0x41
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	e009      	b.n	20000582 <pixel+0xe8>
    }
    else
    {
        controller = B_CS1;
2000056e:	2316      	movs	r3, #22
20000570:	18fb      	adds	r3, r7, r3
20000572:	2208      	movs	r2, #8
20000574:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-1;
20000576:	68fb      	ldr	r3, [r7, #12]
20000578:	b2da      	uxtb	r2, r3
2000057a:	2315      	movs	r3, #21
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	3a01      	subs	r2, #1
20000580:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000582:	2615      	movs	r6, #21
20000584:	19bb      	adds	r3, r7, r6
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	2240      	movs	r2, #64	; 0x40
2000058a:	4313      	orrs	r3, r2
2000058c:	b2da      	uxtb	r2, r3
2000058e:	2516      	movs	r5, #22
20000590:	197b      	adds	r3, r7, r5
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	0019      	movs	r1, r3
20000596:	0010      	movs	r0, r2
20000598:	f7ff fec2 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000059c:	2314      	movs	r3, #20
2000059e:	18fb      	adds	r3, r7, r3
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	2248      	movs	r2, #72	; 0x48
200005a4:	4252      	negs	r2, r2
200005a6:	4313      	orrs	r3, r2
200005a8:	b2da      	uxtb	r2, r3
200005aa:	197b      	adds	r3, r7, r5
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0019      	movs	r1, r3
200005b0:	0010      	movs	r0, r2
200005b2:	f7ff feb5 	bl	20000320 <graphic_write_command>
    
    uint8_t temp = graphic_read_data(controller);
200005b6:	2313      	movs	r3, #19
200005b8:	18fc      	adds	r4, r7, r3
200005ba:	197b      	adds	r3, r7, r5
200005bc:	781b      	ldrb	r3, [r3, #0]
200005be:	0018      	movs	r0, r3
200005c0:	f7ff fef1 	bl	200003a6 <graphic_read_data>
200005c4:	0003      	movs	r3, r0
200005c6:	7023      	strb	r3, [r4, #0]
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200005c8:	19bb      	adds	r3, r7, r6
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	2240      	movs	r2, #64	; 0x40
200005ce:	4313      	orrs	r3, r2
200005d0:	b2da      	uxtb	r2, r3
200005d2:	197b      	adds	r3, r7, r5
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	0019      	movs	r1, r3
200005d8:	0010      	movs	r0, r2
200005da:	f7ff fea1 	bl	20000320 <graphic_write_command>
    
    if (set == 1)
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	2b01      	cmp	r3, #1
200005e2:	d109      	bne.n	200005f8 <pixel+0x15e>
    {
        bitmask = bitmask | temp;
200005e4:	2117      	movs	r1, #23
200005e6:	187b      	adds	r3, r7, r1
200005e8:	1879      	adds	r1, r7, r1
200005ea:	2213      	movs	r2, #19
200005ec:	18ba      	adds	r2, r7, r2
200005ee:	7809      	ldrb	r1, [r1, #0]
200005f0:	7812      	ldrb	r2, [r2, #0]
200005f2:	430a      	orrs	r2, r1
200005f4:	701a      	strb	r2, [r3, #0]
200005f6:	e008      	b.n	2000060a <pixel+0x170>
    }
    else
    {
        bitmask = bitmask & temp;
200005f8:	2217      	movs	r2, #23
200005fa:	18bb      	adds	r3, r7, r2
200005fc:	18ba      	adds	r2, r7, r2
200005fe:	2113      	movs	r1, #19
20000600:	1879      	adds	r1, r7, r1
20000602:	7812      	ldrb	r2, [r2, #0]
20000604:	7809      	ldrb	r1, [r1, #0]
20000606:	400a      	ands	r2, r1
20000608:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_data(bitmask, controller);
2000060a:	2316      	movs	r3, #22
2000060c:	18fb      	adds	r3, r7, r3
2000060e:	781a      	ldrb	r2, [r3, #0]
20000610:	2317      	movs	r3, #23
20000612:	18fb      	adds	r3, r7, r3
20000614:	781b      	ldrb	r3, [r3, #0]
20000616:	0011      	movs	r1, r2
20000618:	0018      	movs	r0, r3
2000061a:	f7ff fea1 	bl	20000360 <graphic_write_data>
2000061e:	e000      	b.n	20000622 <pixel+0x188>
        return;
20000620:	46c0      	nop			; (mov r8, r8)
}
20000622:	46bd      	mov	sp, r7
20000624:	b007      	add	sp, #28
20000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000628:	200009cc 	andcs	r0, r0, ip, asr #19

2000062c <app_init>:

void app_init(void)
{    
2000062c:	b580      	push	{r7, lr}
2000062e:	af00      	add	r7, sp, #0
    * ( (unsigned long *) portModer) = 0x55555555;
20000630:	4b02      	ldr	r3, [pc, #8]	; (2000063c <app_init+0x10>)
20000632:	4a03      	ldr	r2, [pc, #12]	; (20000640 <app_init+0x14>)
20000634:	601a      	str	r2, [r3, #0]
}
20000636:	46c0      	nop			; (mov r8, r8)
20000638:	46bd      	mov	sp, r7
2000063a:	bd80      	pop	{r7, pc}
2000063c:	40021000 	andmi	r1, r2, r0
20000640:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000644 <main>:

void main(void)
{
20000644:	b580      	push	{r7, lr}
20000646:	b082      	sub	sp, #8
20000648:	af00      	add	r7, sp, #0
    unsigned i;
    
    app_init();
2000064a:	f7ff ffef 	bl	2000062c <app_init>
    graphic_initialize();
2000064e:	f7ff febf 	bl	200003d0 <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
#endif

    for(i = 1; i <= 128; i++) // Rita en horisontell linje
20000652:	2301      	movs	r3, #1
20000654:	607b      	str	r3, [r7, #4]
20000656:	e008      	b.n	2000066a <main+0x26>
    {
        pixel(i,10,1);
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	2201      	movs	r2, #1
2000065c:	210a      	movs	r1, #10
2000065e:	0018      	movs	r0, r3
20000660:	f7ff ff1b 	bl	2000049a <pixel>
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	3301      	adds	r3, #1
20000668:	607b      	str	r3, [r7, #4]
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	2b80      	cmp	r3, #128	; 0x80
2000066e:	d9f3      	bls.n	20000658 <main+0x14>
    }
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
20000670:	2301      	movs	r3, #1
20000672:	607b      	str	r3, [r7, #4]
20000674:	e008      	b.n	20000688 <main+0x44>
    {
        pixel(10,i,1);
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	2201      	movs	r2, #1
2000067a:	0019      	movs	r1, r3
2000067c:	200a      	movs	r0, #10
2000067e:	f7ff ff0c 	bl	2000049a <pixel>
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	3301      	adds	r3, #1
20000686:	607b      	str	r3, [r7, #4]
20000688:	687b      	ldr	r3, [r7, #4]
2000068a:	2b40      	cmp	r3, #64	; 0x40
2000068c:	d9f3      	bls.n	20000676 <main+0x32>
    }
    
    delay_mili(500);
2000068e:	23fa      	movs	r3, #250	; 0xfa
20000690:	005b      	lsls	r3, r3, #1
20000692:	0018      	movs	r0, r3
20000694:	f7ff fd13 	bl	200000be <delay_mili>
    
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
20000698:	2301      	movs	r3, #1
2000069a:	607b      	str	r3, [r7, #4]
2000069c:	e008      	b.n	200006b0 <main+0x6c>
    {
        pixel(i,10,0);
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	2200      	movs	r2, #0
200006a2:	210a      	movs	r1, #10
200006a4:	0018      	movs	r0, r3
200006a6:	f7ff fef8 	bl	2000049a <pixel>
    for(i = 1; i <= 128; i++) // Rita en horisontell linje
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	3301      	adds	r3, #1
200006ae:	607b      	str	r3, [r7, #4]
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	2b80      	cmp	r3, #128	; 0x80
200006b4:	d9f3      	bls.n	2000069e <main+0x5a>
    }
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
200006b6:	2301      	movs	r3, #1
200006b8:	607b      	str	r3, [r7, #4]
200006ba:	e008      	b.n	200006ce <main+0x8a>
    {
        pixel(10,i,0);
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	2200      	movs	r2, #0
200006c0:	0019      	movs	r1, r3
200006c2:	200a      	movs	r0, #10
200006c4:	f7ff fee9 	bl	2000049a <pixel>
    for(i = 1; i <= 64; i++) // Rita en vertikal linje
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	3301      	adds	r3, #1
200006cc:	607b      	str	r3, [r7, #4]
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	2b40      	cmp	r3, #64	; 0x40
200006d2:	d9f3      	bls.n	200006bc <main+0x78>
    }
}
200006d4:	46c0      	nop			; (mov r8, r8)
200006d6:	46c0      	nop			; (mov r8, r8)
200006d8:	46bd      	mov	sp, r7
200006da:	b002      	add	sp, #8
200006dc:	bd80      	pop	{r7, pc}
200006de:	46c0      	nop			; (mov r8, r8)

200006e0 <__udivsi3>:
200006e0:	2200      	movs	r2, #0
200006e2:	0843      	lsrs	r3, r0, #1
200006e4:	428b      	cmp	r3, r1
200006e6:	d374      	bcc.n	200007d2 <__udivsi3+0xf2>
200006e8:	0903      	lsrs	r3, r0, #4
200006ea:	428b      	cmp	r3, r1
200006ec:	d35f      	bcc.n	200007ae <__udivsi3+0xce>
200006ee:	0a03      	lsrs	r3, r0, #8
200006f0:	428b      	cmp	r3, r1
200006f2:	d344      	bcc.n	2000077e <__udivsi3+0x9e>
200006f4:	0b03      	lsrs	r3, r0, #12
200006f6:	428b      	cmp	r3, r1
200006f8:	d328      	bcc.n	2000074c <__udivsi3+0x6c>
200006fa:	0c03      	lsrs	r3, r0, #16
200006fc:	428b      	cmp	r3, r1
200006fe:	d30d      	bcc.n	2000071c <__udivsi3+0x3c>
20000700:	22ff      	movs	r2, #255	; 0xff
20000702:	0209      	lsls	r1, r1, #8
20000704:	ba12      	rev	r2, r2
20000706:	0c03      	lsrs	r3, r0, #16
20000708:	428b      	cmp	r3, r1
2000070a:	d302      	bcc.n	20000712 <__udivsi3+0x32>
2000070c:	1212      	asrs	r2, r2, #8
2000070e:	0209      	lsls	r1, r1, #8
20000710:	d065      	beq.n	200007de <__udivsi3+0xfe>
20000712:	0b03      	lsrs	r3, r0, #12
20000714:	428b      	cmp	r3, r1
20000716:	d319      	bcc.n	2000074c <__udivsi3+0x6c>
20000718:	e000      	b.n	2000071c <__udivsi3+0x3c>
2000071a:	0a09      	lsrs	r1, r1, #8
2000071c:	0bc3      	lsrs	r3, r0, #15
2000071e:	428b      	cmp	r3, r1
20000720:	d301      	bcc.n	20000726 <__udivsi3+0x46>
20000722:	03cb      	lsls	r3, r1, #15
20000724:	1ac0      	subs	r0, r0, r3
20000726:	4152      	adcs	r2, r2
20000728:	0b83      	lsrs	r3, r0, #14
2000072a:	428b      	cmp	r3, r1
2000072c:	d301      	bcc.n	20000732 <__udivsi3+0x52>
2000072e:	038b      	lsls	r3, r1, #14
20000730:	1ac0      	subs	r0, r0, r3
20000732:	4152      	adcs	r2, r2
20000734:	0b43      	lsrs	r3, r0, #13
20000736:	428b      	cmp	r3, r1
20000738:	d301      	bcc.n	2000073e <__udivsi3+0x5e>
2000073a:	034b      	lsls	r3, r1, #13
2000073c:	1ac0      	subs	r0, r0, r3
2000073e:	4152      	adcs	r2, r2
20000740:	0b03      	lsrs	r3, r0, #12
20000742:	428b      	cmp	r3, r1
20000744:	d301      	bcc.n	2000074a <__udivsi3+0x6a>
20000746:	030b      	lsls	r3, r1, #12
20000748:	1ac0      	subs	r0, r0, r3
2000074a:	4152      	adcs	r2, r2
2000074c:	0ac3      	lsrs	r3, r0, #11
2000074e:	428b      	cmp	r3, r1
20000750:	d301      	bcc.n	20000756 <__udivsi3+0x76>
20000752:	02cb      	lsls	r3, r1, #11
20000754:	1ac0      	subs	r0, r0, r3
20000756:	4152      	adcs	r2, r2
20000758:	0a83      	lsrs	r3, r0, #10
2000075a:	428b      	cmp	r3, r1
2000075c:	d301      	bcc.n	20000762 <__udivsi3+0x82>
2000075e:	028b      	lsls	r3, r1, #10
20000760:	1ac0      	subs	r0, r0, r3
20000762:	4152      	adcs	r2, r2
20000764:	0a43      	lsrs	r3, r0, #9
20000766:	428b      	cmp	r3, r1
20000768:	d301      	bcc.n	2000076e <__udivsi3+0x8e>
2000076a:	024b      	lsls	r3, r1, #9
2000076c:	1ac0      	subs	r0, r0, r3
2000076e:	4152      	adcs	r2, r2
20000770:	0a03      	lsrs	r3, r0, #8
20000772:	428b      	cmp	r3, r1
20000774:	d301      	bcc.n	2000077a <__udivsi3+0x9a>
20000776:	020b      	lsls	r3, r1, #8
20000778:	1ac0      	subs	r0, r0, r3
2000077a:	4152      	adcs	r2, r2
2000077c:	d2cd      	bcs.n	2000071a <__udivsi3+0x3a>
2000077e:	09c3      	lsrs	r3, r0, #7
20000780:	428b      	cmp	r3, r1
20000782:	d301      	bcc.n	20000788 <__udivsi3+0xa8>
20000784:	01cb      	lsls	r3, r1, #7
20000786:	1ac0      	subs	r0, r0, r3
20000788:	4152      	adcs	r2, r2
2000078a:	0983      	lsrs	r3, r0, #6
2000078c:	428b      	cmp	r3, r1
2000078e:	d301      	bcc.n	20000794 <__udivsi3+0xb4>
20000790:	018b      	lsls	r3, r1, #6
20000792:	1ac0      	subs	r0, r0, r3
20000794:	4152      	adcs	r2, r2
20000796:	0943      	lsrs	r3, r0, #5
20000798:	428b      	cmp	r3, r1
2000079a:	d301      	bcc.n	200007a0 <__udivsi3+0xc0>
2000079c:	014b      	lsls	r3, r1, #5
2000079e:	1ac0      	subs	r0, r0, r3
200007a0:	4152      	adcs	r2, r2
200007a2:	0903      	lsrs	r3, r0, #4
200007a4:	428b      	cmp	r3, r1
200007a6:	d301      	bcc.n	200007ac <__udivsi3+0xcc>
200007a8:	010b      	lsls	r3, r1, #4
200007aa:	1ac0      	subs	r0, r0, r3
200007ac:	4152      	adcs	r2, r2
200007ae:	08c3      	lsrs	r3, r0, #3
200007b0:	428b      	cmp	r3, r1
200007b2:	d301      	bcc.n	200007b8 <__udivsi3+0xd8>
200007b4:	00cb      	lsls	r3, r1, #3
200007b6:	1ac0      	subs	r0, r0, r3
200007b8:	4152      	adcs	r2, r2
200007ba:	0883      	lsrs	r3, r0, #2
200007bc:	428b      	cmp	r3, r1
200007be:	d301      	bcc.n	200007c4 <__udivsi3+0xe4>
200007c0:	008b      	lsls	r3, r1, #2
200007c2:	1ac0      	subs	r0, r0, r3
200007c4:	4152      	adcs	r2, r2
200007c6:	0843      	lsrs	r3, r0, #1
200007c8:	428b      	cmp	r3, r1
200007ca:	d301      	bcc.n	200007d0 <__udivsi3+0xf0>
200007cc:	004b      	lsls	r3, r1, #1
200007ce:	1ac0      	subs	r0, r0, r3
200007d0:	4152      	adcs	r2, r2
200007d2:	1a41      	subs	r1, r0, r1
200007d4:	d200      	bcs.n	200007d8 <__udivsi3+0xf8>
200007d6:	4601      	mov	r1, r0
200007d8:	4152      	adcs	r2, r2
200007da:	4610      	mov	r0, r2
200007dc:	4770      	bx	lr
200007de:	e7ff      	b.n	200007e0 <__udivsi3+0x100>
200007e0:	b501      	push	{r0, lr}
200007e2:	2000      	movs	r0, #0
200007e4:	f000 f8f0 	bl	200009c8 <__aeabi_idiv0>
200007e8:	bd02      	pop	{r1, pc}
200007ea:	46c0      	nop			; (mov r8, r8)

200007ec <__aeabi_uidivmod>:
200007ec:	2900      	cmp	r1, #0
200007ee:	d0f7      	beq.n	200007e0 <__udivsi3+0x100>
200007f0:	e776      	b.n	200006e0 <__udivsi3>
200007f2:	4770      	bx	lr

200007f4 <__divsi3>:
200007f4:	4603      	mov	r3, r0
200007f6:	430b      	orrs	r3, r1
200007f8:	d47f      	bmi.n	200008fa <__divsi3+0x106>
200007fa:	2200      	movs	r2, #0
200007fc:	0843      	lsrs	r3, r0, #1
200007fe:	428b      	cmp	r3, r1
20000800:	d374      	bcc.n	200008ec <__divsi3+0xf8>
20000802:	0903      	lsrs	r3, r0, #4
20000804:	428b      	cmp	r3, r1
20000806:	d35f      	bcc.n	200008c8 <__divsi3+0xd4>
20000808:	0a03      	lsrs	r3, r0, #8
2000080a:	428b      	cmp	r3, r1
2000080c:	d344      	bcc.n	20000898 <__divsi3+0xa4>
2000080e:	0b03      	lsrs	r3, r0, #12
20000810:	428b      	cmp	r3, r1
20000812:	d328      	bcc.n	20000866 <__divsi3+0x72>
20000814:	0c03      	lsrs	r3, r0, #16
20000816:	428b      	cmp	r3, r1
20000818:	d30d      	bcc.n	20000836 <__divsi3+0x42>
2000081a:	22ff      	movs	r2, #255	; 0xff
2000081c:	0209      	lsls	r1, r1, #8
2000081e:	ba12      	rev	r2, r2
20000820:	0c03      	lsrs	r3, r0, #16
20000822:	428b      	cmp	r3, r1
20000824:	d302      	bcc.n	2000082c <__divsi3+0x38>
20000826:	1212      	asrs	r2, r2, #8
20000828:	0209      	lsls	r1, r1, #8
2000082a:	d065      	beq.n	200008f8 <__divsi3+0x104>
2000082c:	0b03      	lsrs	r3, r0, #12
2000082e:	428b      	cmp	r3, r1
20000830:	d319      	bcc.n	20000866 <__divsi3+0x72>
20000832:	e000      	b.n	20000836 <__divsi3+0x42>
20000834:	0a09      	lsrs	r1, r1, #8
20000836:	0bc3      	lsrs	r3, r0, #15
20000838:	428b      	cmp	r3, r1
2000083a:	d301      	bcc.n	20000840 <__divsi3+0x4c>
2000083c:	03cb      	lsls	r3, r1, #15
2000083e:	1ac0      	subs	r0, r0, r3
20000840:	4152      	adcs	r2, r2
20000842:	0b83      	lsrs	r3, r0, #14
20000844:	428b      	cmp	r3, r1
20000846:	d301      	bcc.n	2000084c <__divsi3+0x58>
20000848:	038b      	lsls	r3, r1, #14
2000084a:	1ac0      	subs	r0, r0, r3
2000084c:	4152      	adcs	r2, r2
2000084e:	0b43      	lsrs	r3, r0, #13
20000850:	428b      	cmp	r3, r1
20000852:	d301      	bcc.n	20000858 <__divsi3+0x64>
20000854:	034b      	lsls	r3, r1, #13
20000856:	1ac0      	subs	r0, r0, r3
20000858:	4152      	adcs	r2, r2
2000085a:	0b03      	lsrs	r3, r0, #12
2000085c:	428b      	cmp	r3, r1
2000085e:	d301      	bcc.n	20000864 <__divsi3+0x70>
20000860:	030b      	lsls	r3, r1, #12
20000862:	1ac0      	subs	r0, r0, r3
20000864:	4152      	adcs	r2, r2
20000866:	0ac3      	lsrs	r3, r0, #11
20000868:	428b      	cmp	r3, r1
2000086a:	d301      	bcc.n	20000870 <__divsi3+0x7c>
2000086c:	02cb      	lsls	r3, r1, #11
2000086e:	1ac0      	subs	r0, r0, r3
20000870:	4152      	adcs	r2, r2
20000872:	0a83      	lsrs	r3, r0, #10
20000874:	428b      	cmp	r3, r1
20000876:	d301      	bcc.n	2000087c <__divsi3+0x88>
20000878:	028b      	lsls	r3, r1, #10
2000087a:	1ac0      	subs	r0, r0, r3
2000087c:	4152      	adcs	r2, r2
2000087e:	0a43      	lsrs	r3, r0, #9
20000880:	428b      	cmp	r3, r1
20000882:	d301      	bcc.n	20000888 <__divsi3+0x94>
20000884:	024b      	lsls	r3, r1, #9
20000886:	1ac0      	subs	r0, r0, r3
20000888:	4152      	adcs	r2, r2
2000088a:	0a03      	lsrs	r3, r0, #8
2000088c:	428b      	cmp	r3, r1
2000088e:	d301      	bcc.n	20000894 <__divsi3+0xa0>
20000890:	020b      	lsls	r3, r1, #8
20000892:	1ac0      	subs	r0, r0, r3
20000894:	4152      	adcs	r2, r2
20000896:	d2cd      	bcs.n	20000834 <__divsi3+0x40>
20000898:	09c3      	lsrs	r3, r0, #7
2000089a:	428b      	cmp	r3, r1
2000089c:	d301      	bcc.n	200008a2 <__divsi3+0xae>
2000089e:	01cb      	lsls	r3, r1, #7
200008a0:	1ac0      	subs	r0, r0, r3
200008a2:	4152      	adcs	r2, r2
200008a4:	0983      	lsrs	r3, r0, #6
200008a6:	428b      	cmp	r3, r1
200008a8:	d301      	bcc.n	200008ae <__divsi3+0xba>
200008aa:	018b      	lsls	r3, r1, #6
200008ac:	1ac0      	subs	r0, r0, r3
200008ae:	4152      	adcs	r2, r2
200008b0:	0943      	lsrs	r3, r0, #5
200008b2:	428b      	cmp	r3, r1
200008b4:	d301      	bcc.n	200008ba <__divsi3+0xc6>
200008b6:	014b      	lsls	r3, r1, #5
200008b8:	1ac0      	subs	r0, r0, r3
200008ba:	4152      	adcs	r2, r2
200008bc:	0903      	lsrs	r3, r0, #4
200008be:	428b      	cmp	r3, r1
200008c0:	d301      	bcc.n	200008c6 <__divsi3+0xd2>
200008c2:	010b      	lsls	r3, r1, #4
200008c4:	1ac0      	subs	r0, r0, r3
200008c6:	4152      	adcs	r2, r2
200008c8:	08c3      	lsrs	r3, r0, #3
200008ca:	428b      	cmp	r3, r1
200008cc:	d301      	bcc.n	200008d2 <__divsi3+0xde>
200008ce:	00cb      	lsls	r3, r1, #3
200008d0:	1ac0      	subs	r0, r0, r3
200008d2:	4152      	adcs	r2, r2
200008d4:	0883      	lsrs	r3, r0, #2
200008d6:	428b      	cmp	r3, r1
200008d8:	d301      	bcc.n	200008de <__divsi3+0xea>
200008da:	008b      	lsls	r3, r1, #2
200008dc:	1ac0      	subs	r0, r0, r3
200008de:	4152      	adcs	r2, r2
200008e0:	0843      	lsrs	r3, r0, #1
200008e2:	428b      	cmp	r3, r1
200008e4:	d301      	bcc.n	200008ea <__divsi3+0xf6>
200008e6:	004b      	lsls	r3, r1, #1
200008e8:	1ac0      	subs	r0, r0, r3
200008ea:	4152      	adcs	r2, r2
200008ec:	1a41      	subs	r1, r0, r1
200008ee:	d200      	bcs.n	200008f2 <__divsi3+0xfe>
200008f0:	4601      	mov	r1, r0
200008f2:	4152      	adcs	r2, r2
200008f4:	4610      	mov	r0, r2
200008f6:	4770      	bx	lr
200008f8:	e05d      	b.n	200009b6 <__divsi3+0x1c2>
200008fa:	0fca      	lsrs	r2, r1, #31
200008fc:	d000      	beq.n	20000900 <__divsi3+0x10c>
200008fe:	4249      	negs	r1, r1
20000900:	1003      	asrs	r3, r0, #32
20000902:	d300      	bcc.n	20000906 <__divsi3+0x112>
20000904:	4240      	negs	r0, r0
20000906:	4053      	eors	r3, r2
20000908:	2200      	movs	r2, #0
2000090a:	469c      	mov	ip, r3
2000090c:	0903      	lsrs	r3, r0, #4
2000090e:	428b      	cmp	r3, r1
20000910:	d32d      	bcc.n	2000096e <__divsi3+0x17a>
20000912:	0a03      	lsrs	r3, r0, #8
20000914:	428b      	cmp	r3, r1
20000916:	d312      	bcc.n	2000093e <__divsi3+0x14a>
20000918:	22fc      	movs	r2, #252	; 0xfc
2000091a:	0189      	lsls	r1, r1, #6
2000091c:	ba12      	rev	r2, r2
2000091e:	0a03      	lsrs	r3, r0, #8
20000920:	428b      	cmp	r3, r1
20000922:	d30c      	bcc.n	2000093e <__divsi3+0x14a>
20000924:	0189      	lsls	r1, r1, #6
20000926:	1192      	asrs	r2, r2, #6
20000928:	428b      	cmp	r3, r1
2000092a:	d308      	bcc.n	2000093e <__divsi3+0x14a>
2000092c:	0189      	lsls	r1, r1, #6
2000092e:	1192      	asrs	r2, r2, #6
20000930:	428b      	cmp	r3, r1
20000932:	d304      	bcc.n	2000093e <__divsi3+0x14a>
20000934:	0189      	lsls	r1, r1, #6
20000936:	d03a      	beq.n	200009ae <__divsi3+0x1ba>
20000938:	1192      	asrs	r2, r2, #6
2000093a:	e000      	b.n	2000093e <__divsi3+0x14a>
2000093c:	0989      	lsrs	r1, r1, #6
2000093e:	09c3      	lsrs	r3, r0, #7
20000940:	428b      	cmp	r3, r1
20000942:	d301      	bcc.n	20000948 <__divsi3+0x154>
20000944:	01cb      	lsls	r3, r1, #7
20000946:	1ac0      	subs	r0, r0, r3
20000948:	4152      	adcs	r2, r2
2000094a:	0983      	lsrs	r3, r0, #6
2000094c:	428b      	cmp	r3, r1
2000094e:	d301      	bcc.n	20000954 <__divsi3+0x160>
20000950:	018b      	lsls	r3, r1, #6
20000952:	1ac0      	subs	r0, r0, r3
20000954:	4152      	adcs	r2, r2
20000956:	0943      	lsrs	r3, r0, #5
20000958:	428b      	cmp	r3, r1
2000095a:	d301      	bcc.n	20000960 <__divsi3+0x16c>
2000095c:	014b      	lsls	r3, r1, #5
2000095e:	1ac0      	subs	r0, r0, r3
20000960:	4152      	adcs	r2, r2
20000962:	0903      	lsrs	r3, r0, #4
20000964:	428b      	cmp	r3, r1
20000966:	d301      	bcc.n	2000096c <__divsi3+0x178>
20000968:	010b      	lsls	r3, r1, #4
2000096a:	1ac0      	subs	r0, r0, r3
2000096c:	4152      	adcs	r2, r2
2000096e:	08c3      	lsrs	r3, r0, #3
20000970:	428b      	cmp	r3, r1
20000972:	d301      	bcc.n	20000978 <__divsi3+0x184>
20000974:	00cb      	lsls	r3, r1, #3
20000976:	1ac0      	subs	r0, r0, r3
20000978:	4152      	adcs	r2, r2
2000097a:	0883      	lsrs	r3, r0, #2
2000097c:	428b      	cmp	r3, r1
2000097e:	d301      	bcc.n	20000984 <__divsi3+0x190>
20000980:	008b      	lsls	r3, r1, #2
20000982:	1ac0      	subs	r0, r0, r3
20000984:	4152      	adcs	r2, r2
20000986:	d2d9      	bcs.n	2000093c <__divsi3+0x148>
20000988:	0843      	lsrs	r3, r0, #1
2000098a:	428b      	cmp	r3, r1
2000098c:	d301      	bcc.n	20000992 <__divsi3+0x19e>
2000098e:	004b      	lsls	r3, r1, #1
20000990:	1ac0      	subs	r0, r0, r3
20000992:	4152      	adcs	r2, r2
20000994:	1a41      	subs	r1, r0, r1
20000996:	d200      	bcs.n	2000099a <__divsi3+0x1a6>
20000998:	4601      	mov	r1, r0
2000099a:	4663      	mov	r3, ip
2000099c:	4152      	adcs	r2, r2
2000099e:	105b      	asrs	r3, r3, #1
200009a0:	4610      	mov	r0, r2
200009a2:	d301      	bcc.n	200009a8 <__divsi3+0x1b4>
200009a4:	4240      	negs	r0, r0
200009a6:	2b00      	cmp	r3, #0
200009a8:	d500      	bpl.n	200009ac <__divsi3+0x1b8>
200009aa:	4249      	negs	r1, r1
200009ac:	4770      	bx	lr
200009ae:	4663      	mov	r3, ip
200009b0:	105b      	asrs	r3, r3, #1
200009b2:	d300      	bcc.n	200009b6 <__divsi3+0x1c2>
200009b4:	4240      	negs	r0, r0
200009b6:	b501      	push	{r0, lr}
200009b8:	2000      	movs	r0, #0
200009ba:	f000 f805 	bl	200009c8 <__aeabi_idiv0>
200009be:	bd02      	pop	{r1, pc}

200009c0 <__aeabi_idivmod>:
200009c0:	2900      	cmp	r1, #0
200009c2:	d0f8      	beq.n	200009b6 <__divsi3+0x1c2>
200009c4:	e716      	b.n	200007f4 <__divsi3>
200009c6:	4770      	bx	lr

200009c8 <__aeabi_idiv0>:
200009c8:	4770      	bx	lr
200009ca:	46c0      	nop			; (mov r8, r8)
200009cc:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200009d0:	200004fa 	strdcs	r0, [r0], -sl
200009d4:	20000504 	andcs	r0, r0, r4, lsl #10
200009d8:	2000050e 	andcs	r0, r0, lr, lsl #10
200009dc:	20000518 	andcs	r0, r0, r8, lsl r5
200009e0:	20000522 	andcs	r0, r0, r2, lsr #10
200009e4:	2000052c 	andcs	r0, r0, ip, lsr #10
200009e8:	20000536 	andcs	r0, r0, r6, lsr r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000050 	andeq	r0, r0, r0, asr r0
  10:	0001320c 	andeq	r3, r1, ip, lsl #4
  14:	00023800 	andeq	r3, r2, r0, lsl #16
	...
  24:	017c0200 	cmneq	ip, r0, lsl #4
  28:	2b010000 	blcs	40030 <startup-0x1ffbffd0>
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000184 	andeq	r0, r0, r4, lsl #3
  38:	0001a704 	andeq	sl, r1, r4, lsl #14
  3c:	017f0100 	cmneq	pc, r0, lsl #2
  40:	00064406 	andeq	r4, r6, r6, lsl #8
  44:	00009a20 	andeq	r9, r0, r0, lsr #20
  48:	5e9c0100 	fmlple	f0, f4, f0
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	81010069 	tsthi	r1, r9, rrx
  54:	005e0e01 	subseq	r0, lr, r1, lsl #28
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
  60:	00000007 	andeq	r0, r0, r7
  64:	01d90600 	bicseq	r0, r9, r0, lsl #12
  68:	7a010000 	bvc	40070 <startup-0x1ffbff90>
  6c:	062c0601 	strteq	r0, [ip], -r1, lsl #12
  70:	00182000 	andseq	r2, r8, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	00004a04 	andeq	r4, r0, r4, lsl #20
  7c:	01320100 	teqeq	r2, r0, lsl #2
  80:	00049a06 	andeq	r9, r4, r6, lsl #20
  84:	00019220 	andeq	r9, r1, r0, lsr #4
  88:	0c9c0100 	ldfeqs	f0, [ip], {0}
  8c:	07000001 	streq	r0, [r0, -r1]
  90:	32010078 	andcc	r0, r1, #120	; 0x78
  94:	005e1501 	subseq	r1, lr, r1, lsl #10
  98:	91020000 	mrsls	r0, (UNDEF: 2)
  9c:	0079075c 	rsbseq	r0, r9, ip, asr r7
  a0:	21013201 	tstcs	r1, r1, lsl #4
  a4:	0000005e 	andeq	r0, r0, lr, asr r0
  a8:	07589102 	ldrbeq	r9, [r8, -r2, lsl #2]
  ac:	00746573 	rsbseq	r6, r4, r3, ror r5
  b0:	2d013201 	sfmcs	f3, 4, [r1, #-4]
  b4:	0000005e 	andeq	r0, r0, lr, asr r0
  b8:	08549102 	ldmdaeq	r4, {r1, r8, ip, pc}^
  bc:	000001ef 	andeq	r0, r0, pc, ror #3
  c0:	0d013901 	vstreq.16	s6, [r1, #-2]	; <UNPREDICTABLE>
  c4:	00000025 	andeq	r0, r0, r5, lsr #32
  c8:	08679102 	stmdaeq	r7!, {r1, r8, ip, pc}^
  cc:	000001c9 	andeq	r0, r0, r9, asr #3
  d0:	16013901 	strne	r3, [r1], -r1, lsl #18
  d4:	00000025 	andeq	r0, r0, r5, lsr #32
  d8:	08669102 	stmdaeq	r6!, {r1, r8, ip, pc}^
  dc:	000000e3 	andeq	r0, r0, r3, ror #1
  e0:	22013901 	andcs	r3, r1, #16384	; 0x4000
  e4:	00000025 	andeq	r0, r0, r5, lsr #32
  e8:	08659102 	stmdaeq	r5!, {r1, r8, ip, pc}^
  ec:	0000000d 	andeq	r0, r0, sp
  f0:	2c013901 			; <UNDEFINED> instruction: 0x2c013901
  f4:	00000025 	andeq	r0, r0, r5, lsr #32
  f8:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
  fc:	000001d4 	ldrdeq	r0, [r0], -r4
 100:	0d016a01 	vstreq	s12, [r1, #-4]
 104:	00000025 	andeq	r0, r0, r5, lsr #32
 108:	00639102 	rsbeq	r9, r3, r2, lsl #2
 10c:	00020d04 	andeq	r0, r2, r4, lsl #26
 110:	01220100 			; <UNDEFINED> instruction: 0x01220100
 114:	00043206 	andeq	r3, r4, r6, lsl #4
 118:	00006820 	andeq	r6, r0, r0, lsr #16
 11c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
 120:	08000001 	stmdaeq	r0, {r0}
 124:	00000202 	andeq	r0, r0, r2, lsl #4
 128:	0a012401 	beq	49134 <startup-0x1ffb6ecc>
 12c:	00000144 	andeq	r0, r0, r4, asr #2
 130:	05779102 	ldrbeq	r9, [r7, #-258]!	; 0xfffffefe
 134:	00646461 	rsbeq	r6, r4, r1, ror #8
 138:	10012401 	andne	r2, r1, r1, lsl #8
 13c:	00000144 	andeq	r0, r0, r4, asr #2
 140:	00769102 	rsbseq	r9, r6, r2, lsl #2
 144:	8d080103 	stfhis	f0, [r8, #-12]
 148:	09000001 	stmdbeq	r0, {r0}
 14c:	0000001f 	andeq	r0, r0, pc, lsl r0
 150:	06010c01 	streq	r0, [r1], -r1, lsl #24
 154:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 158:	00000062 	andeq	r0, r0, r2, rrx
 15c:	320a9c01 	andcc	r9, sl, #256	; 0x100
 160:	01000000 	mrseq	r0, (UNDEF: 0)
 164:	25090106 	strcs	r0, [r9, #-262]	; 0xfffffefa
 168:	a6000000 	strge	r0, [r0], -r0
 16c:	2a200003 	bcs	800180 <startup-0x1f7ffe80>
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	00018a9c 	muleq	r1, ip, sl
 178:	01c90b00 	biceq	r0, r9, r0, lsl #22
 17c:	06010000 	streq	r0, [r1], -r0
 180:	00252301 	eoreq	r2, r5, r1, lsl #6
 184:	91020000 	mrsls	r0, (UNDEF: 2)
 188:	170c0077 	smlsdxne	ip, r7, r0, r0
 18c:	01000001 	tsteq	r0, r1
 190:	036006fa 	cmneq	r0, #262144000	; 0xfa00000
 194:	00462000 	subeq	r2, r6, r0
 198:	9c010000 	stcls	0, cr0, [r1], {-0}
 19c:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 1a0:	00003f0d 	andeq	r3, r0, sp, lsl #30
 1a4:	21fa0100 	mvnscs	r0, r0, lsl #2
 1a8:	00000025 	andeq	r0, r0, r5, lsr #32
 1ac:	0d779102 	ldfeqp	f1, [r7, #-8]!
 1b0:	000001c9 	andeq	r0, r0, r9, asr #3
 1b4:	252ffa01 	strcs	pc, [pc, #-2561]!	; fffff7bb <__aeabi_idiv0+0xdfffedf3>
 1b8:	02000000 	andeq	r0, r0, #0
 1bc:	0c007691 	stceq	6, cr7, [r0], {145}	; 0x91
 1c0:	00000222 	andeq	r0, r0, r2, lsr #4
 1c4:	2006ef01 	andcs	lr, r6, r1, lsl #30
 1c8:	40200003 	eormi	r0, r0, r3
 1cc:	01000000 	mrseq	r0, (UNDEF: 0)
 1d0:	0001f49c 	muleq	r1, ip, r4
 1d4:	6d630e00 	stclvs	14, cr0, [r3, #-0]
 1d8:	ef010064 	svc	0x00010064
 1dc:	00002524 	andeq	r2, r0, r4, lsr #10
 1e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1e4:	0001c90d 	andeq	ip, r1, sp, lsl #18
 1e8:	31ef0100 	mvncc	r0, r0, lsl #2
 1ec:	00000025 	andeq	r0, r0, r5, lsr #32
 1f0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 1f4:	0001b40c 	andeq	fp, r1, ip, lsl #8
 1f8:	06d20100 	ldrbeq	r0, [r2], r0, lsl #2
 1fc:	200002a0 	andcs	r0, r0, r0, lsr #5
 200:	00000080 	andeq	r0, r0, r0, lsl #1
 204:	02299c01 	eoreq	r9, r9, #256	; 0x100
 208:	070d0000 	streq	r0, [sp, -r0]
 20c:	01000002 	tsteq	r0, r2
 210:	00251cd2 	ldrdeq	r1, [r5], -r2	; <UNPREDICTABLE>
 214:	91020000 	mrsls	r0, (UNDEF: 2)
 218:	01c90d77 	biceq	r0, r9, r7, ror sp
 21c:	d2010000 	andle	r0, r1, #0
 220:	0000252b 	andeq	r2, r0, fp, lsr #10
 224:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 228:	01e20f00 	mvneq	r0, r0, lsl #30
 22c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
 230:	00002509 	andeq	r2, r0, r9, lsl #10
 234:	00021000 	andeq	r1, r2, r0
 238:	00009020 	andeq	r9, r0, r0, lsr #32
 23c:	629c0100 	addsvs	r0, ip, #0, 2
 240:	0d000002 	stceq	0, cr0, [r0, #-8]
 244:	000001c9 	andeq	r0, r0, r9, asr #3
 248:	251eae01 	ldrcs	sl, [lr, #-3585]	; 0xfffff1ff
 24c:	02000000 	andeq	r0, r0, #0
 250:	ac106f91 	ldcge	15, cr6, [r0], {145}	; 0x91
 254:	01000001 	tsteq	r0, r1
 258:	00250db0 	strhteq	r0, [r5], -r0
 25c:	91020000 	mrsls	r0, (UNDEF: 2)
 260:	04110077 	ldreq	r0, [r1], #-119	; 0xffffff89
 264:	01000001 	tsteq	r0, r1
 268:	01b00695 	lslseq	r0, r5	; <illegal shifter operand>
 26c:	00602000 	rsbeq	r2, r0, r0
 270:	9c010000 	stcls	0, cr0, [r1], {-0}
 274:	0001c20c 	andeq	ip, r1, ip, lsl #4
 278:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
 27c:	20000154 	andcs	r0, r0, r4, asr r1
 280:	0000005c 	andeq	r0, r0, ip, asr r0
 284:	029a9c01 	addseq	r9, sl, #256	; 0x100
 288:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
 28c:	01000001 	tsteq	r0, r1
 290:	0025207e 	eoreq	r2, r5, lr, ror r0
 294:	91020000 	mrsls	r0, (UNDEF: 2)
 298:	cc120077 	ldcgt	0, cr0, [r2], {119}	; 0x77
 29c:	01000000 	mrseq	r0, (UNDEF: 0)
 2a0:	01200679 			; <UNDEFINED> instruction: 0x01200679
 2a4:	00342000 	eorseq	r2, r4, r0
 2a8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2ac:	000002be 			; <UNDEFINED> instruction: 0x000002be
 2b0:	0100780e 	tsteq	r0, lr, lsl #16
 2b4:	00252579 	eoreq	r2, r5, r9, ror r5
 2b8:	91020000 	mrsls	r0, (UNDEF: 2)
 2bc:	92120077 	andsls	r0, r2, #119	; 0x77
 2c0:	01000001 	tsteq	r0, r1
 2c4:	00f60674 	rscseq	r0, r6, r4, ror r6
 2c8:	002a2000 	eoreq	r2, sl, r0
 2cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2d0:	000002e2 	andeq	r0, r0, r2, ror #5
 2d4:	0100780e 	tsteq	r0, lr, lsl #16
 2d8:	00252374 	eoreq	r2, r5, r4, ror r3
 2dc:	91020000 	mrsls	r0, (UNDEF: 2)
 2e0:	f70c0077 			; <UNDEFINED> instruction: 0xf70c0077
 2e4:	01000001 	tsteq	r0, r1
 2e8:	00be0666 	adcseq	r0, lr, r6, ror #12
 2ec:	00382000 	eorseq	r2, r8, r0
 2f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2f4:	00000323 	andeq	r0, r0, r3, lsr #6
 2f8:	00736d0e 	rsbseq	r6, r3, lr, lsl #26
 2fc:	5e1e6601 	cfmsub32pl	mvax0, mvfx6, mvfx14, mvfx1
 300:	02000000 	andeq	r0, r0, #0
 304:	69136c91 	ldmdbvs	r3, {r0, r4, r7, sl, fp, sp, lr}
 308:	09680100 	stmdbeq	r8!, {r8}^
 30c:	00000323 	andeq	r0, r0, r3, lsr #6
 310:	10749102 	rsbsne	r9, r4, r2, lsl #2
 314:	00000044 	andeq	r0, r0, r4, asr #32
 318:	230c6801 	movwcs	r6, #51201	; 0xc801
 31c:	02000003 	andeq	r0, r0, #3
 320:	14007091 	strne	r7, [r0], #-145	; 0xffffff6f
 324:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 328:	130c0074 	movwne	r0, #49268	; 0xc074
 32c:	01000000 	mrseq	r0, (UNDEF: 0)
 330:	00760652 	rsbseq	r0, r6, r2, asr r6
 334:	00482000 	subeq	r2, r8, r0
 338:	9c010000 	stcls	0, cr0, [r1], {-0}
 33c:	0000037f 	andeq	r0, r0, pc, ror r3
 340:	0073750e 	rsbseq	r7, r3, lr, lsl #10
 344:	5e1f5201 	cdppl	2, 1, cr5, cr15, cr1, {0}
 348:	02000000 	andeq	r0, r0, #0
 34c:	69156c91 	ldmdbvs	r5, {r0, r4, r7, sl, fp, sp, lr}
 350:	09540100 	ldmdbeq	r4, {r8}^
 354:	00000323 	andeq	r0, r0, r3, lsr #6
 358:	00004410 	andeq	r4, r0, r0, lsl r4
 35c:	0c540100 	ldfeqe	f0, [r4], {-0}
 360:	00000323 	andeq	r0, r0, r3, lsr #6
 364:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 368:	2000009c 	mulcs	r0, ip, r0
 36c:	00000018 	andeq	r0, r0, r8, lsl r0
 370:	01006913 	tsteq	r0, r3, lsl r9
 374:	03230e60 			; <UNDEFINED> instruction: 0x03230e60
 378:	91020000 	mrsls	r0, (UNDEF: 2)
 37c:	11000070 	tstne	r0, r0, ror r0
 380:	000000f8 	strdeq	r0, [r0], -r8
 384:	64064c01 	strvs	r4, [r6], #-3073	; 0xfffff3ff
 388:	12200000 	eorne	r0, r0, #0
 38c:	01000000 	mrseq	r0, (UNDEF: 0)
 390:	00ec119c 	smlaleq	r1, ip, ip, r1
 394:	36010000 	strcc	r0, [r1], -r0
 398:	00001006 	andeq	r1, r0, r6
 39c:	00005420 	andeq	r5, r0, r0, lsr #8
 3a0:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
 3a4:	0000012a 	andeq	r0, r0, sl, lsr #2
 3a8:	00062e01 	andeq	r2, r6, r1, lsl #28
 3ac:	0c200000 	stceq	0, cr0, [r0], #-0
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	Address 0x000003b4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00340500 	eorseq	r0, r4, r0, lsl #10
  4c:	0b3a0803 	bleq	e82060 <startup-0x1f17dfa0>
  50:	0b39053b 	bleq	e41544 <startup-0x1f1beabc>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
  5c:	03193f00 	tsteq	r9, #0, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  6c:	97184006 	ldrls	r4, [r8, -r6]
  70:	00001942 	andeq	r1, r0, r2, asr #18
  74:	03000507 	movweq	r0, #1287	; 0x507
  78:	3b0b3a08 	blcc	2ce8a0 <startup-0x1fd31760>
  7c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  80:	00180213 	andseq	r0, r8, r3, lsl r2
  84:	00340800 	eorseq	r0, r4, r0, lsl #16
  88:	0b3a0e03 	bleq	e8389c <startup-0x1f17c764>
  8c:	0b39053b 	bleq	e41580 <startup-0x1f1bea80>
  90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  94:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  98:	03193f00 	tsteq	r9, #0, 30
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  a8:	96184006 	ldrls	r4, [r8], -r6
  ac:	00001942 	andeq	r1, r0, r2, asr #18
  b0:	3f012e0a 	svccc	0x00012e0a
  b4:	3a0e0319 	bcc	380d20 <startup-0x1fc7f2e0>
  b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  c4:	96184006 	ldrls	r4, [r8], -r6
  c8:	13011942 	movwne	r1, #6466	; 0x1942
  cc:	050b0000 	streq	r0, [fp, #-0]
  d0:	3a0e0300 	bcc	380cd8 <startup-0x1fc7f328>
  d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  dc:	0c000018 	stceq	0, cr0, [r0], {24}
  e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	0b390b3b 	bleq	e42ddc <startup-0x1f1bd224>
  ec:	01111927 	tsteq	r1, r7, lsr #18
  f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
  fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	13490b39 	movtne	r0, #39737	; 0x9b39
 108:	00001802 	andeq	r1, r0, r2, lsl #16
 10c:	0300050e 	movweq	r0, #1294	; 0x50e
 110:	3b0b3a08 	blcc	2ce938 <startup-0x1fd316c8>
 114:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 118:	00180213 	andseq	r0, r8, r3, lsl r2
 11c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 120:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 124:	0b3b0b3a 	bleq	ec2e14 <startup-0x1f13d1ec>
 128:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 12c:	01111349 	tsteq	r1, r9, asr #6
 130:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 134:	01194296 			; <UNDEFINED> instruction: 0x01194296
 138:	10000013 	andne	r0, r0, r3, lsl r0
 13c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 140:	0b3b0b3a 	bleq	ec2e30 <startup-0x1f13d1d0>
 144:	13490b39 	movtne	r0, #39737	; 0x9b39
 148:	00001802 	andeq	r1, r0, r2, lsl #16
 14c:	3f002e11 	svccc	0x00002e11
 150:	3a0e0319 	bcc	380dbc <startup-0x1fc7f244>
 154:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 158:	1119270b 	tstne	r9, fp, lsl #14
 15c:	40061201 	andmi	r1, r6, r1, lsl #4
 160:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 164:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 168:	03193f01 	tsteq	r9, #1, 30
 16c:	3b0b3a0e 	blcc	2ce9ac <startup-0x1fd31654>
 170:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 174:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 178:	97184006 	ldrls	r4, [r8, -r6]
 17c:	13011942 	movwne	r1, #6466	; 0x1942
 180:	34130000 	ldrcc	r0, [r3], #-0
 184:	3a080300 	bcc	200d8c <startup-0x1fdff274>
 188:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 18c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 190:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 194:	0b0b0024 	bleq	2c022c <startup-0x1fd3fdd4>
 198:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 19c:	34150000 	ldrcc	r0, [r5], #-0
 1a0:	3a080300 	bcc	200da8 <startup-0x1fdff258>
 1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a8:	0013490b 	andseq	r4, r3, fp, lsl #18
 1ac:	010b1600 	tsteq	fp, r0, lsl #12
 1b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 1b8:	03193f00 	tsteq	r9, #0, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c8:	97184006 	ldrls	r4, [r8, -r6]
 1cc:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000006ce 	andeq	r0, r0, lr, asr #13
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200006de 	ldrdcs	r0, [r0], -lr
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000037f 	andeq	r0, r0, pc, ror r3
   4:	00600003 	rsbeq	r0, r0, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f472f3a 	svcvs	0x00472f3a
  20:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
  24:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  30:	532f746e 			; <UNDEFINED> instruction: 0x532f746e
  34:	616c6f6b 	cmnvs	ip, fp, ror #30
  38:	2f55472f 	svccs	0x0055472f
  3c:	31544944 	cmpcc	r4, r4, asr #18
  40:	432f3135 			; <UNDEFINED> instruction: 0x432f3135
  44:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  48:	2f657469 	svccs	0x00657469
  4c:	70617267 	rsbvc	r7, r1, r7, ror #4
  50:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  54:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  58:	00007961 	andeq	r7, r0, r1, ror #18
  5c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  60:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  64:	00010063 	andeq	r0, r1, r3, rrx
  68:	01050000 	mrseq	r0, (UNDEF: 5)
  6c:	00020500 	andeq	r0, r2, r0, lsl #10
  70:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  74:	2113012e 	tstcs	r3, lr, lsr #2
  78:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  7c:	01010003 	tsteq	r1, r3
  80:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  84:	00001002 	andeq	r1, r0, r2
  88:	01360320 	teqeq	r6, r0, lsr #6
  8c:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb8f <__aeabi_idiv0+0xdffff1c7>
  90:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
  94:	20130531 	andscs	r0, r3, r1, lsr r5
  98:	93050531 	movwls	r0, #21809	; 0x5531
  9c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
  a0:	13053105 	movwne	r3, #20741	; 0x5105
  a4:	310b0520 	tstcc	fp, r0, lsr #10
  a8:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
  ac:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  b0:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  b4:	0b052e01 	bleq	14b8c0 <startup-0x1feb4740>
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	2205053c 	andcs	r0, r5, #60, 10	; 0xf000000
  c0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
  c4:	05932f01 	ldreq	r2, [r3, #3841]	; 0xf01
  c8:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff1cb <__aeabi_idiv0+0xdfffe803>
  cc:	053f2f01 	ldreq	r2, [pc, #-3841]!	; fffff1d3 <__aeabi_idiv0+0xdfffe80b>
  d0:	0c054b15 			; <UNDEFINED> instruction: 0x0c054b15
  d4:	230b052e 	movwcs	r0, #46382	; 0xb52e
  d8:	05760705 	ldrbeq	r0, [r6, #-1797]!	; 0xfffff8fb
  dc:	0e053e0f 	cdpeq	14, 0, cr3, cr5, cr15, {0}
  e0:	2e050533 	mcrcs	5, 0, r0, cr5, cr3, {1}
  e4:	02000905 	andeq	r0, r0, #81920	; 0x14000
  e8:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
  ec:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
  f0:	05052c03 	streq	r2, [r5, #-3075]	; 0xfffff3fd
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	4e01053c 	mcrmi	5, 0, r0, cr1, cr12, {1}
  fc:	4b0c055b 	blmi	301670 <startup-0x1fcfe990>
 100:	053f0b05 	ldreq	r0, [pc, #-2821]!	; fffff603 <__aeabi_idiv0+0xdfffec3b>
 104:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 108:	0009052e 	andeq	r0, r9, lr, lsr #10
 10c:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 110:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 114:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 118:	04020005 	streq	r0, [r2], #-5
 11c:	01053c01 	tsteq	r5, r1, lsl #24
 120:	32055b4e 	andcc	r5, r5, #79872	; 0x13800
 124:	2e050567 	cfsh32cs	mvfx0, mvfx5, #55
 128:	05203205 	streq	r3, [r0, #-517]!	; 0xfffffdfb
 12c:	01054a17 	tsteq	r5, r7, lsl sl
 130:	1a057721 	bne	15ddbc <startup-0x1fea2244>
 134:	3c2c0567 	cfstr32cc	mvfx0, [ip], #-412	; 0xfffffe64
 138:	05740505 	ldrbeq	r0, [r4, #-1285]!	; 0xfffffafb
 13c:	1705202c 	strne	r2, [r5, -ip, lsr #32]
 140:	21010520 	tstcs	r1, r0, lsr #10
 144:	67050577 	smlsdxvs	r5, r7, r5, r0
 148:	11030d05 	tstne	r3, r5, lsl #26
 14c:	207203ba 	ldrhtcs	r0, [r2], #-58	; 0xffffffc6
 150:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 154:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 158:	0105223d 	tsteq	r5, sp, lsr r2
 15c:	05054d22 	streq	r4, [r5, #-3362]	; 0xfffff2de
 160:	26053e2f 	strcs	r3, [r5], -pc, lsr #28
 164:	30050520 	andcc	r0, r5, r0, lsr #10
 168:	09053e3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 16c:	01040200 	mrseq	r0, R12_usr
 170:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 174:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 178:	00300104 	eorseq	r0, r0, r4, lsl #2
 17c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 180:	02000f05 	andeq	r0, r0, #5, 30
 184:	052f0104 	streq	r0, [pc, #-260]!	; 88 <startup-0x1fffff78>
 188:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
 18c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 190:	01040200 	mrseq	r0, R12_usr
 194:	053e3020 	ldreq	r3, [lr, #-32]!	; 0xffffffe0
 198:	01052026 	tsteq	r5, r6, lsr #32
 19c:	0505af2f 	streq	sl, [r5, #-3887]	; 0xfffff0d1
 1a0:	26053e69 	strcs	r3, [r5], -r9, ror #28
 1a4:	30050520 	andcc	r0, r5, r0, lsr #10
 1a8:	3d30593e 			; <UNDEFINED> instruction: 0x3d30593e
 1ac:	05300f05 	ldreq	r0, [r0, #-3845]!	; 0xfffff0fb
 1b0:	0505200d 	streq	r2, [r5, #-13]
 1b4:	26053e4c 	strcs	r3, [r5], -ip, asr #28
 1b8:	30070520 	andcc	r0, r7, r0, lsr #10
 1bc:	3d4c0905 	vstrcc.16	s1, [ip, #-10]	; <UNPREDICTABLE>
 1c0:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 1c4:	053d4c09 	ldreq	r4, [sp, #-3081]!	; 0xfffff3f7
 1c8:	0105310c 	tsteq	r5, ip, lsl #2
 1cc:	0505cb3d 	streq	ip, [r5, #-2877]	; 0xfffff4c3
 1d0:	20170591 	mulscs	r7, r1, r5
 1d4:	593e0505 	ldmdbpl	lr!, {r0, r2, r8, sl}
 1d8:	052f3d30 	streq	r3, [pc, #-3376]!	; fffff4b0 <__aeabi_idiv0+0xdfffeae8>
 1dc:	08053e16 	stmdaeq	r5, {r1, r2, r4, r9, sl, fp, ip, sp}
 1e0:	2209054a 	andcs	r0, r9, #310378496	; 0x12800000
 1e4:	3016053d 	andscc	r0, r6, sp, lsr r5
 1e8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1ec:	053d2209 	ldreq	r2, [sp, #-521]!	; 0xfffffdf7
 1f0:	17053105 	strne	r3, [r5, -r5, lsl #2]
 1f4:	30050520 	andcc	r0, r5, r0, lsr #10
 1f8:	3d01053e 	cfstr32cc	mvfx0, [r1, #-248]	; 0xffffff08
 1fc:	91050577 	tstls	r5, r7, ror r5
 200:	053e5a3e 	ldreq	r5, [lr, #-2622]!	; 0xfffff5c2
 204:	054d8301 	strbeq	r8, [sp, #-769]	; 0xfffffcff
 208:	5a3e9105 	bpl	fa4624 <startup-0x1f05b9dc>
 20c:	01053e3d 	tsteq	r5, sp, lsr lr
 210:	0c054d83 	stceq	13, cr4, [r5], {131}	; 0x83
 214:	01055967 	tsteq	r5, r7, ror #18
 218:	05054d67 	streq	r4, [r5, #-3431]	; 0xfffff299
 21c:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
 220:	3e3e3d3e 	mrccc	13, 1, r3, cr14, cr14, {1}
 224:	4b4b4b4b 	blmi	12d2f58 <startup-0x1ed2d0a8>
 228:	3d01054c 	cfstr32cc	mvfx0, [r1, #-304]	; 0xfffffed0
 22c:	3f0e053f 	svccc	0x000e053f
 230:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 234:	059f2209 	ldreq	r2, [pc, #521]	; 445 <startup-0x1ffffbbb>
 238:	09054c11 	stmdbeq	r5, {r0, r4, sl, fp, lr}
 23c:	000d053c 	andeq	r0, sp, ip, lsr r5
 240:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 244:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 248:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 24c:	04020009 	streq	r0, [r2], #-9
 250:	22055801 	andcs	r5, r5, #65536	; 0x10000
 254:	02040200 	andeq	r0, r4, #0, 4
 258:	00050545 	andeq	r0, r5, r5, asr #10
 25c:	58010402 	stmdapl	r1, {r1, sl}
 260:	0a030105 	beq	c067c <startup-0x1ff3f984>
 264:	08055b4a 	stmdaeq	r5, {r1, r3, r6, r8, r9, fp, ip, lr}
 268:	00110567 	andseq	r0, r1, r7, ror #10
 26c:	4a010402 	bmi	4127c <startup-0x1ffbed84>
 270:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 274:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 278:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 27c:	2f054a03 	svccs	0x00054a03
 280:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 284:	4f36054a 	svcmi	0x0036054a
 288:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 28c:	0f05202c 	svceq	0x0005202c
 290:	2e13053e 	mrccs	5, 0, r0, cr3, cr14, {1}
 294:	05931505 	ldreq	r1, [r3, #1285]	; 0x505
 298:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 29c:	4b0d0522 	blmi	34172c <startup-0x1fcbe8d4>
 2a0:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2a4:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2a8:	4b0d0522 	blmi	341738 <startup-0x1fcbe8c8>
 2ac:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2b0:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2b4:	4b0d0522 	blmi	341744 <startup-0x1fcbe8bc>
 2b8:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2bc:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2c0:	4b0d0522 	blmi	341750 <startup-0x1fcbe8b0>
 2c4:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
 2c8:	08053e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, ip, sp}
 2cc:	3e140569 	cfmsc32cc	mvfx0, mvfx4, mvfx9
 2d0:	054b1505 	strbeq	r1, [fp, #-1285]	; 0xfffffafb
 2d4:	14052e12 	strne	r2, [r5], #-3602	; 0xfffff1ee
 2d8:	4b15055c 	blmi	541850 <startup-0x1fabe7b0>
 2dc:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 2e0:	05c94d05 	strbeq	r4, [r9, #3333]	; 0xd05
 2e4:	0505ca14 	streq	ip, [r5, #-2580]	; 0xfffff5ec
 2e8:	ae080592 	mcrge	5, 0, r0, cr8, cr2, {4}
 2ec:	a23e1105 	eorsge	r1, lr, #1073741825	; 0x40000001
 2f0:	05930505 	ldreq	r0, [r3, #1285]	; 0x505
 2f4:	7fbf0309 	svcvc	0x00bf0309
 2f8:	030105ac 	movweq	r0, #5548	; 0x15ac
 2fc:	5b2000c2 	blpl	80060c <startup-0x1f7ff9f4>
 300:	052f0505 	streq	r0, [pc, #-1285]!	; fffffe03 <__aeabi_idiv0+0xdffff43b>
 304:	01052026 	tsteq	r5, r6, lsr #32
 308:	0505772f 	streq	r7, [r5, #-1839]	; 0xfffff8d1
 30c:	0b052f3f 	bleq	14c010 <startup-0x1feb3ff0>
 310:	2e050533 	mcrcs	5, 0, r0, cr5, cr3, {1}
 314:	02000905 	andeq	r0, r0, #81920	; 0x14000
 318:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
 31c:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 320:	05056403 	streq	r6, [r5, #-1027]	; 0xfffffbfd
 324:	01040200 	mrseq	r0, R12_usr
 328:	400b053c 	andmi	r0, fp, ip, lsr r5
 32c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 330:	04020009 	streq	r0, [r2], #-9
 334:	1a052203 	bne	148b48 <startup-0x1feb74b8>
 338:	03040200 	movweq	r0, #16896	; 0x4200
 33c:	00050564 	andeq	r0, r5, r4, ror #10
 340:	3c010402 	cfstrscc	mvf0, [r1], {2}
 344:	5a0b0541 	bpl	2c1850 <startup-0x1fd3e7b0>
 348:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 34c:	04020009 	streq	r0, [r2], #-9
 350:	1b052203 	blne	148b64 <startup-0x1feb749c>
 354:	03040200 	movweq	r0, #16896	; 0x4200
 358:	00050564 	andeq	r0, r5, r4, ror #10
 35c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 360:	05400b05 	strbeq	r0, [r0, #-2821]	; 0xfffff4fb
 364:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 368:	03040200 	movweq	r0, #16896	; 0x4200
 36c:	001a0522 	andseq	r0, sl, r2, lsr #10
 370:	64030402 	strvs	r0, [r3], #-1026	; 0xfffffbfe
 374:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 378:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 37c:	05024001 	streq	r4, [r2, #-1]
 380:	Address 0x00000380 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
   c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  10:	64007865 	strvs	r7, [r0], #-2149	; 0xfffff79b
  14:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  18:	6b696d5f 	blvs	1a5b59c <startup-0x1e5a4a64>
  1c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
  20:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  24:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
  28:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  2c:	7a696c61 	bvc	1a5b1b8 <startup-0x1e5a4e48>
  30:	72670065 	rsbvc	r0, r7, #101	; 0x65
  34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  38:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  3c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 44 <startup-0x1fffffbc>
  40:	00617461 	rsbeq	r7, r1, r1, ror #8
  44:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  48:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
  4c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  50:	20554e47 	subscs	r4, r5, r7, asr #28
  54:	20393943 	eorscs	r3, r9, r3, asr #18
  58:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  5c:	30322031 	eorscc	r2, r2, r1, lsr r0
  60:	30313931 	eorscc	r3, r1, r1, lsr r9
  64:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  68:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  6c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  70:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  74:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  78:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  7c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  80:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  84:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  88:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  8c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  90:	205d3939 	subscs	r3, sp, r9, lsr r9
  94:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  98:	20626d75 	rsbcs	r6, r2, r5, ror sp
  9c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  a0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  a4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  a8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  ac:	616d2d20 	cmnvs	sp, r0, lsr #26
  b0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  b4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  b8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  bc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  c0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  c4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  c8:	00393963 	eorseq	r3, r9, r3, ror #18
  cc:	70617267 	rsbvc	r7, r1, r7, ror #4
  d0:	5f636968 	svcpl	0x00636968
  d4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  dc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  e0:	78007261 	stmdavc	r0, {r0, r5, r6, r9, ip, sp, lr}
  e4:	7379665f 	cmnvc	r9, #99614720	; 0x5f00000
  e8:	006b7369 	rsbeq	r7, fp, r9, ror #6
  ec:	616c6564 	cmnvs	ip, r4, ror #10
  f0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  f4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  f8:	616c6564 	cmnvs	ip, r4, ror #10
  fc:	30355f79 	eorscc	r5, r5, r9, ror pc
 100:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 104:	70617267 	rsbvc	r7, r1, r7, ror #4
 108:	5f636968 	svcpl	0x00636968
 10c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 110:	6165725f 	cmnvs	r5, pc, asr r2
 114:	67007964 	strvs	r7, [r0, -r4, ror #18]
 118:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 11c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 120:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 124:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 128:	74730061 	ldrbtvc	r0, [r3], #-97	; 0xffffff9f
 12c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 130:	3a440070 	bcc	11002f8 <startup-0x1eeffd08>
 134:	6f6f472f 	svcvs	0x006f472f
 138:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xfffff399
 13c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 140:	6b6f442f 	blvs	1bd1204 <startup-0x1e42edfc>
 144:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 148:	6b532f74 	blvs	14cbf20 <startup-0x1eb340e0>
 14c:	2f616c6f 	svccs	0x00616c6f
 150:	442f5547 	strtmi	r5, [pc], #-1351	; 158 <startup-0x1ffffea8>
 154:	35315449 	ldrcc	r5, [r1, #-1097]!	; 0xfffffbb7
 158:	6f432f31 	svcvs	0x00432f31
 15c:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 160:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
 164:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 168:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 16c:	616c7073 	smcvs	50947	; 0xc703
 170:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 174:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 178:	00632e70 	rsbeq	r2, r3, r0, ror lr
 17c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 180:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 184:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 188:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 18c:	61686320 	cmnvs	r8, r0, lsr #6
 190:	72670072 	rsbvc	r0, r7, #114	; 0x72
 194:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 198:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 19c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1a0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 1a4:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 1a8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 1ac:	5f746572 	svcpl	0x00746572
 1b0:	006c6176 	rsbeq	r6, ip, r6, ror r1
 1b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1b8:	5f636968 	svcpl	0x00636968
 1bc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1c0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 1c4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 1c8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 4 <startup-0x1ffffffc>
 1d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1d4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 1d8:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 1dc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1e0:	72670074 	rsbvc	r0, r7, #116	; 0x74
 1e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 1ec:	62006461 	andvs	r6, r0, #1627389952	; 0x61000000
 1f0:	616d7469 	cmnvs	sp, r9, ror #8
 1f4:	64006b73 	strvs	r6, [r0], #-2931	; 0xfffff48d
 1f8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1fc:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 200:	61700069 	cmnvs	r0, r9, rrx
 204:	76006567 	strvc	r6, [r0], -r7, ror #10
 208:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 20c:	61726700 	cmnvs	r2, r0, lsl #14
 210:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 214:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 218:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 21c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 220:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 224:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 228:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 22c:	5f657469 	svcpl	0x00657469
 230:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 234:	00646e61 	rsbeq	r6, r4, r1, ror #28
 238:	475c3a44 	ldrbmi	r3, [ip, -r4, asr #20]
 23c:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
 240:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 244:	445c6576 	ldrbmi	r6, [ip], #-1398	; 0xfffffa8a
 248:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 24c:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
 250:	6c6f6b53 			; <UNDEFINED> instruction: 0x6c6f6b53
 254:	55475c61 	strbpl	r5, [r7, #-3169]	; 0xfffff39f
 258:	5449445c 	strbpl	r4, [r9], #-1116	; 0xfffffba4
 25c:	5c313531 	cfldr32pl	mvfx3, [r1], #-196	; 0xffffff3c
 260:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 264:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 268:	6172675c 	cmnvs	r2, ip, asr r7
 26c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 270:	70736964 	rsbsvc	r6, r3, r4, ror #18
 274:	0079616c 	rsbseq	r6, r9, ip, ror #2

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  34:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  38:	41018e02 	tstmi	r1, r2, lsl #28
  3c:	0000070d 	andeq	r0, r0, sp, lsl #14
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000064 	andcs	r0, r0, r4, rrx
  4c:	00000012 	andeq	r0, r0, r2, lsl r0
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0000070d 	andeq	r0, r0, sp, lsl #14
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000076 	andcs	r0, r0, r6, ror r0
  68:	00000048 	andeq	r0, r0, r8, asr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000be 	strhcs	r0, [r0], -lr
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000f6 	strdcs	r0, [r0], -r6
  a8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000120 	andcs	r0, r0, r0, lsr #2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000154 	andcs	r0, r0, r4, asr r1
  e8:	0000005c 	andeq	r0, r0, ip, asr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000210 	andcs	r0, r0, r0, lsl r2
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002a0 	andcs	r0, r0, r0, lsr #5
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000320 	andcs	r0, r0, r0, lsr #6
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000360 	andcs	r0, r0, r0, ror #6
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003a6 	andcs	r0, r0, r6, lsr #7
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1c4:	00000062 	andeq	r0, r0, r2, rrx
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000432 	andcs	r0, r0, r2, lsr r4
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000049a 	mulcs	r0, sl, r4
 200:	00000192 	muleq	r0, r2, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	300e4101 	andcc	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	2000062c 	andcs	r0, r0, ip, lsr #12
 224:	00000018 	andeq	r0, r0, r8, lsl r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0000070d 	andeq	r0, r0, sp, lsl #14
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	20000644 	andcs	r0, r0, r4, asr #12
 240:	0000009a 	muleq	r0, sl, r0
 244:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 248:	41018e02 	tstmi	r1, r2, lsl #28
 24c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 250:	00000007 	andeq	r0, r0, r7
 254:	0000000c 	andeq	r0, r0, ip
 258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 25c:	7c010001 	stcvc	0, cr0, [r1], {1}
 260:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 264:	0000000c 	andeq	r0, r0, ip
 268:	00000254 	andeq	r0, r0, r4, asr r2
 26c:	200006e1 	andcs	r0, r0, r1, ror #13
 270:	0000010a 	andeq	r0, r0, sl, lsl #2
 274:	0000000c 	andeq	r0, r0, ip
 278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	7c010001 	stcvc	0, cr0, [r1], {1}
 280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 284:	0000000c 	andeq	r0, r0, ip
 288:	00000274 	andeq	r0, r0, r4, ror r2
 28c:	200007f5 	strdcs	r0, [r0], -r5
 290:	000001cc 	andeq	r0, r0, ip, asr #3
