
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 };
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbd8 	bl	200007b8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns(void)
{
20000010:	b5b0      	push	{r4, r5, r7, lr}
20000012:	af00      	add	r7, sp, #0
    *SYSTICK_CTRL = 0x0;
20000014:	4b10      	ldr	r3, [pc, #64]	; (20000058 <delay_250ns+0x48>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles = 0x2A)
    *SYSTICK_LOAD = 0x2A;
2000001a:	4b10      	ldr	r3, [pc, #64]	; (2000005c <delay_250ns+0x4c>)
2000001c:	222a      	movs	r2, #42	; 0x2a
2000001e:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *SYSTICK_LOAD /= 0x2A; // Decrease delay if we're simulating
20000020:	4b0e      	ldr	r3, [pc, #56]	; (2000005c <delay_250ns+0x4c>)
20000022:	681b      	ldr	r3, [r3, #0]
20000024:	4c0d      	ldr	r4, [pc, #52]	; (2000005c <delay_250ns+0x4c>)
20000026:	212a      	movs	r1, #42	; 0x2a
20000028:	0018      	movs	r0, r3
2000002a:	f000 fbdd 	bl	200007e8 <__udivsi3>
2000002e:	0003      	movs	r3, r0
20000030:	6023      	str	r3, [r4, #0]
#endif
    
    *SYSTICK_VAL = 0;
20000032:	4b0b      	ldr	r3, [pc, #44]	; (20000060 <delay_250ns+0x50>)
20000034:	2200      	movs	r2, #0
20000036:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *SYSTICK_CTRL = 0x5;
20000038:	4b07      	ldr	r3, [pc, #28]	; (20000058 <delay_250ns+0x48>)
2000003a:	2205      	movs	r2, #5
2000003c:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*SYSTICK_CTRL & 0x10000) == 0);
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	4b05      	ldr	r3, [pc, #20]	; (20000058 <delay_250ns+0x48>)
20000042:	681a      	ldr	r2, [r3, #0]
20000044:	2380      	movs	r3, #128	; 0x80
20000046:	025b      	lsls	r3, r3, #9
20000048:	4013      	ands	r3, r2
2000004a:	d0f9      	beq.n	20000040 <delay_250ns+0x30>
    
    *SYSTICK_CTRL = 0x0;
2000004c:	4b02      	ldr	r3, [pc, #8]	; (20000058 <delay_250ns+0x48>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	bdb0      	pop	{r4, r5, r7, pc}
20000058:	e000e010 	and	lr, r0, r0, lsl r0
2000005c:	e000e014 	and	lr, r0, r4, lsl r0
20000060:	e000e018 	and	lr, r0, r8, lsl r0

20000064 <delay_500ns>:

void delay_500ns(void)
{
20000064:	b580      	push	{r7, lr}
20000066:	af00      	add	r7, sp, #0
    delay_250ns();
20000068:	f7ff ffd2 	bl	20000010 <delay_250ns>
    delay_250ns();
2000006c:	f7ff ffd0 	bl	20000010 <delay_250ns>
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46bd      	mov	sp, r7
20000074:	bd80      	pop	{r7, pc}

20000076 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000076:	b580      	push	{r7, lr}
20000078:	b084      	sub	sp, #16
2000007a:	af00      	add	r7, sp, #0
2000007c:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	009b      	lsls	r3, r3, #2
20000082:	60fb      	str	r3, [r7, #12]
    
#ifdef SIMULATOR
    limit = limit/10;
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	210a      	movs	r1, #10
20000088:	0018      	movs	r0, r3
2000008a:	f000 fc37 	bl	200008fc <__divsi3>
2000008e:	0003      	movs	r3, r0
20000090:	60fb      	str	r3, [r7, #12]
    
    if(limit > 50)
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	2b32      	cmp	r3, #50	; 0x32
20000096:	dd01      	ble.n	2000009c <delay_mikro+0x26>
    {
        limit = 50;
20000098:	2332      	movs	r3, #50	; 0x32
2000009a:	60fb      	str	r3, [r7, #12]
    }
#endif

    
    for (int i = 1; i <= limit; i++)
2000009c:	2301      	movs	r3, #1
2000009e:	60bb      	str	r3, [r7, #8]
200000a0:	e004      	b.n	200000ac <delay_mikro+0x36>
    {
        delay_250ns();
200000a2:	f7ff ffb5 	bl	20000010 <delay_250ns>
    for (int i = 1; i <= limit; i++)
200000a6:	68bb      	ldr	r3, [r7, #8]
200000a8:	3301      	adds	r3, #1
200000aa:	60bb      	str	r3, [r7, #8]
200000ac:	68ba      	ldr	r2, [r7, #8]
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	429a      	cmp	r2, r3
200000b2:	ddf6      	ble.n	200000a2 <delay_mikro+0x2c>
    }
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	46bd      	mov	sp, r7
200000ba:	b004      	add	sp, #16
200000bc:	bd80      	pop	{r7, pc}

200000be <delay_mili>:

void delay_mili(unsigned int ms)
{
200000be:	b580      	push	{r7, lr}
200000c0:	b084      	sub	sp, #16
200000c2:	af00      	add	r7, sp, #0
200000c4:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
200000c6:	23fa      	movs	r3, #250	; 0xfa
200000c8:	009b      	lsls	r3, r3, #2
200000ca:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
200000cc:	230a      	movs	r3, #10
200000ce:	60bb      	str	r3, [r7, #8]
#endif
    
    for (i = 1; i <= limit; i++)
200000d0:	2301      	movs	r3, #1
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	e006      	b.n	200000e4 <delay_mili+0x26>
    {
        delay_mikro(ms);
200000d6:	687b      	ldr	r3, [r7, #4]
200000d8:	0018      	movs	r0, r3
200000da:	f7ff ffcc 	bl	20000076 <delay_mikro>
    for (i = 1; i <= limit; i++)
200000de:	68fb      	ldr	r3, [r7, #12]
200000e0:	3301      	adds	r3, #1
200000e2:	60fb      	str	r3, [r7, #12]
200000e4:	68fa      	ldr	r2, [r7, #12]
200000e6:	68bb      	ldr	r3, [r7, #8]
200000e8:	429a      	cmp	r2, r3
200000ea:	ddf4      	ble.n	200000d6 <delay_mili+0x18>
    }
}
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46bd      	mov	sp, r7
200000f2:	b004      	add	sp, #16
200000f4:	bd80      	pop	{r7, pc}

200000f6 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
200000f6:	b580      	push	{r7, lr}
200000f8:	b082      	sub	sp, #8
200000fa:	af00      	add	r7, sp, #0
200000fc:	0002      	movs	r2, r0
200000fe:	1dfb      	adds	r3, r7, #7
20000100:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
20000102:	4b06      	ldr	r3, [pc, #24]	; (2000011c <graphic_ctrl_bit_set+0x26>)
20000104:	781a      	ldrb	r2, [r3, #0]
20000106:	4905      	ldr	r1, [pc, #20]	; (2000011c <graphic_ctrl_bit_set+0x26>)
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	781b      	ldrb	r3, [r3, #0]
2000010c:	4313      	orrs	r3, r2
2000010e:	b2db      	uxtb	r3, r3
20000110:	700b      	strb	r3, [r1, #0]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b002      	add	sp, #8
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	40021014 	andmi	r1, r2, r4, lsl r0

20000120 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
20000120:	b580      	push	{r7, lr}
20000122:	b082      	sub	sp, #8
20000124:	af00      	add	r7, sp, #0
20000126:	0002      	movs	r2, r0
20000128:	1dfb      	adds	r3, r7, #7
2000012a:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
2000012c:	4b08      	ldr	r3, [pc, #32]	; (20000150 <graphic_ctrl_bit_clear+0x30>)
2000012e:	781b      	ldrb	r3, [r3, #0]
20000130:	b25b      	sxtb	r3, r3
20000132:	1dfa      	adds	r2, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	b252      	sxtb	r2, r2
20000138:	43d2      	mvns	r2, r2
2000013a:	b252      	sxtb	r2, r2
2000013c:	4013      	ands	r3, r2
2000013e:	b25a      	sxtb	r2, r3
20000140:	4b03      	ldr	r3, [pc, #12]	; (20000150 <graphic_ctrl_bit_clear+0x30>)
20000142:	b2d2      	uxtb	r2, r2
20000144:	701a      	strb	r2, [r3, #0]
}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	46bd      	mov	sp, r7
2000014a:	b002      	add	sp, #8
2000014c:	bd80      	pop	{r7, pc}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	40021014 	andmi	r1, r2, r4, lsl r0

20000154 <select_controller>:

void select_controller(uint8_t controller)
{
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
2000015a:	0002      	movs	r2, r0
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	701a      	strb	r2, [r3, #0]
    switch(controller)
20000160:	1dfb      	adds	r3, r7, #7
20000162:	781b      	ldrb	r3, [r3, #0]
20000164:	2b18      	cmp	r3, #24
20000166:	d01a      	beq.n	2000019e <select_controller+0x4a>
20000168:	dc1d      	bgt.n	200001a6 <select_controller+0x52>
2000016a:	2b10      	cmp	r3, #16
2000016c:	d010      	beq.n	20000190 <select_controller+0x3c>
2000016e:	dc1a      	bgt.n	200001a6 <select_controller+0x52>
20000170:	2b00      	cmp	r3, #0
20000172:	d002      	beq.n	2000017a <select_controller+0x26>
20000174:	2b08      	cmp	r3, #8
20000176:	d004      	beq.n	20000182 <select_controller+0x2e>
            break;
        case (B_CS1 | B_CS2):
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
        default:
            break;
20000178:	e015      	b.n	200001a6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000017a:	2018      	movs	r0, #24
2000017c:	f7ff ffd0 	bl	20000120 <graphic_ctrl_bit_clear>
            break;
20000180:	e012      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_set(B_CS1);
20000182:	2008      	movs	r0, #8
20000184:	f7ff ffb7 	bl	200000f6 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000188:	2010      	movs	r0, #16
2000018a:	f7ff ffc9 	bl	20000120 <graphic_ctrl_bit_clear>
            break;
2000018e:	e00b      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_clear(B_CS1);
20000190:	2008      	movs	r0, #8
20000192:	f7ff ffc5 	bl	20000120 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000196:	2010      	movs	r0, #16
20000198:	f7ff ffad 	bl	200000f6 <graphic_ctrl_bit_set>
            break;
2000019c:	e004      	b.n	200001a8 <select_controller+0x54>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000019e:	2018      	movs	r0, #24
200001a0:	f7ff ffa9 	bl	200000f6 <graphic_ctrl_bit_set>
            break;
200001a4:	e000      	b.n	200001a8 <select_controller+0x54>
            break;
200001a6:	46c0      	nop			; (mov r8, r8)
    }
}
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b002      	add	sp, #8
200001ae:	bd80      	pop	{r7, pc}

200001b0 <graphic_wait_ready>:

void graphic_wait_ready(void)
{
200001b0:	b580      	push	{r7, lr}
200001b2:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
200001b4:	2040      	movs	r0, #64	; 0x40
200001b6:	f7ff ffb3 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
200001ba:	4b11      	ldr	r3, [pc, #68]	; (20000200 <graphic_wait_ready+0x50>)
200001bc:	4a11      	ldr	r2, [pc, #68]	; (20000204 <graphic_wait_ready+0x54>)
200001be:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_RS);
200001c0:	2001      	movs	r0, #1
200001c2:	f7ff ffad 	bl	20000120 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200001c6:	2002      	movs	r0, #2
200001c8:	f7ff ff95 	bl	200000f6 <graphic_ctrl_bit_set>
    
    delay_500ns();
200001cc:	f7ff ff4a 	bl	20000064 <delay_500ns>
    
    do
    {
        graphic_ctrl_bit_set(B_E);
200001d0:	2040      	movs	r0, #64	; 0x40
200001d2:	f7ff ff90 	bl	200000f6 <graphic_ctrl_bit_set>
        delay_500ns();
200001d6:	f7ff ff45 	bl	20000064 <delay_500ns>
        
        graphic_ctrl_bit_clear(B_E);
200001da:	2040      	movs	r0, #64	; 0x40
200001dc:	f7ff ffa0 	bl	20000120 <graphic_ctrl_bit_clear>
        delay_500ns();
200001e0:	f7ff ff40 	bl	20000064 <delay_500ns>
    } while( (*GRAPHIC_DATA_IDR & LCD_BUSY) != 0);
200001e4:	4b08      	ldr	r3, [pc, #32]	; (20000208 <graphic_wait_ready+0x58>)
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	b25b      	sxtb	r3, r3
200001ea:	2b00      	cmp	r3, #0
200001ec:	dbf0      	blt.n	200001d0 <graphic_wait_ready+0x20>
    
    graphic_ctrl_bit_set(B_E);
200001ee:	2040      	movs	r0, #64	; 0x40
200001f0:	f7ff ff81 	bl	200000f6 <graphic_ctrl_bit_set>
    
    * ( (unsigned long *) portModer) = 0x55555555;
200001f4:	4b02      	ldr	r3, [pc, #8]	; (20000200 <graphic_wait_ready+0x50>)
200001f6:	4a05      	ldr	r2, [pc, #20]	; (2000020c <graphic_wait_ready+0x5c>)
200001f8:	601a      	str	r2, [r3, #0]
}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	46bd      	mov	sp, r7
200001fe:	bd80      	pop	{r7, pc}
20000200:	40021000 	andmi	r1, r2, r0
20000204:	00005555 	andeq	r5, r0, r5, asr r5
20000208:	40021011 	andmi	r1, r2, r1, lsl r0
2000020c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000210 <graphic_read>:

uint8_t graphic_read(uint8_t controller)
{
20000210:	b580      	push	{r7, lr}
20000212:	b084      	sub	sp, #16
20000214:	af00      	add	r7, sp, #0
20000216:	0002      	movs	r2, r0
20000218:	1dfb      	adds	r3, r7, #7
2000021a:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val;
    
    graphic_ctrl_bit_clear(B_E);
2000021c:	2040      	movs	r0, #64	; 0x40
2000021e:	f7ff ff7f 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
20000222:	4b1b      	ldr	r3, [pc, #108]	; (20000290 <graphic_read+0x80>)
20000224:	4a1b      	ldr	r2, [pc, #108]	; (20000294 <graphic_read+0x84>)
20000226:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_RS | B_RW);
20000228:	2003      	movs	r0, #3
2000022a:	f7ff ff64 	bl	200000f6 <graphic_ctrl_bit_set>
    
    select_controller(controller);
2000022e:	1dfb      	adds	r3, r7, #7
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	0018      	movs	r0, r3
20000234:	f7ff ff8e 	bl	20000154 <select_controller>
    delay_500ns();
20000238:	f7ff ff14 	bl	20000064 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff5a 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_500ns();
20000242:	f7ff ff0f 	bl	20000064 <delay_500ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
20000246:	4a14      	ldr	r2, [pc, #80]	; (20000298 <graphic_read+0x88>)
20000248:	230f      	movs	r3, #15
2000024a:	18fb      	adds	r3, r7, r3
2000024c:	7812      	ldrb	r2, [r2, #0]
2000024e:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff65 	bl	20000120 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x55555555;
20000256:	4b0e      	ldr	r3, [pc, #56]	; (20000290 <graphic_read+0x80>)
20000258:	4a10      	ldr	r2, [pc, #64]	; (2000029c <graphic_read+0x8c>)
2000025a:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1)
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	781b      	ldrb	r3, [r3, #0]
20000260:	2b08      	cmp	r3, #8
20000262:	d104      	bne.n	2000026e <graphic_read+0x5e>
    {
        select_controller(B_CS1);
20000264:	2008      	movs	r0, #8
20000266:	f7ff ff75 	bl	20000154 <select_controller>
        graphic_wait_ready();
2000026a:	f7ff ffa1 	bl	200001b0 <graphic_wait_ready>
    }
    if(controller == B_CS2)
2000026e:	1dfb      	adds	r3, r7, #7
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	2b10      	cmp	r3, #16
20000274:	d104      	bne.n	20000280 <graphic_read+0x70>
    {
        select_controller(B_CS2);
20000276:	2010      	movs	r0, #16
20000278:	f7ff ff6c 	bl	20000154 <select_controller>
        graphic_wait_ready();
2000027c:	f7ff ff98 	bl	200001b0 <graphic_wait_ready>
    }
    
    return ret_val;
20000280:	230f      	movs	r3, #15
20000282:	18fb      	adds	r3, r7, r3
20000284:	781b      	ldrb	r3, [r3, #0]
}
20000286:	0018      	movs	r0, r3
20000288:	46bd      	mov	sp, r7
2000028a:	b004      	add	sp, #16
2000028c:	bd80      	pop	{r7, pc}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	40021000 	andmi	r1, r2, r0
20000294:	00005555 	andeq	r5, r0, r5, asr r5
20000298:	40021011 	andmi	r1, r2, r1, lsl r0
2000029c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
200002a0:	b580      	push	{r7, lr}
200002a2:	b082      	sub	sp, #8
200002a4:	af00      	add	r7, sp, #0
200002a6:	0002      	movs	r2, r0
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	701a      	strb	r2, [r3, #0]
200002ac:	1dbb      	adds	r3, r7, #6
200002ae:	1c0a      	adds	r2, r1, #0
200002b0:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_DATA_ODR = value;
200002b2:	4a1a      	ldr	r2, [pc, #104]	; (2000031c <graphic_write+0x7c>)
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	7013      	strb	r3, [r2, #0]
    
    select_controller(controller);
200002ba:	1dbb      	adds	r3, r7, #6
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff48 	bl	20000154 <select_controller>
    delay_500ns();
200002c4:	f7ff fece 	bl	20000064 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
200002c8:	2040      	movs	r0, #64	; 0x40
200002ca:	f7ff ff14 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_500ns();
200002ce:	f7ff fec9 	bl	20000064 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200002d2:	2040      	movs	r0, #64	; 0x40
200002d4:	f7ff ff24 	bl	20000120 <graphic_ctrl_bit_clear>
    
    if ( (controller & B_CS1) )
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2208      	movs	r2, #8
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x4c>
    {
        select_controller(B_CS1);
200002e2:	2008      	movs	r0, #8
200002e4:	f7ff ff36 	bl	20000154 <select_controller>
        graphic_wait_ready();
200002e8:	f7ff ff62 	bl	200001b0 <graphic_wait_ready>
    }
    if ( (controller & B_CS2) )
200002ec:	1dbb      	adds	r3, r7, #6
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	2210      	movs	r2, #16
200002f2:	4013      	ands	r3, r2
200002f4:	d004      	beq.n	20000300 <graphic_write+0x60>
    {
        select_controller(B_CS2);
200002f6:	2010      	movs	r0, #16
200002f8:	f7ff ff2c 	bl	20000154 <select_controller>
        graphic_wait_ready();
200002fc:	f7ff ff58 	bl	200001b0 <graphic_wait_ready>
    }
    
    *GRAPHIC_DATA_ODR = 0x0;
20000300:	4b06      	ldr	r3, [pc, #24]	; (2000031c <graphic_write+0x7c>)
20000302:	2200      	movs	r2, #0
20000304:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_E);
20000306:	2040      	movs	r0, #64	; 0x40
20000308:	f7ff fef5 	bl	200000f6 <graphic_ctrl_bit_set>
    
    select_controller(0);
2000030c:	2000      	movs	r0, #0
2000030e:	f7ff ff21 	bl	20000154 <select_controller>
}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b002      	add	sp, #8
20000318:	bd80      	pop	{r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021015 	andmi	r1, r2, r5, lsl r0

20000320 <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller)
{
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
20000326:	0002      	movs	r2, r0
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	701a      	strb	r2, [r3, #0]
2000032c:	1dbb      	adds	r3, r7, #6
2000032e:	1c0a      	adds	r2, r1, #0
20000330:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000332:	2040      	movs	r0, #64	; 0x40
20000334:	f7ff fef4 	bl	20000120 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000338:	1dbb      	adds	r3, r7, #6
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	0018      	movs	r0, r3
2000033e:	f7ff ff09 	bl	20000154 <select_controller>
    
    graphic_ctrl_bit_clear(B_RS | B_RW);
20000342:	2003      	movs	r0, #3
20000344:	f7ff feec 	bl	20000120 <graphic_ctrl_bit_clear>
    
    graphic_write(cmd, controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781a      	ldrb	r2, [r3, #0]
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	0011      	movs	r1, r2
20000352:	0018      	movs	r0, r3
20000354:	f7ff ffa4 	bl	200002a0 <graphic_write>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}

20000360 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
2000036c:	1dbb      	adds	r3, r7, #6
2000036e:	1c0a      	adds	r2, r1, #0
20000370:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff fed4 	bl	20000120 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000378:	1dbb      	adds	r3, r7, #6
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	0018      	movs	r0, r3
2000037e:	f7ff fee9 	bl	20000154 <select_controller>
    
    graphic_ctrl_bit_set(B_RS);
20000382:	2001      	movs	r0, #1
20000384:	f7ff feb7 	bl	200000f6 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000388:	2002      	movs	r0, #2
2000038a:	f7ff fec9 	bl	20000120 <graphic_ctrl_bit_clear>
    
    graphic_write(data,controller);
2000038e:	1dbb      	adds	r3, r7, #6
20000390:	781a      	ldrb	r2, [r3, #0]
20000392:	1dfb      	adds	r3, r7, #7
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	0011      	movs	r1, r2
20000398:	0018      	movs	r0, r3
2000039a:	f7ff ff81 	bl	200002a0 <graphic_write>
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b002      	add	sp, #8
200003a4:	bd80      	pop	{r7, pc}

200003a6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
200003a6:	b580      	push	{r7, lr}
200003a8:	b082      	sub	sp, #8
200003aa:	af00      	add	r7, sp, #0
200003ac:	0002      	movs	r2, r0
200003ae:	1dfb      	adds	r3, r7, #7
200003b0:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
200003b2:	1dfb      	adds	r3, r7, #7
200003b4:	781b      	ldrb	r3, [r3, #0]
200003b6:	0018      	movs	r0, r3
200003b8:	f7ff ff2a 	bl	20000210 <graphic_read>
    return graphic_read(controller);
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	0018      	movs	r0, r3
200003c2:	f7ff ff25 	bl	20000210 <graphic_read>
200003c6:	0003      	movs	r3, r0
}
200003c8:	0018      	movs	r0, r3
200003ca:	46bd      	mov	sp, r7
200003cc:	b002      	add	sp, #8
200003ce:	bd80      	pop	{r7, pc}

200003d0 <graphic_initialize>:

void graphic_initialize(void)
{
200003d0:	b580      	push	{r7, lr}
200003d2:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_SELECT);
200003d4:	2004      	movs	r0, #4
200003d6:	f7ff fea3 	bl	20000120 <graphic_ctrl_bit_clear>
    delay_mikro(10);
200003da:	200a      	movs	r0, #10
200003dc:	f7ff fe4b 	bl	20000076 <delay_mikro>
    
    graphic_ctrl_bit_set(B_E);
200003e0:	2040      	movs	r0, #64	; 0x40
200003e2:	f7ff fe88 	bl	200000f6 <graphic_ctrl_bit_set>
    delay_mikro(10);
200003e6:	200a      	movs	r0, #10
200003e8:	f7ff fe45 	bl	20000076 <delay_mikro>
    
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003ec:	2078      	movs	r0, #120	; 0x78
200003ee:	f7ff fe97 	bl	20000120 <graphic_ctrl_bit_clear>
    delay_mili(30);
200003f2:	201e      	movs	r0, #30
200003f4:	f7ff fe63 	bl	200000be <delay_mili>
    
    graphic_ctrl_bit_set(B_RST);
200003f8:	2020      	movs	r0, #32
200003fa:	f7ff fe7c 	bl	200000f6 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003fe:	2118      	movs	r1, #24
20000400:	203e      	movs	r0, #62	; 0x3e
20000402:	f7ff ff8d 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000406:	2118      	movs	r1, #24
20000408:	203f      	movs	r0, #63	; 0x3f
2000040a:	f7ff ff89 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000040e:	2118      	movs	r1, #24
20000410:	20c0      	movs	r0, #192	; 0xc0
20000412:	f7ff ff85 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000416:	2118      	movs	r1, #24
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff ff81 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000041e:	2118      	movs	r1, #24
20000420:	20b8      	movs	r0, #184	; 0xb8
20000422:	f7ff ff7d 	bl	20000320 <graphic_write_command>
    
    select_controller(0);
20000426:	2000      	movs	r0, #0
20000428:	f7ff fe94 	bl	20000154 <select_controller>
}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	46bd      	mov	sp, r7
20000430:	bd80      	pop	{r7, pc}

20000432 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000432:	b580      	push	{r7, lr}
20000434:	b082      	sub	sp, #8
20000436:	af00      	add	r7, sp, #0
    char page, add;
    
    for(page = 0; page <= 7; page++)
20000438:	1dfb      	adds	r3, r7, #7
2000043a:	2200      	movs	r2, #0
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	e023      	b.n	20000488 <graphic_clear_screen+0x56>
    {
        graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000440:	1dfb      	adds	r3, r7, #7
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	2248      	movs	r2, #72	; 0x48
20000446:	4252      	negs	r2, r2
20000448:	4313      	orrs	r3, r2
2000044a:	b2db      	uxtb	r3, r3
2000044c:	2118      	movs	r1, #24
2000044e:	0018      	movs	r0, r3
20000450:	f7ff ff66 	bl	20000320 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000454:	2118      	movs	r1, #24
20000456:	2040      	movs	r0, #64	; 0x40
20000458:	f7ff ff62 	bl	20000320 <graphic_write_command>
        
        for(add = 0; add <= 63; add++)
2000045c:	1dbb      	adds	r3, r7, #6
2000045e:	2200      	movs	r2, #0
20000460:	701a      	strb	r2, [r3, #0]
20000462:	e008      	b.n	20000476 <graphic_clear_screen+0x44>
        {
            graphic_write_data(0, B_CS1 | B_CS2);
20000464:	2118      	movs	r1, #24
20000466:	2000      	movs	r0, #0
20000468:	f7ff ff7a 	bl	20000360 <graphic_write_data>
        for(add = 0; add <= 63; add++)
2000046c:	1dbb      	adds	r3, r7, #6
2000046e:	781a      	ldrb	r2, [r3, #0]
20000470:	1dbb      	adds	r3, r7, #6
20000472:	3201      	adds	r2, #1
20000474:	701a      	strb	r2, [r3, #0]
20000476:	1dbb      	adds	r3, r7, #6
20000478:	781b      	ldrb	r3, [r3, #0]
2000047a:	2b3f      	cmp	r3, #63	; 0x3f
2000047c:	d9f2      	bls.n	20000464 <graphic_clear_screen+0x32>
    for(page = 0; page <= 7; page++)
2000047e:	1dfb      	adds	r3, r7, #7
20000480:	781a      	ldrb	r2, [r3, #0]
20000482:	1dfb      	adds	r3, r7, #7
20000484:	3201      	adds	r2, #1
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	2b07      	cmp	r3, #7
2000048e:	d9d7      	bls.n	20000440 <graphic_clear_screen+0xe>
        }
    }
}
20000490:	46c0      	nop			; (mov r8, r8)
20000492:	46c0      	nop			; (mov r8, r8)
20000494:	46bd      	mov	sp, r7
20000496:	b002      	add	sp, #8
20000498:	bd80      	pop	{r7, pc}

2000049a <pixel>:

void pixel(unsigned x, unsigned y, unsigned set)
{
2000049a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000049c:	b087      	sub	sp, #28
2000049e:	af00      	add	r7, sp, #0
200004a0:	60f8      	str	r0, [r7, #12]
200004a2:	60b9      	str	r1, [r7, #8]
200004a4:	607a      	str	r2, [r7, #4]
    if (x > 128 || x == 0 || y > 64 || y == 0 || set > 1)
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	2b80      	cmp	r3, #128	; 0x80
200004aa:	d900      	bls.n	200004ae <pixel+0x14>
200004ac:	e0b8      	b.n	20000620 <pixel+0x186>
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d100      	bne.n	200004b6 <pixel+0x1c>
200004b4:	e0b4      	b.n	20000620 <pixel+0x186>
200004b6:	68bb      	ldr	r3, [r7, #8]
200004b8:	2b40      	cmp	r3, #64	; 0x40
200004ba:	d900      	bls.n	200004be <pixel+0x24>
200004bc:	e0b0      	b.n	20000620 <pixel+0x186>
200004be:	68bb      	ldr	r3, [r7, #8]
200004c0:	2b00      	cmp	r3, #0
200004c2:	d100      	bne.n	200004c6 <pixel+0x2c>
200004c4:	e0ac      	b.n	20000620 <pixel+0x186>
200004c6:	687b      	ldr	r3, [r7, #4]
200004c8:	2b01      	cmp	r3, #1
200004ca:	d900      	bls.n	200004ce <pixel+0x34>
200004cc:	e0a8      	b.n	20000620 <pixel+0x186>
    {
        return;
    }
    
    uint8_t bitmask, controller, x_fysisk, index = (y-1)/8;
200004ce:	68bb      	ldr	r3, [r7, #8]
200004d0:	3b01      	subs	r3, #1
200004d2:	08da      	lsrs	r2, r3, #3
200004d4:	2314      	movs	r3, #20
200004d6:	18fb      	adds	r3, r7, r3
200004d8:	701a      	strb	r2, [r3, #0]
    
    switch ((y-1) % 8)
200004da:	68bb      	ldr	r3, [r7, #8]
200004dc:	3b01      	subs	r3, #1
200004de:	2207      	movs	r2, #7
200004e0:	4013      	ands	r3, r2
200004e2:	2b07      	cmp	r3, #7
200004e4:	d82c      	bhi.n	20000540 <pixel+0xa6>
200004e6:	009a      	lsls	r2, r3, #2
200004e8:	4b4f      	ldr	r3, [pc, #316]	; (20000628 <pixel+0x18e>)
200004ea:	18d3      	adds	r3, r2, r3
200004ec:	681b      	ldr	r3, [r3, #0]
200004ee:	469f      	mov	pc, r3
    {
        case 0:
            bitmask = 0x01;
200004f0:	2317      	movs	r3, #23
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	2201      	movs	r2, #1
200004f6:	701a      	strb	r2, [r3, #0]
            break;
200004f8:	e022      	b.n	20000540 <pixel+0xa6>
        case 1:
            bitmask = 0x02;
200004fa:	2317      	movs	r3, #23
200004fc:	18fb      	adds	r3, r7, r3
200004fe:	2202      	movs	r2, #2
20000500:	701a      	strb	r2, [r3, #0]
            break;
20000502:	e01d      	b.n	20000540 <pixel+0xa6>
        case 2:
            bitmask = 0x04;
20000504:	2317      	movs	r3, #23
20000506:	18fb      	adds	r3, r7, r3
20000508:	2204      	movs	r2, #4
2000050a:	701a      	strb	r2, [r3, #0]
            break;
2000050c:	e018      	b.n	20000540 <pixel+0xa6>
        case 3:
            bitmask = 0x08;
2000050e:	2317      	movs	r3, #23
20000510:	18fb      	adds	r3, r7, r3
20000512:	2208      	movs	r2, #8
20000514:	701a      	strb	r2, [r3, #0]
            break;
20000516:	e013      	b.n	20000540 <pixel+0xa6>
        case 4:
            bitmask = 0x10;
20000518:	2317      	movs	r3, #23
2000051a:	18fb      	adds	r3, r7, r3
2000051c:	2210      	movs	r2, #16
2000051e:	701a      	strb	r2, [r3, #0]
            break;
20000520:	e00e      	b.n	20000540 <pixel+0xa6>
        case 5:
            bitmask = 0x20;
20000522:	2317      	movs	r3, #23
20000524:	18fb      	adds	r3, r7, r3
20000526:	2220      	movs	r2, #32
20000528:	701a      	strb	r2, [r3, #0]
            break;
2000052a:	e009      	b.n	20000540 <pixel+0xa6>
        case 6:
            bitmask = 0x40;
2000052c:	2317      	movs	r3, #23
2000052e:	18fb      	adds	r3, r7, r3
20000530:	2240      	movs	r2, #64	; 0x40
20000532:	701a      	strb	r2, [r3, #0]
            break;
20000534:	e004      	b.n	20000540 <pixel+0xa6>
        case 7:
            bitmask = 0x80;
20000536:	2317      	movs	r3, #23
20000538:	18fb      	adds	r3, r7, r3
2000053a:	2280      	movs	r2, #128	; 0x80
2000053c:	701a      	strb	r2, [r3, #0]
            break;
2000053e:	46c0      	nop			; (mov r8, r8)
    }
    
    if (set == 0)
20000540:	687b      	ldr	r3, [r7, #4]
20000542:	2b00      	cmp	r3, #0
20000544:	d105      	bne.n	20000552 <pixel+0xb8>
    {
        bitmask = ~bitmask;
20000546:	2217      	movs	r2, #23
20000548:	18bb      	adds	r3, r7, r2
2000054a:	18ba      	adds	r2, r7, r2
2000054c:	7812      	ldrb	r2, [r2, #0]
2000054e:	43d2      	mvns	r2, r2
20000550:	701a      	strb	r2, [r3, #0]
    }
    
    if (x > 64)
20000552:	68fb      	ldr	r3, [r7, #12]
20000554:	2b40      	cmp	r3, #64	; 0x40
20000556:	d90a      	bls.n	2000056e <pixel+0xd4>
    {
        controller = B_CS2;
20000558:	2316      	movs	r3, #22
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2210      	movs	r2, #16
2000055e:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-65;
20000560:	68fb      	ldr	r3, [r7, #12]
20000562:	b2da      	uxtb	r2, r3
20000564:	2315      	movs	r3, #21
20000566:	18fb      	adds	r3, r7, r3
20000568:	3a41      	subs	r2, #65	; 0x41
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	e009      	b.n	20000582 <pixel+0xe8>
    }
    else
    {
        controller = B_CS1;
2000056e:	2316      	movs	r3, #22
20000570:	18fb      	adds	r3, r7, r3
20000572:	2208      	movs	r2, #8
20000574:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-1;
20000576:	68fb      	ldr	r3, [r7, #12]
20000578:	b2da      	uxtb	r2, r3
2000057a:	2315      	movs	r3, #21
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	3a01      	subs	r2, #1
20000580:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000582:	2615      	movs	r6, #21
20000584:	19bb      	adds	r3, r7, r6
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	2240      	movs	r2, #64	; 0x40
2000058a:	4313      	orrs	r3, r2
2000058c:	b2da      	uxtb	r2, r3
2000058e:	2516      	movs	r5, #22
20000590:	197b      	adds	r3, r7, r5
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	0019      	movs	r1, r3
20000596:	0010      	movs	r0, r2
20000598:	f7ff fec2 	bl	20000320 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000059c:	2314      	movs	r3, #20
2000059e:	18fb      	adds	r3, r7, r3
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	2248      	movs	r2, #72	; 0x48
200005a4:	4252      	negs	r2, r2
200005a6:	4313      	orrs	r3, r2
200005a8:	b2da      	uxtb	r2, r3
200005aa:	197b      	adds	r3, r7, r5
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0019      	movs	r1, r3
200005b0:	0010      	movs	r0, r2
200005b2:	f7ff feb5 	bl	20000320 <graphic_write_command>
    
    uint8_t temp = graphic_read_data(controller);
200005b6:	2313      	movs	r3, #19
200005b8:	18fc      	adds	r4, r7, r3
200005ba:	197b      	adds	r3, r7, r5
200005bc:	781b      	ldrb	r3, [r3, #0]
200005be:	0018      	movs	r0, r3
200005c0:	f7ff fef1 	bl	200003a6 <graphic_read_data>
200005c4:	0003      	movs	r3, r0
200005c6:	7023      	strb	r3, [r4, #0]
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200005c8:	19bb      	adds	r3, r7, r6
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	2240      	movs	r2, #64	; 0x40
200005ce:	4313      	orrs	r3, r2
200005d0:	b2da      	uxtb	r2, r3
200005d2:	197b      	adds	r3, r7, r5
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	0019      	movs	r1, r3
200005d8:	0010      	movs	r0, r2
200005da:	f7ff fea1 	bl	20000320 <graphic_write_command>
    
    if (set == 1)
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	2b01      	cmp	r3, #1
200005e2:	d109      	bne.n	200005f8 <pixel+0x15e>
    {
        bitmask = bitmask | temp;
200005e4:	2117      	movs	r1, #23
200005e6:	187b      	adds	r3, r7, r1
200005e8:	1879      	adds	r1, r7, r1
200005ea:	2213      	movs	r2, #19
200005ec:	18ba      	adds	r2, r7, r2
200005ee:	7809      	ldrb	r1, [r1, #0]
200005f0:	7812      	ldrb	r2, [r2, #0]
200005f2:	430a      	orrs	r2, r1
200005f4:	701a      	strb	r2, [r3, #0]
200005f6:	e008      	b.n	2000060a <pixel+0x170>
    }
    else
    {
        bitmask = bitmask & temp;
200005f8:	2217      	movs	r2, #23
200005fa:	18bb      	adds	r3, r7, r2
200005fc:	18ba      	adds	r2, r7, r2
200005fe:	2113      	movs	r1, #19
20000600:	1879      	adds	r1, r7, r1
20000602:	7812      	ldrb	r2, [r2, #0]
20000604:	7809      	ldrb	r1, [r1, #0]
20000606:	400a      	ands	r2, r1
20000608:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_data(bitmask, controller);
2000060a:	2316      	movs	r3, #22
2000060c:	18fb      	adds	r3, r7, r3
2000060e:	781a      	ldrb	r2, [r3, #0]
20000610:	2317      	movs	r3, #23
20000612:	18fb      	adds	r3, r7, r3
20000614:	781b      	ldrb	r3, [r3, #0]
20000616:	0011      	movs	r1, r2
20000618:	0018      	movs	r0, r3
2000061a:	f7ff fea1 	bl	20000360 <graphic_write_data>
2000061e:	e000      	b.n	20000622 <pixel+0x188>
        return;
20000620:	46c0      	nop			; (mov r8, r8)
}
20000622:	46bd      	mov	sp, r7
20000624:	b007      	add	sp, #28
20000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000628:	20000b2c 	andcs	r0, r0, ip, lsr #22

2000062c <draw_object>:

void draw_object(POBJECT o)
{
2000062c:	b580      	push	{r7, lr}
2000062e:	b084      	sub	sp, #16
20000630:	af00      	add	r7, sp, #0
20000632:	6078      	str	r0, [r7, #4]
    int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
20000634:	2300      	movs	r3, #0
20000636:	60fb      	str	r3, [r7, #12]
20000638:	e01d      	b.n	20000676 <draw_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,1);
2000063a:	687b      	ldr	r3, [r7, #4]
2000063c:	68da      	ldr	r2, [r3, #12]
2000063e:	687b      	ldr	r3, [r7, #4]
20000640:	6819      	ldr	r1, [r3, #0]
20000642:	68fb      	ldr	r3, [r7, #12]
20000644:	3304      	adds	r3, #4
20000646:	005b      	lsls	r3, r3, #1
20000648:	18cb      	adds	r3, r1, r3
2000064a:	3304      	adds	r3, #4
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	18d3      	adds	r3, r2, r3
20000650:	0018      	movs	r0, r3
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	691a      	ldr	r2, [r3, #16]
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	6819      	ldr	r1, [r3, #0]
2000065a:	68fb      	ldr	r3, [r7, #12]
2000065c:	3304      	adds	r3, #4
2000065e:	005b      	lsls	r3, r3, #1
20000660:	18cb      	adds	r3, r1, r3
20000662:	3305      	adds	r3, #5
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	18d3      	adds	r3, r2, r3
20000668:	2201      	movs	r2, #1
2000066a:	0019      	movs	r1, r3
2000066c:	f7ff ff15 	bl	2000049a <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
20000670:	68fb      	ldr	r3, [r7, #12]
20000672:	3301      	adds	r3, #1
20000674:	60fb      	str	r3, [r7, #12]
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	681b      	ldr	r3, [r3, #0]
2000067a:	681b      	ldr	r3, [r3, #0]
2000067c:	68fa      	ldr	r2, [r7, #12]
2000067e:	429a      	cmp	r2, r3
20000680:	dbdb      	blt.n	2000063a <draw_object+0xe>
    }
}
20000682:	46c0      	nop			; (mov r8, r8)
20000684:	46c0      	nop			; (mov r8, r8)
20000686:	46bd      	mov	sp, r7
20000688:	b004      	add	sp, #16
2000068a:	bd80      	pop	{r7, pc}

2000068c <clear_object>:

void clear_object(POBJECT o)
{
2000068c:	b580      	push	{r7, lr}
2000068e:	b084      	sub	sp, #16
20000690:	af00      	add	r7, sp, #0
20000692:	6078      	str	r0, [r7, #4]
        int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
20000694:	2300      	movs	r3, #0
20000696:	60fb      	str	r3, [r7, #12]
20000698:	e01d      	b.n	200006d6 <clear_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,0);
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	68da      	ldr	r2, [r3, #12]
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	6819      	ldr	r1, [r3, #0]
200006a2:	68fb      	ldr	r3, [r7, #12]
200006a4:	3304      	adds	r3, #4
200006a6:	005b      	lsls	r3, r3, #1
200006a8:	18cb      	adds	r3, r1, r3
200006aa:	3304      	adds	r3, #4
200006ac:	781b      	ldrb	r3, [r3, #0]
200006ae:	18d3      	adds	r3, r2, r3
200006b0:	0018      	movs	r0, r3
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	691a      	ldr	r2, [r3, #16]
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	6819      	ldr	r1, [r3, #0]
200006ba:	68fb      	ldr	r3, [r7, #12]
200006bc:	3304      	adds	r3, #4
200006be:	005b      	lsls	r3, r3, #1
200006c0:	18cb      	adds	r3, r1, r3
200006c2:	3305      	adds	r3, #5
200006c4:	781b      	ldrb	r3, [r3, #0]
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	2200      	movs	r2, #0
200006ca:	0019      	movs	r1, r3
200006cc:	f7ff fee5 	bl	2000049a <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
200006d0:	68fb      	ldr	r3, [r7, #12]
200006d2:	3301      	adds	r3, #1
200006d4:	60fb      	str	r3, [r7, #12]
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	681b      	ldr	r3, [r3, #0]
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	68fa      	ldr	r2, [r7, #12]
200006de:	429a      	cmp	r2, r3
200006e0:	dbdb      	blt.n	2000069a <clear_object+0xe>
    }
}
200006e2:	46c0      	nop			; (mov r8, r8)
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b004      	add	sp, #16
200006ea:	bd80      	pop	{r7, pc}

200006ec <move_object>:

void move_object(POBJECT o)
{
200006ec:	b580      	push	{r7, lr}
200006ee:	b082      	sub	sp, #8
200006f0:	af00      	add	r7, sp, #0
200006f2:	6078      	str	r0, [r7, #4]
    clear_object(o);
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	0018      	movs	r0, r3
200006f8:	f7ff ffc8 	bl	2000068c <clear_object>
    
    o->posx += o->dirx;
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	68da      	ldr	r2, [r3, #12]
20000700:	687b      	ldr	r3, [r7, #4]
20000702:	685b      	ldr	r3, [r3, #4]
20000704:	18d2      	adds	r2, r2, r3
20000706:	687b      	ldr	r3, [r7, #4]
20000708:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	691a      	ldr	r2, [r3, #16]
2000070e:	687b      	ldr	r3, [r7, #4]
20000710:	689b      	ldr	r3, [r3, #8]
20000712:	18d2      	adds	r2, r2, r3
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	611a      	str	r2, [r3, #16]
    
    if(o->posx < 1)
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	68db      	ldr	r3, [r3, #12]
2000071c:	2b00      	cmp	r3, #0
2000071e:	dc04      	bgt.n	2000072a <move_object+0x3e>
    {
        o->dirx *= -1;
20000720:	687b      	ldr	r3, [r7, #4]
20000722:	685b      	ldr	r3, [r3, #4]
20000724:	425a      	negs	r2, r3
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	605a      	str	r2, [r3, #4]
    }
    if( (o->posx + o->geo->sizex) > 128)
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	68da      	ldr	r2, [r3, #12]
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	681b      	ldr	r3, [r3, #0]
20000732:	685b      	ldr	r3, [r3, #4]
20000734:	18d3      	adds	r3, r2, r3
20000736:	2b80      	cmp	r3, #128	; 0x80
20000738:	dd04      	ble.n	20000744 <move_object+0x58>
    {
        o->dirx *= -1;
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	685b      	ldr	r3, [r3, #4]
2000073e:	425a      	negs	r2, r3
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	605a      	str	r2, [r3, #4]
    }
    if(o->posy < 1)
20000744:	687b      	ldr	r3, [r7, #4]
20000746:	691b      	ldr	r3, [r3, #16]
20000748:	2b00      	cmp	r3, #0
2000074a:	dc04      	bgt.n	20000756 <move_object+0x6a>
    {
        o->diry *= -1;
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	689b      	ldr	r3, [r3, #8]
20000750:	425a      	negs	r2, r3
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	609a      	str	r2, [r3, #8]
    }
    if( (o->posy + o->geo->sizey) > 64 )
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	691a      	ldr	r2, [r3, #16]
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	681b      	ldr	r3, [r3, #0]
2000075e:	689b      	ldr	r3, [r3, #8]
20000760:	18d3      	adds	r3, r2, r3
20000762:	2b40      	cmp	r3, #64	; 0x40
20000764:	dd04      	ble.n	20000770 <move_object+0x84>
    {
        o->diry *= -1;
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	689b      	ldr	r3, [r3, #8]
2000076a:	425a      	negs	r2, r3
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	609a      	str	r2, [r3, #8]
    }
    
    draw_object(o);
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	0018      	movs	r0, r3
20000774:	f7ff ff5a 	bl	2000062c <draw_object>
}
20000778:	46c0      	nop			; (mov r8, r8)
2000077a:	46bd      	mov	sp, r7
2000077c:	b002      	add	sp, #8
2000077e:	bd80      	pop	{r7, pc}

20000780 <set_speed_object>:

void set_speed_object(POBJECT o, int speedx, int speedy)
{
20000780:	b580      	push	{r7, lr}
20000782:	b084      	sub	sp, #16
20000784:	af00      	add	r7, sp, #0
20000786:	60f8      	str	r0, [r7, #12]
20000788:	60b9      	str	r1, [r7, #8]
2000078a:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
2000078c:	68fb      	ldr	r3, [r7, #12]
2000078e:	68ba      	ldr	r2, [r7, #8]
20000790:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000792:	68fb      	ldr	r3, [r7, #12]
20000794:	687a      	ldr	r2, [r7, #4]
20000796:	609a      	str	r2, [r3, #8]
}
20000798:	46c0      	nop			; (mov r8, r8)
2000079a:	46bd      	mov	sp, r7
2000079c:	b004      	add	sp, #16
2000079e:	bd80      	pop	{r7, pc}

200007a0 <app_init>:

void app_init(void)
{    
200007a0:	b580      	push	{r7, lr}
200007a2:	af00      	add	r7, sp, #0
    * ( (unsigned long *) portModer) = 0x55555555;
200007a4:	4b02      	ldr	r3, [pc, #8]	; (200007b0 <app_init+0x10>)
200007a6:	4a03      	ldr	r2, [pc, #12]	; (200007b4 <app_init+0x14>)
200007a8:	601a      	str	r2, [r3, #0]
}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	46bd      	mov	sp, r7
200007ae:	bd80      	pop	{r7, pc}
200007b0:	40021000 	andmi	r1, r2, r0
200007b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007b8 <main>:

void main(void)
{
200007b8:	b580      	push	{r7, lr}
200007ba:	b082      	sub	sp, #8
200007bc:	af00      	add	r7, sp, #0
    POBJECT p = &ball;
200007be:	4b09      	ldr	r3, [pc, #36]	; (200007e4 <main+0x2c>)
200007c0:	607b      	str	r3, [r7, #4]
    
    app_init();
200007c2:	f7ff ffed 	bl	200007a0 <app_init>
    graphic_initialize();
200007c6:	f7ff fe03 	bl	200003d0 <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
#endif

    p->set_speed(p,4,1);
200007ca:	687b      	ldr	r3, [r7, #4]
200007cc:	6a1b      	ldr	r3, [r3, #32]
200007ce:	6878      	ldr	r0, [r7, #4]
200007d0:	2201      	movs	r2, #1
200007d2:	2104      	movs	r1, #4
200007d4:	4798      	blx	r3
    
    while(1)
    {
        p->move(p);
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	69db      	ldr	r3, [r3, #28]
200007da:	687a      	ldr	r2, [r7, #4]
200007dc:	0010      	movs	r0, r2
200007de:	4798      	blx	r3
200007e0:	e7f9      	b.n	200007d6 <main+0x1e>
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	20000b08 	andcs	r0, r0, r8, lsl #22

200007e8 <__udivsi3>:
200007e8:	2200      	movs	r2, #0
200007ea:	0843      	lsrs	r3, r0, #1
200007ec:	428b      	cmp	r3, r1
200007ee:	d374      	bcc.n	200008da <__udivsi3+0xf2>
200007f0:	0903      	lsrs	r3, r0, #4
200007f2:	428b      	cmp	r3, r1
200007f4:	d35f      	bcc.n	200008b6 <__udivsi3+0xce>
200007f6:	0a03      	lsrs	r3, r0, #8
200007f8:	428b      	cmp	r3, r1
200007fa:	d344      	bcc.n	20000886 <__udivsi3+0x9e>
200007fc:	0b03      	lsrs	r3, r0, #12
200007fe:	428b      	cmp	r3, r1
20000800:	d328      	bcc.n	20000854 <__udivsi3+0x6c>
20000802:	0c03      	lsrs	r3, r0, #16
20000804:	428b      	cmp	r3, r1
20000806:	d30d      	bcc.n	20000824 <__udivsi3+0x3c>
20000808:	22ff      	movs	r2, #255	; 0xff
2000080a:	0209      	lsls	r1, r1, #8
2000080c:	ba12      	rev	r2, r2
2000080e:	0c03      	lsrs	r3, r0, #16
20000810:	428b      	cmp	r3, r1
20000812:	d302      	bcc.n	2000081a <__udivsi3+0x32>
20000814:	1212      	asrs	r2, r2, #8
20000816:	0209      	lsls	r1, r1, #8
20000818:	d065      	beq.n	200008e6 <__udivsi3+0xfe>
2000081a:	0b03      	lsrs	r3, r0, #12
2000081c:	428b      	cmp	r3, r1
2000081e:	d319      	bcc.n	20000854 <__udivsi3+0x6c>
20000820:	e000      	b.n	20000824 <__udivsi3+0x3c>
20000822:	0a09      	lsrs	r1, r1, #8
20000824:	0bc3      	lsrs	r3, r0, #15
20000826:	428b      	cmp	r3, r1
20000828:	d301      	bcc.n	2000082e <__udivsi3+0x46>
2000082a:	03cb      	lsls	r3, r1, #15
2000082c:	1ac0      	subs	r0, r0, r3
2000082e:	4152      	adcs	r2, r2
20000830:	0b83      	lsrs	r3, r0, #14
20000832:	428b      	cmp	r3, r1
20000834:	d301      	bcc.n	2000083a <__udivsi3+0x52>
20000836:	038b      	lsls	r3, r1, #14
20000838:	1ac0      	subs	r0, r0, r3
2000083a:	4152      	adcs	r2, r2
2000083c:	0b43      	lsrs	r3, r0, #13
2000083e:	428b      	cmp	r3, r1
20000840:	d301      	bcc.n	20000846 <__udivsi3+0x5e>
20000842:	034b      	lsls	r3, r1, #13
20000844:	1ac0      	subs	r0, r0, r3
20000846:	4152      	adcs	r2, r2
20000848:	0b03      	lsrs	r3, r0, #12
2000084a:	428b      	cmp	r3, r1
2000084c:	d301      	bcc.n	20000852 <__udivsi3+0x6a>
2000084e:	030b      	lsls	r3, r1, #12
20000850:	1ac0      	subs	r0, r0, r3
20000852:	4152      	adcs	r2, r2
20000854:	0ac3      	lsrs	r3, r0, #11
20000856:	428b      	cmp	r3, r1
20000858:	d301      	bcc.n	2000085e <__udivsi3+0x76>
2000085a:	02cb      	lsls	r3, r1, #11
2000085c:	1ac0      	subs	r0, r0, r3
2000085e:	4152      	adcs	r2, r2
20000860:	0a83      	lsrs	r3, r0, #10
20000862:	428b      	cmp	r3, r1
20000864:	d301      	bcc.n	2000086a <__udivsi3+0x82>
20000866:	028b      	lsls	r3, r1, #10
20000868:	1ac0      	subs	r0, r0, r3
2000086a:	4152      	adcs	r2, r2
2000086c:	0a43      	lsrs	r3, r0, #9
2000086e:	428b      	cmp	r3, r1
20000870:	d301      	bcc.n	20000876 <__udivsi3+0x8e>
20000872:	024b      	lsls	r3, r1, #9
20000874:	1ac0      	subs	r0, r0, r3
20000876:	4152      	adcs	r2, r2
20000878:	0a03      	lsrs	r3, r0, #8
2000087a:	428b      	cmp	r3, r1
2000087c:	d301      	bcc.n	20000882 <__udivsi3+0x9a>
2000087e:	020b      	lsls	r3, r1, #8
20000880:	1ac0      	subs	r0, r0, r3
20000882:	4152      	adcs	r2, r2
20000884:	d2cd      	bcs.n	20000822 <__udivsi3+0x3a>
20000886:	09c3      	lsrs	r3, r0, #7
20000888:	428b      	cmp	r3, r1
2000088a:	d301      	bcc.n	20000890 <__udivsi3+0xa8>
2000088c:	01cb      	lsls	r3, r1, #7
2000088e:	1ac0      	subs	r0, r0, r3
20000890:	4152      	adcs	r2, r2
20000892:	0983      	lsrs	r3, r0, #6
20000894:	428b      	cmp	r3, r1
20000896:	d301      	bcc.n	2000089c <__udivsi3+0xb4>
20000898:	018b      	lsls	r3, r1, #6
2000089a:	1ac0      	subs	r0, r0, r3
2000089c:	4152      	adcs	r2, r2
2000089e:	0943      	lsrs	r3, r0, #5
200008a0:	428b      	cmp	r3, r1
200008a2:	d301      	bcc.n	200008a8 <__udivsi3+0xc0>
200008a4:	014b      	lsls	r3, r1, #5
200008a6:	1ac0      	subs	r0, r0, r3
200008a8:	4152      	adcs	r2, r2
200008aa:	0903      	lsrs	r3, r0, #4
200008ac:	428b      	cmp	r3, r1
200008ae:	d301      	bcc.n	200008b4 <__udivsi3+0xcc>
200008b0:	010b      	lsls	r3, r1, #4
200008b2:	1ac0      	subs	r0, r0, r3
200008b4:	4152      	adcs	r2, r2
200008b6:	08c3      	lsrs	r3, r0, #3
200008b8:	428b      	cmp	r3, r1
200008ba:	d301      	bcc.n	200008c0 <__udivsi3+0xd8>
200008bc:	00cb      	lsls	r3, r1, #3
200008be:	1ac0      	subs	r0, r0, r3
200008c0:	4152      	adcs	r2, r2
200008c2:	0883      	lsrs	r3, r0, #2
200008c4:	428b      	cmp	r3, r1
200008c6:	d301      	bcc.n	200008cc <__udivsi3+0xe4>
200008c8:	008b      	lsls	r3, r1, #2
200008ca:	1ac0      	subs	r0, r0, r3
200008cc:	4152      	adcs	r2, r2
200008ce:	0843      	lsrs	r3, r0, #1
200008d0:	428b      	cmp	r3, r1
200008d2:	d301      	bcc.n	200008d8 <__udivsi3+0xf0>
200008d4:	004b      	lsls	r3, r1, #1
200008d6:	1ac0      	subs	r0, r0, r3
200008d8:	4152      	adcs	r2, r2
200008da:	1a41      	subs	r1, r0, r1
200008dc:	d200      	bcs.n	200008e0 <__udivsi3+0xf8>
200008de:	4601      	mov	r1, r0
200008e0:	4152      	adcs	r2, r2
200008e2:	4610      	mov	r0, r2
200008e4:	4770      	bx	lr
200008e6:	e7ff      	b.n	200008e8 <__udivsi3+0x100>
200008e8:	b501      	push	{r0, lr}
200008ea:	2000      	movs	r0, #0
200008ec:	f000 f8f0 	bl	20000ad0 <__aeabi_idiv0>
200008f0:	bd02      	pop	{r1, pc}
200008f2:	46c0      	nop			; (mov r8, r8)

200008f4 <__aeabi_uidivmod>:
200008f4:	2900      	cmp	r1, #0
200008f6:	d0f7      	beq.n	200008e8 <__udivsi3+0x100>
200008f8:	e776      	b.n	200007e8 <__udivsi3>
200008fa:	4770      	bx	lr

200008fc <__divsi3>:
200008fc:	4603      	mov	r3, r0
200008fe:	430b      	orrs	r3, r1
20000900:	d47f      	bmi.n	20000a02 <__divsi3+0x106>
20000902:	2200      	movs	r2, #0
20000904:	0843      	lsrs	r3, r0, #1
20000906:	428b      	cmp	r3, r1
20000908:	d374      	bcc.n	200009f4 <__divsi3+0xf8>
2000090a:	0903      	lsrs	r3, r0, #4
2000090c:	428b      	cmp	r3, r1
2000090e:	d35f      	bcc.n	200009d0 <__divsi3+0xd4>
20000910:	0a03      	lsrs	r3, r0, #8
20000912:	428b      	cmp	r3, r1
20000914:	d344      	bcc.n	200009a0 <__divsi3+0xa4>
20000916:	0b03      	lsrs	r3, r0, #12
20000918:	428b      	cmp	r3, r1
2000091a:	d328      	bcc.n	2000096e <__divsi3+0x72>
2000091c:	0c03      	lsrs	r3, r0, #16
2000091e:	428b      	cmp	r3, r1
20000920:	d30d      	bcc.n	2000093e <__divsi3+0x42>
20000922:	22ff      	movs	r2, #255	; 0xff
20000924:	0209      	lsls	r1, r1, #8
20000926:	ba12      	rev	r2, r2
20000928:	0c03      	lsrs	r3, r0, #16
2000092a:	428b      	cmp	r3, r1
2000092c:	d302      	bcc.n	20000934 <__divsi3+0x38>
2000092e:	1212      	asrs	r2, r2, #8
20000930:	0209      	lsls	r1, r1, #8
20000932:	d065      	beq.n	20000a00 <__divsi3+0x104>
20000934:	0b03      	lsrs	r3, r0, #12
20000936:	428b      	cmp	r3, r1
20000938:	d319      	bcc.n	2000096e <__divsi3+0x72>
2000093a:	e000      	b.n	2000093e <__divsi3+0x42>
2000093c:	0a09      	lsrs	r1, r1, #8
2000093e:	0bc3      	lsrs	r3, r0, #15
20000940:	428b      	cmp	r3, r1
20000942:	d301      	bcc.n	20000948 <__divsi3+0x4c>
20000944:	03cb      	lsls	r3, r1, #15
20000946:	1ac0      	subs	r0, r0, r3
20000948:	4152      	adcs	r2, r2
2000094a:	0b83      	lsrs	r3, r0, #14
2000094c:	428b      	cmp	r3, r1
2000094e:	d301      	bcc.n	20000954 <__divsi3+0x58>
20000950:	038b      	lsls	r3, r1, #14
20000952:	1ac0      	subs	r0, r0, r3
20000954:	4152      	adcs	r2, r2
20000956:	0b43      	lsrs	r3, r0, #13
20000958:	428b      	cmp	r3, r1
2000095a:	d301      	bcc.n	20000960 <__divsi3+0x64>
2000095c:	034b      	lsls	r3, r1, #13
2000095e:	1ac0      	subs	r0, r0, r3
20000960:	4152      	adcs	r2, r2
20000962:	0b03      	lsrs	r3, r0, #12
20000964:	428b      	cmp	r3, r1
20000966:	d301      	bcc.n	2000096c <__divsi3+0x70>
20000968:	030b      	lsls	r3, r1, #12
2000096a:	1ac0      	subs	r0, r0, r3
2000096c:	4152      	adcs	r2, r2
2000096e:	0ac3      	lsrs	r3, r0, #11
20000970:	428b      	cmp	r3, r1
20000972:	d301      	bcc.n	20000978 <__divsi3+0x7c>
20000974:	02cb      	lsls	r3, r1, #11
20000976:	1ac0      	subs	r0, r0, r3
20000978:	4152      	adcs	r2, r2
2000097a:	0a83      	lsrs	r3, r0, #10
2000097c:	428b      	cmp	r3, r1
2000097e:	d301      	bcc.n	20000984 <__divsi3+0x88>
20000980:	028b      	lsls	r3, r1, #10
20000982:	1ac0      	subs	r0, r0, r3
20000984:	4152      	adcs	r2, r2
20000986:	0a43      	lsrs	r3, r0, #9
20000988:	428b      	cmp	r3, r1
2000098a:	d301      	bcc.n	20000990 <__divsi3+0x94>
2000098c:	024b      	lsls	r3, r1, #9
2000098e:	1ac0      	subs	r0, r0, r3
20000990:	4152      	adcs	r2, r2
20000992:	0a03      	lsrs	r3, r0, #8
20000994:	428b      	cmp	r3, r1
20000996:	d301      	bcc.n	2000099c <__divsi3+0xa0>
20000998:	020b      	lsls	r3, r1, #8
2000099a:	1ac0      	subs	r0, r0, r3
2000099c:	4152      	adcs	r2, r2
2000099e:	d2cd      	bcs.n	2000093c <__divsi3+0x40>
200009a0:	09c3      	lsrs	r3, r0, #7
200009a2:	428b      	cmp	r3, r1
200009a4:	d301      	bcc.n	200009aa <__divsi3+0xae>
200009a6:	01cb      	lsls	r3, r1, #7
200009a8:	1ac0      	subs	r0, r0, r3
200009aa:	4152      	adcs	r2, r2
200009ac:	0983      	lsrs	r3, r0, #6
200009ae:	428b      	cmp	r3, r1
200009b0:	d301      	bcc.n	200009b6 <__divsi3+0xba>
200009b2:	018b      	lsls	r3, r1, #6
200009b4:	1ac0      	subs	r0, r0, r3
200009b6:	4152      	adcs	r2, r2
200009b8:	0943      	lsrs	r3, r0, #5
200009ba:	428b      	cmp	r3, r1
200009bc:	d301      	bcc.n	200009c2 <__divsi3+0xc6>
200009be:	014b      	lsls	r3, r1, #5
200009c0:	1ac0      	subs	r0, r0, r3
200009c2:	4152      	adcs	r2, r2
200009c4:	0903      	lsrs	r3, r0, #4
200009c6:	428b      	cmp	r3, r1
200009c8:	d301      	bcc.n	200009ce <__divsi3+0xd2>
200009ca:	010b      	lsls	r3, r1, #4
200009cc:	1ac0      	subs	r0, r0, r3
200009ce:	4152      	adcs	r2, r2
200009d0:	08c3      	lsrs	r3, r0, #3
200009d2:	428b      	cmp	r3, r1
200009d4:	d301      	bcc.n	200009da <__divsi3+0xde>
200009d6:	00cb      	lsls	r3, r1, #3
200009d8:	1ac0      	subs	r0, r0, r3
200009da:	4152      	adcs	r2, r2
200009dc:	0883      	lsrs	r3, r0, #2
200009de:	428b      	cmp	r3, r1
200009e0:	d301      	bcc.n	200009e6 <__divsi3+0xea>
200009e2:	008b      	lsls	r3, r1, #2
200009e4:	1ac0      	subs	r0, r0, r3
200009e6:	4152      	adcs	r2, r2
200009e8:	0843      	lsrs	r3, r0, #1
200009ea:	428b      	cmp	r3, r1
200009ec:	d301      	bcc.n	200009f2 <__divsi3+0xf6>
200009ee:	004b      	lsls	r3, r1, #1
200009f0:	1ac0      	subs	r0, r0, r3
200009f2:	4152      	adcs	r2, r2
200009f4:	1a41      	subs	r1, r0, r1
200009f6:	d200      	bcs.n	200009fa <__divsi3+0xfe>
200009f8:	4601      	mov	r1, r0
200009fa:	4152      	adcs	r2, r2
200009fc:	4610      	mov	r0, r2
200009fe:	4770      	bx	lr
20000a00:	e05d      	b.n	20000abe <__divsi3+0x1c2>
20000a02:	0fca      	lsrs	r2, r1, #31
20000a04:	d000      	beq.n	20000a08 <__divsi3+0x10c>
20000a06:	4249      	negs	r1, r1
20000a08:	1003      	asrs	r3, r0, #32
20000a0a:	d300      	bcc.n	20000a0e <__divsi3+0x112>
20000a0c:	4240      	negs	r0, r0
20000a0e:	4053      	eors	r3, r2
20000a10:	2200      	movs	r2, #0
20000a12:	469c      	mov	ip, r3
20000a14:	0903      	lsrs	r3, r0, #4
20000a16:	428b      	cmp	r3, r1
20000a18:	d32d      	bcc.n	20000a76 <__divsi3+0x17a>
20000a1a:	0a03      	lsrs	r3, r0, #8
20000a1c:	428b      	cmp	r3, r1
20000a1e:	d312      	bcc.n	20000a46 <__divsi3+0x14a>
20000a20:	22fc      	movs	r2, #252	; 0xfc
20000a22:	0189      	lsls	r1, r1, #6
20000a24:	ba12      	rev	r2, r2
20000a26:	0a03      	lsrs	r3, r0, #8
20000a28:	428b      	cmp	r3, r1
20000a2a:	d30c      	bcc.n	20000a46 <__divsi3+0x14a>
20000a2c:	0189      	lsls	r1, r1, #6
20000a2e:	1192      	asrs	r2, r2, #6
20000a30:	428b      	cmp	r3, r1
20000a32:	d308      	bcc.n	20000a46 <__divsi3+0x14a>
20000a34:	0189      	lsls	r1, r1, #6
20000a36:	1192      	asrs	r2, r2, #6
20000a38:	428b      	cmp	r3, r1
20000a3a:	d304      	bcc.n	20000a46 <__divsi3+0x14a>
20000a3c:	0189      	lsls	r1, r1, #6
20000a3e:	d03a      	beq.n	20000ab6 <__divsi3+0x1ba>
20000a40:	1192      	asrs	r2, r2, #6
20000a42:	e000      	b.n	20000a46 <__divsi3+0x14a>
20000a44:	0989      	lsrs	r1, r1, #6
20000a46:	09c3      	lsrs	r3, r0, #7
20000a48:	428b      	cmp	r3, r1
20000a4a:	d301      	bcc.n	20000a50 <__divsi3+0x154>
20000a4c:	01cb      	lsls	r3, r1, #7
20000a4e:	1ac0      	subs	r0, r0, r3
20000a50:	4152      	adcs	r2, r2
20000a52:	0983      	lsrs	r3, r0, #6
20000a54:	428b      	cmp	r3, r1
20000a56:	d301      	bcc.n	20000a5c <__divsi3+0x160>
20000a58:	018b      	lsls	r3, r1, #6
20000a5a:	1ac0      	subs	r0, r0, r3
20000a5c:	4152      	adcs	r2, r2
20000a5e:	0943      	lsrs	r3, r0, #5
20000a60:	428b      	cmp	r3, r1
20000a62:	d301      	bcc.n	20000a68 <__divsi3+0x16c>
20000a64:	014b      	lsls	r3, r1, #5
20000a66:	1ac0      	subs	r0, r0, r3
20000a68:	4152      	adcs	r2, r2
20000a6a:	0903      	lsrs	r3, r0, #4
20000a6c:	428b      	cmp	r3, r1
20000a6e:	d301      	bcc.n	20000a74 <__divsi3+0x178>
20000a70:	010b      	lsls	r3, r1, #4
20000a72:	1ac0      	subs	r0, r0, r3
20000a74:	4152      	adcs	r2, r2
20000a76:	08c3      	lsrs	r3, r0, #3
20000a78:	428b      	cmp	r3, r1
20000a7a:	d301      	bcc.n	20000a80 <__divsi3+0x184>
20000a7c:	00cb      	lsls	r3, r1, #3
20000a7e:	1ac0      	subs	r0, r0, r3
20000a80:	4152      	adcs	r2, r2
20000a82:	0883      	lsrs	r3, r0, #2
20000a84:	428b      	cmp	r3, r1
20000a86:	d301      	bcc.n	20000a8c <__divsi3+0x190>
20000a88:	008b      	lsls	r3, r1, #2
20000a8a:	1ac0      	subs	r0, r0, r3
20000a8c:	4152      	adcs	r2, r2
20000a8e:	d2d9      	bcs.n	20000a44 <__divsi3+0x148>
20000a90:	0843      	lsrs	r3, r0, #1
20000a92:	428b      	cmp	r3, r1
20000a94:	d301      	bcc.n	20000a9a <__divsi3+0x19e>
20000a96:	004b      	lsls	r3, r1, #1
20000a98:	1ac0      	subs	r0, r0, r3
20000a9a:	4152      	adcs	r2, r2
20000a9c:	1a41      	subs	r1, r0, r1
20000a9e:	d200      	bcs.n	20000aa2 <__divsi3+0x1a6>
20000aa0:	4601      	mov	r1, r0
20000aa2:	4663      	mov	r3, ip
20000aa4:	4152      	adcs	r2, r2
20000aa6:	105b      	asrs	r3, r3, #1
20000aa8:	4610      	mov	r0, r2
20000aaa:	d301      	bcc.n	20000ab0 <__divsi3+0x1b4>
20000aac:	4240      	negs	r0, r0
20000aae:	2b00      	cmp	r3, #0
20000ab0:	d500      	bpl.n	20000ab4 <__divsi3+0x1b8>
20000ab2:	4249      	negs	r1, r1
20000ab4:	4770      	bx	lr
20000ab6:	4663      	mov	r3, ip
20000ab8:	105b      	asrs	r3, r3, #1
20000aba:	d300      	bcc.n	20000abe <__divsi3+0x1c2>
20000abc:	4240      	negs	r0, r0
20000abe:	b501      	push	{r0, lr}
20000ac0:	2000      	movs	r0, #0
20000ac2:	f000 f805 	bl	20000ad0 <__aeabi_idiv0>
20000ac6:	bd02      	pop	{r1, pc}

20000ac8 <__aeabi_idivmod>:
20000ac8:	2900      	cmp	r1, #0
20000aca:	d0f8      	beq.n	20000abe <__divsi3+0x1c2>
20000acc:	e716      	b.n	200008fc <__divsi3>
20000ace:	4770      	bx	lr

20000ad0 <__aeabi_idiv0>:
20000ad0:	4770      	bx	lr
20000ad2:	46c0      	nop			; (mov r8, r8)

20000ad4 <ball_geometry>:
20000ad4:	0000000c 	andeq	r0, r0, ip
20000ad8:	00000004 	andeq	r0, r0, r4
20000adc:	00000004 	andeq	r0, r0, r4
20000ae0:	02000100 	andeq	r0, r0, #0, 2
20000ae4:	01010001 	tsteq	r1, r1
20000ae8:	03010201 	movweq	r0, #4609	; 0x1201
20000aec:	01020002 	tsteq	r2, r2
20000af0:	03020202 	movweq	r0, #8706	; 0x2202
20000af4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000b08 <ball>:
20000b08:	20000ad4 	ldrdcs	r0, [r0], -r4
	...
20000b14:	00000001 	andeq	r0, r0, r1
20000b18:	00000001 	andeq	r0, r0, r1
20000b1c:	2000062d 	andcs	r0, r0, sp, lsr #12
20000b20:	2000068d 	andcs	r0, r0, sp, lsl #13
20000b24:	200006ed 	andcs	r0, r0, sp, ror #13
20000b28:	20000781 	andcs	r0, r0, r1, lsl #15
20000b2c:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000b30:	200004fa 	strdcs	r0, [r0], -sl
20000b34:	20000504 	andcs	r0, r0, r4, lsl #10
20000b38:	2000050e 	andcs	r0, r0, lr, lsl #10
20000b3c:	20000518 	andcs	r0, r0, r8, lsl r5
20000b40:	20000522 	andcs	r0, r0, r2, lsr #10
20000b44:	2000052c 	andcs	r0, r0, ip, lsr #10
20000b48:	20000536 	andcs	r0, r0, r6, lsr r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000066d 	andeq	r0, r0, sp, ror #12
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001ec 	andeq	r0, r0, ip, ror #3
  10:	0000f90c 	andeq	pc, r0, ip, lsl #18
  14:	00013d00 	andeq	r3, r1, r0, lsl #26
	...
  24:	01cd0200 	biceq	r0, sp, r0, lsl #4
  28:	31010000 	mrscc	r0, (UNDEF: 1)
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	000000a7 	andeq	r0, r0, r7, lsr #1
  38:	00009a04 	andeq	r9, r0, r4, lsl #20
  3c:	33010200 	movwcc	r0, #4608	; 0x1200
  40:	00005c11 	andeq	r5, r0, r1, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250e3501 	strcs	r3, [lr, #-1281]	; 0xfffffaff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250e36 	eoreq	r0, r5, r6, lsr lr
  58:	00010000 	andeq	r0, r1, r0
  5c:	0000a102 	andeq	sl, r0, r2, lsl #2
  60:	04370100 	ldrteq	r0, [r7], #-256	; 0xffffff00
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	0001bb04 	andeq	fp, r1, r4, lsl #22
  6c:	39013400 	stmdbcc	r1, {sl, ip, sp}
  70:	0000a911 	andeq	sl, r0, r1, lsl r9
  74:	03030600 	movweq	r0, #13824	; 0x3600
  78:	3b010000 	blcc	40080 <startup-0x1ffbff80>
  7c:	0000a90a 	andeq	sl, r0, sl, lsl #18
  80:	d5060000 	strle	r0, [r6, #-0]
  84:	01000001 	tsteq	r0, r1
  88:	00a90a3c 	adceq	r0, r9, ip, lsr sl
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000001db 	ldrdeq	r0, [r0], -fp
  94:	a90a3d01 	stmdbge	sl, {r0, r8, sl, fp, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b00c3e01 	andlt	r3, ip, r1, lsl #28
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	ae070403 	cdpge	4, 0, cr0, cr7, cr3, {0}
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68043f01 	stmdavs	r4, {r0, r8, r9, sl, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0f3f01 	svcle	0x000f3f01
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02e50400 	rsceq	r0, r5, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	01681141 	cmneq	r8, r1, asr #2
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d31043 	sbcseq	r1, r3, r3, asr #32
  fc:	06000000 	streq	r0, [r0], -r0
 100:	00000067 	andeq	r0, r0, r7, rrx
 104:	a90a4401 	stmdbge	sl, {r0, sl, lr}
 108:	04000000 	streq	r0, [r0], #-0
 10c:	00006c06 	andeq	r6, r0, r6, lsl #24
 110:	0f440100 	svceq	0x00440100
 114:	000000a9 	andeq	r0, r0, r9, lsr #1
 118:	00bf0608 	adcseq	r0, pc, r8, lsl #12
 11c:	45010000 	strmi	r0, [r1, #-0]
 120:	0000a90a 	andeq	sl, r0, sl, lsl #18
 124:	c4060c00 	strgt	r0, [r6], #-3072	; 0xfffff400
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00a90f45 	adceq	r0, r9, r5, asr #30
 130:	06100000 	ldreq	r0, [r0], -r0
 134:	0000026d 	andeq	r0, r0, sp, ror #4
 138:	7e0e4601 	cfmadd32vc	mvax0, mvfx4, mvfx14, mvfx1
 13c:	14000001 	strne	r0, [r0], #-1
 140:	0001a306 	andeq	sl, r1, r6, lsl #6
 144:	0e470100 	dvfeqs	f0, f7, f0
 148:	0000019a 	muleq	r0, sl, r1
 14c:	00470618 	subeq	r0, r7, r8, lsl r6
 150:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 154:	0001b60e 	andeq	fp, r1, lr, lsl #12
 158:	b5061c00 	strlt	r1, [r6, #-3072]	; 0xfffff400
 15c:	01000000 	mrseq	r0, (UNDEF: 0)
 160:	01dc0e49 	bicseq	r0, ip, r9, asr #28
 164:	00200000 	eoreq	r0, r0, r0
 168:	0001730b 	andeq	r7, r1, fp, lsl #6
 16c:	01730c00 	cmneq	r3, r0, lsl #24
 170:	0a000000 	beq	178 <startup-0x1ffffe88>
 174:	00017904 	andeq	r7, r1, r4, lsl #18
 178:	032f0d00 			; <UNDEFINED> instruction: 0x032f0d00
 17c:	040a0000 	streq	r0, [sl], #-0
 180:	00000168 	andeq	r0, r0, r8, ror #2
 184:	00018f0b 	andeq	r8, r1, fp, lsl #30
 188:	018f0c00 	orreq	r0, pc, r0, lsl #24
 18c:	0a000000 	beq	194 <startup-0x1ffffe6c>
 190:	00019504 	andeq	r9, r1, r4, lsl #10
 194:	032f0d00 			; <UNDEFINED> instruction: 0x032f0d00
 198:	040a0000 	streq	r0, [sl], #-0
 19c:	00000184 	andeq	r0, r0, r4, lsl #3
 1a0:	0001ab0b 	andeq	sl, r1, fp, lsl #22
 1a4:	01ab0c00 			; <UNDEFINED> instruction: 0x01ab0c00
 1a8:	0a000000 	beq	1b0 <startup-0x1ffffe50>
 1ac:	0001b104 	andeq	fp, r1, r4, lsl #2
 1b0:	032f0d00 			; <UNDEFINED> instruction: 0x032f0d00
 1b4:	040a0000 	streq	r0, [sl], #-0
 1b8:	000001a0 	andeq	r0, r0, r0, lsr #3
 1bc:	0001d10b 	andeq	sp, r1, fp, lsl #2
 1c0:	01d10c00 	bicseq	r0, r1, r0, lsl #24
 1c4:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1c8:	0c000000 	stceq	0, cr0, [r0], {-0}
 1cc:	000000a9 	andeq	r0, r0, r9, lsr #1
 1d0:	d7040a00 	strle	r0, [r4, -r0, lsl #20]
 1d4:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d8:	0000032f 	andeq	r0, r0, pc, lsr #6
 1dc:	01bc040a 			; <UNDEFINED> instruction: 0x01bc040a
 1e0:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
 1e4:	01000003 	tsteq	r0, r3
 1e8:	00e5044a 	rsceq	r0, r5, sl, asr #8
 1ec:	27020000 	strcs	r0, [r2, -r0]
 1f0:	01000003 	tsteq	r0, r3
 1f4:	01fa0d4a 	mvnseq	r0, sl, asr #26
 1f8:	040a0000 	streq	r0, [sl], #-0
 1fc:	000000e5 	andeq	r0, r0, r5, ror #1
 200:	0000c90e 	andeq	ip, r0, lr, lsl #18
 204:	0b510100 	bleq	144060c <startup-0x1ebbf9f4>
 208:	000000c7 	andeq	r0, r0, r7, asr #1
 20c:	0ad40305 	beq	ff500e28 <ball+0xdf500320>
 210:	680f2000 	stmdavs	pc, {sp}	; <UNPREDICTABLE>
 214:	01000002 	tsteq	r0, r2
 218:	01e2105c 	mvneq	r1, ip, asr r0
 21c:	03050000 	movweq	r0, #20480	; 0x5000
 220:	20000b08 	andcs	r0, r0, r8, lsl #22
 224:	0001a910 	andeq	sl, r1, r0, lsl r9
 228:	01ee0100 	mvneq	r0, r0, lsl #2
 22c:	0007b806 	andeq	fp, r7, r6, lsl #16
 230:	00003020 	andeq	r3, r0, r0, lsr #32
 234:	4a9c0100 	bmi	fe70063c <ball+0xde6ffb34>
 238:	11000002 	tstne	r0, r2
 23c:	f0010070 			; <UNDEFINED> instruction: 0xf0010070
 240:	01ee0d01 	mvneq	r0, r1, lsl #26
 244:	91020000 	mrsls	r0, (UNDEF: 2)
 248:	ea120074 	b	480420 <startup-0x1fb7fbe0>
 24c:	01000000 	mrseq	r0, (UNDEF: 0)
 250:	a00601e9 	andge	r0, r6, r9, ror #3
 254:	18200007 	stmdane	r0!, {r0, r1, r2}
 258:	01000000 	mrseq	r0, (UNDEF: 0)
 25c:	0272139c 	rsbseq	r1, r2, #156, 6	; 0x70000002
 260:	e3010000 	movw	r0, #4096	; 0x1000
 264:	07800601 	streq	r0, [r0, r1, lsl #12]
 268:	00202000 	eoreq	r2, r0, r0
 26c:	9c010000 	stcls	0, cr0, [r1], {-0}
 270:	000002a3 	andeq	r0, r0, r3, lsr #5
 274:	01006f14 	tsteq	r0, r4, lsl pc
 278:	ee1f01e3 	muf<illegal precision>z	f0, f7, f3
 27c:	02000001 	andeq	r0, r0, #1
 280:	19157491 	ldmdbne	r5, {r0, r4, r7, sl, ip, sp, lr}
 284:	01000003 	tsteq	r0, r3
 288:	a92601e3 	stmdbge	r6!, {r0, r1, r5, r6, r7, r8}
 28c:	02000000 	andeq	r0, r0, #0
 290:	20157091 	mulscs	r5, r1, r0
 294:	01000003 	tsteq	r0, r3
 298:	a93201e3 	ldmdbge	r2!, {r0, r1, r5, r6, r7, r8}
 29c:	02000000 	andeq	r0, r0, #0
 2a0:	10006c91 	mulne	r0, r1, ip
 2a4:	0000030d 	andeq	r0, r0, sp, lsl #6
 2a8:	0601c801 	streq	ip, [r1], -r1, lsl #16
 2ac:	200006ec 	andcs	r0, r0, ip, ror #13
 2b0:	00000094 	muleq	r0, r4, r0
 2b4:	02c99c01 	sbceq	r9, r9, #256	; 0x100
 2b8:	6f140000 	svcvs	0x00140000
 2bc:	01c80100 	biceq	r0, r8, r0, lsl #2
 2c0:	0001ee1a 	andeq	lr, r1, sl, lsl lr
 2c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2c8:	02cc1000 	sbceq	r1, ip, #0
 2cc:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
 2d0:	068c0601 	streq	r0, [ip], r1, lsl #12
 2d4:	00602000 	rsbeq	r2, r0, r0
 2d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2dc:	000002fd 	strdeq	r0, [r0], -sp
 2e0:	01006f14 	tsteq	r0, r4, lsl pc
 2e4:	ee1b01be 	mrc	1, 0, r0, cr11, cr14, {5}
 2e8:	02000001 	andeq	r0, r0, #1
 2ec:	69116c91 	ldmdbvs	r1, {r0, r4, r7, sl, fp, sp, lr}
 2f0:	01c00100 	biceq	r0, r0, r0, lsl #2
 2f4:	0000a90d 	andeq	sl, r0, sp, lsl #18
 2f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2fc:	02ea1000 	rsceq	r1, sl, #0
 300:	b4010000 	strlt	r0, [r1], #-0
 304:	062c0601 	strteq	r0, [ip], -r1, lsl #12
 308:	00602000 	rsbeq	r2, r0, r0
 30c:	9c010000 	stcls	0, cr0, [r1], {-0}
 310:	00000331 	andeq	r0, r0, r1, lsr r3
 314:	01006f14 	tsteq	r0, r4, lsl pc
 318:	ee1a01b4 	mrc	1, 0, r0, cr10, cr4, {5}
 31c:	02000001 	andeq	r0, r0, #1
 320:	69116c91 	ldmdbvs	r1, {r0, r4, r7, sl, fp, sp, lr}
 324:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
 328:	0000a909 	andeq	sl, r0, r9, lsl #18
 32c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 330:	00881000 	addeq	r1, r8, r0
 334:	6c010000 	stcvs	0, cr0, [r1], {-0}
 338:	049a0601 	ldreq	r0, [sl], #1537	; 0x601
 33c:	01922000 	orrseq	r2, r2, r0
 340:	9c010000 	stcls	0, cr0, [r1], {-0}
 344:	000003c5 	andeq	r0, r0, r5, asr #7
 348:	01007814 	tsteq	r0, r4, lsl r8
 34c:	c015016c 	andsgt	r0, r5, ip, ror #2
 350:	02000000 	andeq	r0, r0, #0
 354:	79145c91 	ldmdbvc	r4, {r0, r4, r7, sl, fp, ip, lr}
 358:	016c0100 	cmneq	ip, r0, lsl #2
 35c:	0000c021 	andeq	ip, r0, r1, lsr #32
 360:	58910200 	ldmpl	r1, {r9}
 364:	74657314 	strbtvc	r7, [r5], #-788	; 0xfffffcec
 368:	016c0100 	cmneq	ip, r0, lsl #2
 36c:	0000c02d 	andeq	ip, r0, sp, lsr #32
 370:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 374:	0001c516 	andeq	ip, r1, r6, lsl r5
 378:	01730100 	cmneq	r3, r0, lsl #2
 37c:	0000250d 	andeq	r2, r0, sp, lsl #10
 380:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 384:	00005316 	andeq	r5, r0, r6, lsl r3
 388:	01730100 	cmneq	r3, r0, lsl #2
 38c:	00002516 	andeq	r2, r0, r6, lsl r5
 390:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 394:	00005e16 	andeq	r5, r0, r6, lsl lr
 398:	01730100 	cmneq	r3, r0, lsl #2
 39c:	00002522 	andeq	r2, r0, r2, lsr #10
 3a0:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 3a4:	00028316 	andeq	r8, r2, r6, lsl r3
 3a8:	01730100 	cmneq	r3, r0, lsl #2
 3ac:	0000252c 	andeq	r2, r0, ip, lsr #10
 3b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 3b4:	0000e516 	andeq	lr, r0, r6, lsl r5
 3b8:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
 3bc:	0000250d 	andeq	r2, r0, sp, lsl #10
 3c0:	63910200 	orrsvs	r0, r1, #0, 4
 3c4:	02af1000 	adceq	r1, pc, #0
 3c8:	5c010000 	stcpl	0, cr0, [r1], {-0}
 3cc:	04320601 	ldrteq	r0, [r2], #-1537	; 0xfffff9ff
 3d0:	00682000 	rsbeq	r2, r8, r0
 3d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3d8:	000003fd 	strdeq	r0, [r0], -sp
 3dc:	00008316 	andeq	r8, r0, r6, lsl r3
 3e0:	015e0100 	cmpeq	lr, r0, lsl #2
 3e4:	0003fd0a 	andeq	pc, r3, sl, lsl #26
 3e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3ec:	64646111 	strbtvs	r6, [r4], #-273	; 0xfffffeef
 3f0:	015e0100 	cmpeq	lr, r0, lsl #2
 3f4:	0003fd10 	andeq	pc, r3, r0, lsl sp	; <UNPREDICTABLE>
 3f8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 3fc:	08010300 	stmdaeq	r1, {r8, r9}
 400:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 404:	00017f17 	andeq	r7, r1, r7, lsl pc
 408:	01460100 	mrseq	r0, (UNDEF: 86)
 40c:	0003d006 	andeq	sp, r3, r6
 410:	00006220 	andeq	r6, r0, r0, lsr #4
 414:	189c0100 	ldmne	ip, {r8}
 418:	00000071 	andeq	r0, r0, r1, ror r0
 41c:	09014001 	stmdbeq	r1, {r0, lr}
 420:	00000025 	andeq	r0, r0, r5, lsr #32
 424:	200003a6 	andcs	r0, r0, r6, lsr #7
 428:	0000002a 	andeq	r0, r0, sl, lsr #32
 42c:	04439c01 	strbeq	r9, [r3], #-3073	; 0xfffff3ff
 430:	53150000 	tstpl	r5, #0
 434:	01000000 	mrseq	r0, (UNDEF: 0)
 438:	25230140 	strcs	r0, [r3, #-320]!	; 0xfffffec0
 43c:	02000000 	andeq	r0, r0, #0
 440:	10007791 	mulne	r0, r1, r7
 444:	00000289 	andeq	r0, r0, r9, lsl #5
 448:	06013401 	streq	r3, [r1], -r1, lsl #8
 44c:	20000360 	andcs	r0, r0, r0, ror #6
 450:	00000046 	andeq	r0, r0, r6, asr #32
 454:	047b9c01 	ldrbteq	r9, [fp], #-3073	; 0xfffff3ff
 458:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	25210134 	strcs	r0, [r1, #-308]!	; 0xfffffecc
 464:	02000000 	andeq	r0, r0, #0
 468:	53157791 	tstpl	r5, #38010880	; 0x2440000
 46c:	01000000 	mrseq	r0, (UNDEF: 0)
 470:	252f0134 	strcs	r0, [pc, #-308]!	; 344 <startup-0x1ffffcbc>
 474:	02000000 	andeq	r0, r0, #0
 478:	10007691 	mulne	r0, r1, r6
 47c:	0000002b 	andeq	r0, r0, fp, lsr #32
 480:	06012901 	streq	r2, [r1], -r1, lsl #18
 484:	20000320 	andcs	r0, r0, r0, lsr #6
 488:	00000040 	andeq	r0, r0, r0, asr #32
 48c:	04b39c01 	ldrteq	r9, [r3], #3073	; 0xc01
 490:	63140000 	tstvs	r4, #0
 494:	0100646d 	tsteq	r0, sp, ror #8
 498:	25240129 	strcs	r0, [r4, #-297]!	; 0xfffffed7
 49c:	02000000 	andeq	r0, r0, #0
 4a0:	53157791 	tstpl	r5, #38010880	; 0x2440000
 4a4:	01000000 	mrseq	r0, (UNDEF: 0)
 4a8:	25310129 	ldrcs	r0, [r1, #-297]!	; 0xfffffed7
 4ac:	02000000 	andeq	r0, r0, #0
 4b0:	10007691 	mulne	r0, r1, r6
 4b4:	000000d7 	ldrdeq	r0, [r0], -r7
 4b8:	06010c01 	streq	r0, [r1], -r1, lsl #24
 4bc:	200002a0 	andcs	r0, r0, r0, lsr #5
 4c0:	00000080 	andeq	r0, r0, r0, lsl #1
 4c4:	04eb9c01 	strbteq	r9, [fp], #3073	; 0xc01
 4c8:	41150000 	tstmi	r5, r0
 4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 4d0:	251c010c 	ldrcs	r0, [ip, #-268]	; 0xfffffef4
 4d4:	02000000 	andeq	r0, r0, #0
 4d8:	53157791 	tstpl	r5, #38010880	; 0x2440000
 4dc:	01000000 	mrseq	r0, (UNDEF: 0)
 4e0:	252b010c 	strcs	r0, [fp, #-268]!	; 0xfffffef4
 4e4:	02000000 	andeq	r0, r0, #0
 4e8:	19007691 	stmdbne	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 4ec:	000002f6 	strdeq	r0, [r0], -r6
 4f0:	2509e801 	strcs	lr, [r9, #-2049]	; 0xfffff7ff
 4f4:	10000000 	andne	r0, r0, r0
 4f8:	90200002 	eorls	r0, r0, r2
 4fc:	01000000 	mrseq	r0, (UNDEF: 0)
 500:	0005249c 	muleq	r5, ip, r4
 504:	00531a00 	subseq	r1, r3, r0, lsl #20
 508:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
 50c:	0000251e 	andeq	r2, r0, lr, lsl r5
 510:	6f910200 	svcvs	0x00910200
 514:	0001770f 	andeq	r7, r1, pc, lsl #14
 518:	0dea0100 	stfeqe	f0, [sl]
 51c:	00000025 	andeq	r0, r0, r5, lsr #32
 520:	00779102 	rsbseq	r9, r7, r2, lsl #2
 524:	00029c1b 	andeq	r9, r2, fp, lsl ip
 528:	06cf0100 	strbeq	r0, [pc], r0, lsl #2
 52c:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 530:	00000060 	andeq	r0, r0, r0, rrx
 534:	4c1c9c01 	ldcmi	12, cr9, [ip], {1}
 538:	01000000 	mrseq	r0, (UNDEF: 0)
 53c:	015406b8 	ldrheq	r0, [r4, #-104]	; 0xffffff98
 540:	005c2000 	subseq	r2, ip, r0
 544:	9c010000 	stcls	0, cr0, [r1], {-0}
 548:	0000055c 	andeq	r0, r0, ip, asr r5
 54c:	0000531a 	andeq	r5, r0, sl, lsl r3
 550:	20b80100 	adcscs	r0, r8, r0, lsl #2
 554:	00000025 	andeq	r0, r0, r5, lsr #32
 558:	00779102 	rsbseq	r9, r7, r2, lsl #2
 55c:	0001921d 	andeq	r9, r1, sp, lsl r2
 560:	06b30100 	ldrteq	r0, [r3], r0, lsl #2
 564:	20000120 	andcs	r0, r0, r0, lsr #2
 568:	00000034 	andeq	r0, r0, r4, lsr r0
 56c:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
 570:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
 574:	25b30100 	ldrcs	r0, [r3, #256]!	; 0x100
 578:	00000025 	andeq	r0, r0, r5, lsr #32
 57c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 580:	0000161d 	andeq	r1, r0, sp, lsl r6
 584:	06ae0100 	strteq	r0, [lr], r0, lsl #2
 588:	200000f6 	strdcs	r0, [r0], -r6
 58c:	0000002a 	andeq	r0, r0, sl, lsr #32
 590:	05a49c01 	streq	r9, [r4, #3073]!	; 0xc01
 594:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
 598:	23ae0100 			; <UNDEFINED> instruction: 0x23ae0100
 59c:	00000025 	andeq	r0, r0, r5, lsr #32
 5a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5a4:	0001e11c 	andeq	lr, r1, ip, lsl r1
 5a8:	06a00100 	strteq	r0, [r0], r0, lsl #2
 5ac:	200000be 	strhcs	r0, [r0], -lr
 5b0:	00000038 	andeq	r0, r0, r8, lsr r0
 5b4:	05e59c01 	strbeq	r9, [r5, #3073]!	; 0xc01
 5b8:	6d1e0000 	ldcvs	0, cr0, [lr, #-0]
 5bc:	a0010073 	andge	r0, r1, r3, ror r0
 5c0:	0000c01e 	andeq	ip, r0, lr, lsl r0
 5c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5c8:	0100691f 	tsteq	r0, pc, lsl r9
 5cc:	00a909a2 	adceq	r0, r9, r2, lsr #19
 5d0:	91020000 	mrsls	r0, (UNDEF: 2)
 5d4:	00f30f74 	rscseq	r0, r3, r4, ror pc
 5d8:	a2010000 	andge	r0, r1, #0
 5dc:	0000a90c 	andeq	sl, r0, ip, lsl #18
 5e0:	70910200 	addsvc	r0, r1, r0, lsl #4
 5e4:	008e1c00 	addeq	r1, lr, r0, lsl #24
 5e8:	8c010000 	stchi	0, cr0, [r1], {-0}
 5ec:	00007606 	andeq	r7, r0, r6, lsl #12
 5f0:	00004820 	andeq	r4, r0, r0, lsr #16
 5f4:	3a9c0100 	bcc	fe7009fc <ball+0xde6ffef4>
 5f8:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
 5fc:	01007375 	tsteq	r0, r5, ror r3
 600:	00c01f8c 	sbceq	r1, r0, ip, lsl #31
 604:	91020000 	mrsls	r0, (UNDEF: 2)
 608:	0069206c 	rsbeq	r2, r9, ip, rrx
 60c:	a9098e01 	stmdbge	r9, {r0, r9, sl, fp, pc}
 610:	0f000000 	svceq	0x00000000
 614:	000000f3 	strdeq	r0, [r0], -r3
 618:	a90c8e01 	stmdbge	ip, {r0, r9, sl, fp, pc}
 61c:	02000000 	andeq	r0, r0, #0
 620:	9c217491 	cfstrsls	mvf7, [r1], #-580	; 0xfffffdbc
 624:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 628:	1f000000 	svcne	0x00000000
 62c:	9a010069 	bls	407d8 <startup-0x1ffbf828>
 630:	0000a90e 	andeq	sl, r0, lr, lsl #18
 634:	70910200 	addsvc	r0, r1, r0, lsl #4
 638:	d91b0000 	ldmdble	fp, {}	; <UNPREDICTABLE>
 63c:	01000002 	tsteq	r0, r2
 640:	00640686 	rsbeq	r0, r4, r6, lsl #13
 644:	00122000 	andseq	r2, r2, r0
 648:	9c010000 	stcls	0, cr0, [r1], {-0}
 64c:	00000a1b 	andeq	r0, r0, fp, lsl sl
 650:	06700100 	ldrbteq	r0, [r0], -r0, lsl #2
 654:	20000010 	andcs	r0, r0, r0, lsl r0
 658:	00000054 	andeq	r0, r0, r4, asr r0
 65c:	c4229c01 	strtgt	r9, [r2], #-3073	; 0xfffff3ff
 660:	01000002 	tsteq	r0, r2
 664:	00000668 	andeq	r0, r0, r8, ror #12
 668:	000c2000 	andeq	r2, ip, r0
 66c:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	130d0000 	movwne	r0, #53248	; 0xd000
  98:	3c0e0300 	stccc	3, cr0, [lr], {-0}
  9c:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b0:	340f0000 	strcc	r0, [pc], #-0	; b8 <startup-0x1fffff48>
  b4:	3a0e0300 	bcc	380cbc <startup-0x1fc7f344>
  b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c0:	10000018 	andne	r0, r0, r8, lsl r0
  c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c8:	0b3a0e03 	bleq	e838dc <startup-0x1f17c724>
  cc:	0b39053b 	bleq	e415c0 <startup-0x1f1bea40>
  d0:	01111927 	tsteq	r1, r7, lsr #18
  d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  dc:	11000013 	tstne	r0, r3, lsl r0
  e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ec:	00001802 	andeq	r1, r0, r2, lsl #16
  f0:	3f002e12 	svccc	0x00002e12
  f4:	3a0e0319 	bcc	380d60 <startup-0x1fc7f2a0>
  f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	1119270b 	tstne	r9, fp, lsl #14
 100:	40061201 	andmi	r1, r6, r1, lsl #4
 104:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 108:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 10c:	03193f01 	tsteq	r9, #1, 30
 110:	3b0b3a0e 	blcc	2ce950 <startup-0x1fd316b0>
 114:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	97184006 	ldrls	r4, [r8, -r6]
 120:	13011942 	movwne	r1, #6466	; 0x1942
 124:	05140000 	ldreq	r0, [r4, #-0]
 128:	3a080300 	bcc	200d30 <startup-0x1fdff2d0>
 12c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 134:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 138:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 13c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 140:	13490b39 	movtne	r0, #39737	; 0x9b39
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	03003416 	movweq	r3, #1046	; 0x416
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 154:	00180213 	andseq	r0, r8, r3, lsl r2
 158:	002e1700 	eoreq	r1, lr, r0, lsl #14
 15c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 160:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 164:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 168:	06120111 			; <UNDEFINED> instruction: 0x06120111
 16c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 170:	18000019 	stmdane	r0, {r0, r3, r4}
 174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	0b39053b 	bleq	e41670 <startup-0x1f1be990>
 180:	13491927 	movtne	r1, #39207	; 0x9927
 184:	06120111 			; <UNDEFINED> instruction: 0x06120111
 188:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 18c:	00130119 	andseq	r0, r3, r9, lsl r1
 190:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 194:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 198:	0b3b0b3a 	bleq	ec2e88 <startup-0x1f13d178>
 19c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1a0:	01111349 	tsteq	r1, r9, asr #6
 1a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1ac:	1a000013 	bne	200 <startup-0x1ffffe00>
 1b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
 1b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1bc:	00001802 	andeq	r1, r0, r2, lsl #16
 1c0:	3f002e1b 	svccc	0x00002e1b
 1c4:	3a0e0319 	bcc	380e30 <startup-0x1fc7f1d0>
 1c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	1119270b 	tstne	r9, fp, lsl #14
 1d0:	40061201 	andmi	r1, r6, r1, lsl #4
 1d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d8:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 1dc:	03193f01 	tsteq	r9, #1, 30
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1ec:	96184006 	ldrls	r4, [r8], -r6
 1f0:	13011942 	movwne	r1, #6466	; 0x1942
 1f4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1f8:	03193f01 	tsteq	r9, #1, 30
 1fc:	3b0b3a0e 	blcc	2cea3c <startup-0x1fd315c4>
 200:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 204:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 208:	97184006 	ldrls	r4, [r8, -r6]
 20c:	13011942 	movwne	r1, #6466	; 0x1942
 210:	051e0000 	ldreq	r0, [lr, #-0]
 214:	3a080300 	bcc	200e1c <startup-0x1fdff1e4>
 218:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	1f000018 	svcne	0x00000018
 224:	08030034 	stmdaeq	r3, {r2, r4, r5}
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	13490b39 	movtne	r0, #39737	; 0x9b39
 230:	00001802 	andeq	r1, r0, r2, lsl #16
 234:	03003420 	movweq	r3, #1056	; 0x420
 238:	3b0b3a08 	blcc	2cea60 <startup-0x1fd315a0>
 23c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 240:	21000013 	tstcs	r0, r3, lsl r0
 244:	0111010b 	tsteq	r1, fp, lsl #2
 248:	00000612 	andeq	r0, r0, r2, lsl r6
 24c:	3f002e22 	svccc	0x00002e22
 250:	3a0e0319 	bcc	380ebc <startup-0x1fc7f144>
 254:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 258:	1119270b 	tstne	r9, fp, lsl #14
 25c:	40061201 	andmi	r1, r6, r1, lsl #4
 260:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 264:	Address 0x00000264 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007d8 	ldrdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007e8 	andcs	r0, r0, r8, ror #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000452 	andeq	r0, r0, r2, asr r4
   4:	005a0003 	subseq	r0, sl, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f472f3a 	svcvs	0x00472f3a
  20:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
  24:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  28:	6f442f65 	svcvs	0x00442f65
  2c:	656d756b 	strbvs	r7, [sp, #-1387]!	; 0xfffffa95
  30:	532f746e 			; <UNDEFINED> instruction: 0x532f746e
  34:	616c6f6b 	cmnvs	ip, fp, ror #30
  38:	2f55472f 	svccs	0x0055472f
  3c:	31544944 	cmpcc	r4, r4, asr #18
  40:	432f3135 			; <UNDEFINED> instruction: 0x432f3135
  44:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  48:	2f657469 	svccs	0x00657469
  4c:	6f747561 	svcvs	0x00747561
  50:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	00000001 	andeq	r0, r0, r1
  64:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  68:	00000002 	andeq	r0, r0, r2
  6c:	00e80320 	rsceq	r0, r8, r0, lsr #6
  70:	21211301 			; <UNDEFINED> instruction: 0x21211301
  74:	0302212f 	movweq	r2, #8495	; 0x212f
  78:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  7c:	02050001 	andeq	r0, r5, #1
  80:	20000010 	andcs	r0, r0, r0, lsl r0
  84:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
  88:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb8b <ball+0xdffff083>
  8c:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
  90:	20130531 	andscs	r0, r3, r1, lsr r5
  94:	93050531 	movwls	r0, #21809	; 0x5531
  98:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
  9c:	13053105 	movwne	r3, #20741	; 0x5105
  a0:	310b0520 	tstcc	fp, r0, lsr #10
  a4:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
  a8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  ac:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  b0:	0b052e01 	bleq	14b8bc <startup-0x1feb4744>
  b4:	01040200 	mrseq	r0, R12_usr
  b8:	2205053c 	andcs	r0, r5, #60, 10	; 0xf000000
  bc:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
  c0:	05932f01 	ldreq	r2, [r3, #3841]	; 0xf01
  c4:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff1c7 <ball+0xdfffe6bf>
  c8:	053f2f01 	ldreq	r2, [pc, #-3841]!	; fffff1cf <ball+0xdfffe6c7>
  cc:	0c054b15 			; <UNDEFINED> instruction: 0x0c054b15
  d0:	230b052e 	movwcs	r0, #46382	; 0xb52e
  d4:	05760705 	ldrbeq	r0, [r6, #-1797]!	; 0xfffff8fb
  d8:	0e053e0f 	cdpeq	14, 0, cr3, cr5, cr15, {0}
  dc:	2e050533 	mcrcs	5, 0, r0, cr5, cr3, {1}
  e0:	02000905 	andeq	r0, r0, #81920	; 0x14000
  e4:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
  e8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
  ec:	05052c03 	streq	r2, [r5, #-3075]	; 0xfffff3fd
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	4e01053c 	mcrmi	5, 0, r0, cr1, cr12, {1}
  f8:	4b0c055b 	blmi	30166c <startup-0x1fcfe994>
  fc:	053f0b05 	ldreq	r0, [pc, #-2821]!	; fffff5ff <ball+0xdfffeaf7>
 100:	0505310c 	streq	r3, [r5, #-268]	; 0xfffffef4
 104:	0009052e 	andeq	r0, r9, lr, lsr #10
 108:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 10c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 110:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 114:	04020005 	streq	r0, [r2], #-5
 118:	01053c01 	tsteq	r5, r1, lsl #24
 11c:	32055b4e 	andcc	r5, r5, #79872	; 0x13800
 120:	2e050567 	cfsh32cs	mvfx0, mvfx5, #55
 124:	05203205 	streq	r3, [r0, #-517]!	; 0xfffffdfb
 128:	01054a17 	tsteq	r5, r7, lsl sl
 12c:	1a057721 	bne	15ddb8 <startup-0x1fea2248>
 130:	3c2c0567 	cfstr32cc	mvfx0, [ip], #-412	; 0xfffffe64
 134:	05740505 	ldrbeq	r0, [r4, #-1285]!	; 0xfffffafb
 138:	1705202c 	strne	r2, [r5, -ip, lsr #32]
 13c:	21010520 	tstcs	r1, r0, lsr #10
 140:	67050577 	smlsdxvs	r5, r7, r5, r0
 144:	11030d05 	tstne	r3, r5, lsl #26
 148:	207203ba 	ldrhtcs	r0, [r2], #-58	; 0xffffffc6
 14c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 150:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 154:	0105223d 	tsteq	r5, sp, lsr r2
 158:	05054d22 	streq	r4, [r5, #-3362]	; 0xfffff2de
 15c:	26053e2f 	strcs	r3, [r5], -pc, lsr #28
 160:	30050520 	andcc	r0, r5, r0, lsr #10
 164:	09053e3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 168:	01040200 	mrseq	r0, R12_usr
 16c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 170:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 174:	00300104 	eorseq	r0, r0, r4, lsl #2
 178:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 17c:	02000f05 	andeq	r0, r0, #5, 30
 180:	052f0104 	streq	r0, [pc, #-260]!	; 84 <startup-0x1fffff7c>
 184:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
 188:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 18c:	01040200 	mrseq	r0, R12_usr
 190:	053e3020 	ldreq	r3, [lr, #-32]!	; 0xffffffe0
 194:	01052026 	tsteq	r5, r6, lsr #32
 198:	0505af2f 	streq	sl, [r5, #-3887]	; 0xfffff0d1
 19c:	26053e69 	strcs	r3, [r5], -r9, ror #28
 1a0:	30050520 	andcc	r0, r5, r0, lsr #10
 1a4:	3d30593e 			; <UNDEFINED> instruction: 0x3d30593e
 1a8:	05300f05 	ldreq	r0, [r0, #-3845]!	; 0xfffff0fb
 1ac:	0505200d 	streq	r2, [r5, #-13]
 1b0:	26053e4c 	strcs	r3, [r5], -ip, asr #28
 1b4:	30070520 	andcc	r0, r7, r0, lsr #10
 1b8:	3d4c0905 	vstrcc.16	s1, [ip, #-10]	; <UNPREDICTABLE>
 1bc:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 1c0:	053d4c09 	ldreq	r4, [sp, #-3081]!	; 0xfffff3f7
 1c4:	0105310c 	tsteq	r5, ip, lsl #2
 1c8:	0505cb3d 	streq	ip, [r5, #-2877]	; 0xfffff4c3
 1cc:	20170591 	mulscs	r7, r1, r5
 1d0:	593e0505 	ldmdbpl	lr!, {r0, r2, r8, sl}
 1d4:	052f3d30 	streq	r3, [pc, #-3376]!	; fffff4ac <ball+0xdfffe9a4>
 1d8:	08053e16 	stmdaeq	r5, {r1, r2, r4, r9, sl, fp, ip, sp}
 1dc:	2209054a 	andcs	r0, r9, #310378496	; 0x12800000
 1e0:	3016053d 	andscc	r0, r6, sp, lsr r5
 1e4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1e8:	053d2209 	ldreq	r2, [sp, #-521]!	; 0xfffffdf7
 1ec:	17053105 	strne	r3, [r5, -r5, lsl #2]
 1f0:	30050520 	andcc	r0, r5, r0, lsr #10
 1f4:	3d01053e 	cfstr32cc	mvfx0, [r1, #-248]	; 0xffffff08
 1f8:	91050577 	tstls	r5, r7, ror r5
 1fc:	053e5a3e 	ldreq	r5, [lr, #-2622]!	; 0xfffff5c2
 200:	054d8301 	strbeq	r8, [sp, #-769]	; 0xfffffcff
 204:	5a3e9105 	bpl	fa4620 <startup-0x1f05b9e0>
 208:	01053e3d 	tsteq	r5, sp, lsr lr
 20c:	0c054d83 	stceq	13, cr4, [r5], {131}	; 0x83
 210:	01055967 	tsteq	r5, r7, ror #18
 214:	05054d67 	streq	r4, [r5, #-3431]	; 0xfffff299
 218:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
 21c:	3e3e3d3e 	mrccc	13, 1, r3, cr14, cr14, {1}
 220:	4b4b4b4b 	blmi	12d2f54 <startup-0x1ed2d0ac>
 224:	3d01054c 	cfstr32cc	mvfx0, [r1, #-304]	; 0xfffffed0
 228:	3f0e053f 	svccc	0x000e053f
 22c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 230:	059f2209 	ldreq	r2, [pc, #521]	; 441 <startup-0x1ffffbbf>
 234:	09054c11 	stmdbeq	r5, {r0, r4, sl, fp, lr}
 238:	000d053c 	andeq	r0, sp, ip, lsr r5
 23c:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 240:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 244:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 248:	04020009 	streq	r0, [r2], #-9
 24c:	22055801 	andcs	r5, r5, #65536	; 0x10000
 250:	02040200 	andeq	r0, r4, #0, 4
 254:	00050545 	andeq	r0, r5, r5, asr #10
 258:	58010402 	stmdapl	r1, {r1, sl}
 25c:	0a030105 	beq	c0678 <startup-0x1ff3f988>
 260:	08055b4a 	stmdaeq	r5, {r1, r3, r6, r8, r9, fp, ip, lr}
 264:	00110567 	andseq	r0, r1, r7, ror #10
 268:	4a010402 	bmi	41278 <startup-0x1ffbed88>
 26c:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 270:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 274:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 278:	2f054a03 	svccs	0x00054a03
 27c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 280:	4f36054a 	svcmi	0x0036054a
 284:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 288:	0f05202c 	svceq	0x0005202c
 28c:	2e13053e 	mrccs	5, 0, r0, cr3, cr14, {1}
 290:	05931505 	ldreq	r1, [r3, #1285]	; 0x505
 294:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 298:	4b0d0522 	blmi	341728 <startup-0x1fcbe8d8>
 29c:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2a0:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2a4:	4b0d0522 	blmi	341734 <startup-0x1fcbe8cc>
 2a8:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2ac:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2b0:	4b0d0522 	blmi	341740 <startup-0x1fcbe8c0>
 2b4:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
 2b8:	15054b0d 	strne	r4, [r5, #-2829]	; 0xfffff4f3
 2bc:	4b0d0522 	blmi	34174c <startup-0x1fcbe8b4>
 2c0:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
 2c4:	08053e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, ip, sp}
 2c8:	3e140569 	cfmsc32cc	mvfx0, mvfx4, mvfx9
 2cc:	054b1505 	strbeq	r1, [fp, #-1285]	; 0xfffffafb
 2d0:	14052e12 	strne	r2, [r5], #-3602	; 0xfffff1ee
 2d4:	4b15055c 	blmi	54184c <startup-0x1fabe7b4>
 2d8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 2dc:	05c94d05 	strbeq	r4, [r9, #3333]	; 0xd05
 2e0:	0505ca14 	streq	ip, [r5, #-2580]	; 0xfffff5ec
 2e4:	ae080592 	mcrge	5, 0, r0, cr8, cr2, {4}
 2e8:	a23e1105 	eorsge	r1, lr, #1073741825	; 0x40000001
 2ec:	05930505 	ldreq	r0, [r3, #1285]	; 0x505
 2f0:	7fbf0309 	svcvc	0x00bf0309
 2f4:	030105ac 	movweq	r0, #5548	; 0x15ac
 2f8:	5b2000c2 	blpl	800608 <startup-0x1f7ff9f8>
 2fc:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
 300:	10052e05 	andne	r2, r5, r5, lsl #28
 304:	03040200 	movweq	r0, #16896	; 0x4200
 308:	001a0522 	andseq	r0, sl, r2, lsr #10
 30c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 310:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 314:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 318:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 31c:	09056603 	stmdbeq	r5, {r0, r1, r9, sl, sp, lr}
 320:	03040200 	movweq	r0, #16896	; 0x4200
 324:	002a0520 	eoreq	r0, sl, r0, lsr #10
 328:	20030402 	andcs	r0, r3, r2, lsl #8
 32c:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 330:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 334:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 338:	31052e03 	tstcc	r5, r3, lsl #28
 33c:	03040200 	movweq	r0, #16896	; 0x4200
 340:	00090566 	andeq	r0, r9, r6, ror #10
 344:	20030402 	andcs	r0, r3, r2, lsl #8
 348:	02002805 	andeq	r2, r0, #327680	; 0x50000
 34c:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 350:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 354:	1a053c01 	bne	14f360 <startup-0x1feb0ca0>
 358:	01040200 	mrseq	r0, R12_usr
 35c:	0005052e 	andeq	r0, r5, lr, lsr #10
 360:	20010402 	andcs	r0, r1, r2, lsl #8
 364:	5b400105 	blpl	1000780 <startup-0x1efff880>
 368:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
 36c:	10052e05 	andne	r2, r5, r5, lsl #28
 370:	03040200 	movweq	r0, #16896	; 0x4200
 374:	001a0522 	andseq	r0, sl, r2, lsr #10
 378:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 37c:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 380:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 384:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 388:	09056603 	stmdbeq	r5, {r0, r1, r9, sl, sp, lr}
 38c:	03040200 	movweq	r0, #16896	; 0x4200
 390:	002a0520 	eoreq	r0, sl, r0, lsr #10
 394:	20030402 	andcs	r0, r3, r2, lsl #8
 398:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 39c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3a0:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 3a4:	31052e03 	tstcc	r5, r3, lsl #28
 3a8:	03040200 	movweq	r0, #16896	; 0x4200
 3ac:	00090566 	andeq	r0, r9, r6, ror #10
 3b0:	20030402 	andcs	r0, r3, r2, lsl #8
 3b4:	02002805 	andeq	r2, r0, #327680	; 0x50000
 3b8:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 3bc:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 3c0:	1a053c01 	bne	14f3cc <startup-0x1feb0c34>
 3c4:	01040200 	mrseq	r0, R12_usr
 3c8:	0005052e 	andeq	r0, r5, lr, lsr #10
 3cc:	20010402 	andcs	r0, r1, r2, lsl #8
 3d0:	5b400105 	blpl	10007ec <startup-0x1efff814>
 3d4:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 3d8:	11054c0d 	tstne	r5, sp, lsl #24
 3dc:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
 3e0:	2e11053d 	mrccs	5, 0, r0, cr1, cr13, {1}
 3e4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 3e8:	07053e09 	streq	r3, [r5, -r9, lsl #28]
 3ec:	3011052e 	andscc	r0, r1, lr, lsr #10
 3f0:	055a0b05 	ldrbeq	r0, [sl, #-2821]	; 0xfffff4fb
 3f4:	1a052e15 	bne	14bc50 <startup-0x1feb43b0>
 3f8:	2012052e 	andscs	r0, r2, lr, lsr #10
 3fc:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 400:	09053011 	stmdbeq	r5, {r0, r4, ip, sp}
 404:	2e07055a 	cfrshl32cs	mvfx7, mvfx10, r0
 408:	05301105 	ldreq	r1, [r0, #-261]!	; 0xfffffefb
 40c:	15055a0b 	strne	r5, [r5, #-2571]	; 0xfffff5f5
 410:	2e1a052e 	cfmul64cs	mvdx0, mvdx10, mvdx14
 414:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 418:	11052007 	tstne	r5, r7
 41c:	5b050530 	blpl	1418e4 <startup-0x1febe71c>
 420:	4d4b0105 	stfmie	f0, [fp, #-20]	; 0xffffffec
 424:	3d670d05 	stclcc	13, cr0, [r7, #-20]!	; 0xffffffec
 428:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 42c:	052f0505 	streq	r0, [pc, #-1285]!	; ffffff2f <ball+0xdffff427>
 430:	01052026 	tsteq	r5, r6, lsr #32
 434:	0d05772f 	stceq	7, cr7, [r5, #-188]	; 0xffffff44
 438:	3005053d 	andcc	r0, r5, sp, lsr r5
 43c:	3306052f 	movwcc	r0, #25903	; 0x652f
 440:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 444:	0402000a 	streq	r0, [r2], #-10
 448:	09054e01 	stmdbeq	r5, {r0, r9, sl, fp, lr}
 44c:	01040200 	mrseq	r0, R12_usr
 450:	0007022e 	andeq	r0, r7, lr, lsr #4
 454:	Address 0x00000454 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
  14:	72670073 	rsbvc	r0, r7, #115	; 0x73
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  20:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  24:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  28:	67007465 	strvs	r7, [r0, -r5, ror #8]
  2c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  30:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  34:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  38:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffec4 <ball+0xdffff3bc>
  3c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  40:	6c617600 	stclvs	6, cr7, [r1], #-0
  44:	6d006575 	cfstr32vs	mvfx6, [r0, #-468]	; 0xfffffe2c
  48:	0065766f 	rsbeq	r7, r5, pc, ror #12
  4c:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  50:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  54:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  58:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  5c:	5f780072 	svcpl	0x00780072
  60:	69737966 	ldmdbvs	r3!, {r1, r2, r5, r6, r8, fp, ip, sp, lr}^
  64:	64006b73 	strvs	r6, [r0], #-2931	; 0xfffff48d
  68:	00787269 	rsbseq	r7, r8, r9, ror #4
  6c:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  70:	61726700 	cmnvs	r2, r0, lsl #14
  74:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  78:	6165725f 	cmnvs	r5, pc, asr r2
  7c:	61645f64 	cmnvs	r4, r4, ror #30
  80:	70006174 	andvc	r6, r0, r4, ror r1
  84:	00656761 	rsbeq	r6, r5, r1, ror #14
  88:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  8c:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
  90:	5f79616c 	svcpl	0x0079616c
  94:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  98:	5074006f 	rsbspl	r0, r4, pc, rrx
  9c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  a0:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  a4:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  a8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  ac:	2064656e 	rsbcs	r6, r4, lr, ror #10
  b0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  b4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  b8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
  bc:	70006465 	andvc	r6, r0, r5, ror #8
  c0:	0078736f 	rsbseq	r7, r8, pc, ror #6
  c4:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  c8:	6c616200 	sfmvs	f6, 2, [r1], #-0
  cc:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
  d0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  d4:	67007972 	smlsdxvs	r0, r2, r9, r7
  d8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  dc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  e4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  e8:	70610070 	rsbvc	r0, r1, r0, ror r0
  ec:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
  f0:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
  f4:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
  f8:	2f3a4400 	svccs	0x003a4400
  fc:	676f6f47 	strbvs	r6, [pc, -r7, asr #30]!
 100:	7244656c 	subvc	r6, r4, #108, 10	; 0x1b000000
 104:	2f657669 	svccs	0x00657669
 108:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 10c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 110:	6f6b532f 	svcvs	0x006b532f
 114:	472f616c 	strmi	r6, [pc, -ip, ror #2]!
 118:	49442f55 	stmdbmi	r4, {r0, r2, r4, r6, r8, r9, sl, fp, sp}^
 11c:	31353154 	teqcc	r5, r4, asr r1
 120:	646f432f 	strbtvs	r4, [pc], #-815	; 128 <startup-0x1ffffed8>
 124:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 128:	75612f65 	strbvc	r2, [r1, #-3941]!	; 0xfffff09b
 12c:	6f706f74 	svcvs	0x00706f74
 130:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
 134:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 138:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 13c:	5c3a4400 	cfldrspl	mvf4, [sl], #-0
 140:	676f6f47 	strbvs	r6, [pc, -r7, asr #30]!
 144:	7244656c 	subvc	r6, r4, #108, 10	; 0x1b000000
 148:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
 14c:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 150:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 154:	6f6b535c 	svcvs	0x006b535c
 158:	475c616c 	ldrbmi	r6, [ip, -ip, ror #2]
 15c:	49445c55 	stmdbmi	r4, {r0, r2, r4, r6, sl, fp, ip, lr}^
 160:	31353154 	teqcc	r5, r4, asr r1
 164:	646f435c 	strbtvs	r4, [pc], #-860	; 16c <startup-0x1ffffe94>
 168:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 16c:	75615c65 	strbvc	r5, [r1, #-3173]!	; 0xfffff39b
 170:	6f706f74 	svcvs	0x00706f74
 174:	7200676e 	andvc	r6, r0, #28835840	; 0x1b80000
 178:	765f7465 	ldrbvc	r7, [pc], -r5, ror #8
 17c:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 180:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 184:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 188:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 18c:	7a696c61 	bvc	1a5b318 <startup-0x1e5a4ce8>
 190:	72670065 	rsbvc	r0, r7, #101	; 0x65
 194:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 198:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 19c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1a0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 1a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1a8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 1ac:	6e75006e 	cdpvs	0, 7, cr0, cr5, cr14, {3}
 1b0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1b4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1b8:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 1bc:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; a8 <startup-0x1fffff58>
 1c0:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 1c4:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
 1c8:	6b73616d 	blvs	1cd8784 <startup-0x1e32787c>
 1cc:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1d0:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1d8 <startup-0x1ffffe28>
 1d4:	7a697300 	bvc	1a5cddc <startup-0x1e5a3224>
 1d8:	73007865 	movwvc	r7, #2149	; 0x865
 1dc:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1e0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1e4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 12a <startup-0x1ffffed6>	; <UNPREDICTABLE>
 1e8:	00696c69 	rsbeq	r6, r9, r9, ror #24
 1ec:	20554e47 	subscs	r4, r5, r7, asr #28
 1f0:	20393943 	eorscs	r3, r9, r3, asr #18
 1f4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 1f8:	30322031 	eorscc	r2, r2, r1, lsr r0
 1fc:	30313931 	eorscc	r3, r1, r1, lsr r9
 200:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 204:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 208:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 20c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 210:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 214:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 218:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 21c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 220:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 224:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 228:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 22c:	205d3939 	subscs	r3, sp, r9, lsr r9
 230:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 234:	20626d75 	rsbcs	r6, r2, r5, ror sp
 238:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 23c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 240:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 244:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 248:	616d2d20 	cmnvs	sp, r0, lsr #26
 24c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 250:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 254:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 258:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 25c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 260:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 264:	00393963 	eorseq	r3, r9, r3, ror #18
 268:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 26c:	61726400 	cmnvs	r2, r0, lsl #8
 270:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 274:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 278:	5f646565 	svcpl	0x00646565
 27c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 280:	69007463 	stmdbvs	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
 284:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 288:	61726700 	cmnvs	r2, r0, lsl #14
 28c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 290:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 294:	645f6574 	ldrbvs	r6, [pc], #-1396	; 29c <startup-0x1ffffd64>
 298:	00617461 	rsbeq	r7, r1, r1, ror #8
 29c:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a0:	5f636968 	svcpl	0x00636968
 2a4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 2a8:	6165725f 	cmnvs	r5, pc, asr r2
 2ac:	67007964 	strvs	r7, [r0, -r4, ror #18]
 2b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2b8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2bc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2c0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2c8:	00707574 	rsbseq	r7, r0, r4, ror r5
 2cc:	61656c63 	cmnvs	r5, r3, ror #24
 2d0:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2d4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2dc:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff983 <ball+0xdfffee7b>
 2e0:	736e3030 	cmnvc	lr, #48	; 0x30
 2e4:	624f7400 	subvs	r7, pc, #0, 8
 2e8:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 2ec:	6f5f7761 	svcvs	0x005f7761
 2f0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2f4:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2fc:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 300:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 304:	6f706d75 	svcvs	0x00706d75
 308:	73746e69 	cmnvc	r4, #1680	; 0x690
 30c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 310:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 314:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 318:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 31c:	00786465 	rsbseq	r6, r8, r5, ror #8
 320:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 324:	50007964 	andpl	r7, r0, r4, ror #18
 328:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 32c:	74005443 	strvc	r5, [r0], #-1091	; 0xfffffbbd
 330:	006a626f 	rsbeq	r6, sl, pc, ror #4

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000054 	andeq	r0, r0, r4, asr r0
  30:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  34:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  38:	41018e02 	tstmi	r1, r2, lsl #28
  3c:	0000070d 	andeq	r0, r0, sp, lsl #14
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000064 	andcs	r0, r0, r4, rrx
  4c:	00000012 	andeq	r0, r0, r2, lsl r0
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0000070d 	andeq	r0, r0, sp, lsl #14
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000076 	andcs	r0, r0, r6, ror r0
  68:	00000048 	andeq	r0, r0, r8, asr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000be 	strhcs	r0, [r0], -lr
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000f6 	strdcs	r0, [r0], -r6
  a8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000120 	andcs	r0, r0, r0, lsr #2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000154 	andcs	r0, r0, r4, asr r1
  e8:	0000005c 	andeq	r0, r0, ip, asr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000210 	andcs	r0, r0, r0, lsl r2
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002a0 	andcs	r0, r0, r0, lsr #5
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000320 	andcs	r0, r0, r0, lsr #6
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000360 	andcs	r0, r0, r0, ror #6
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003a6 	andcs	r0, r0, r6, lsr #7
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1c4:	00000062 	andeq	r0, r0, r2, rrx
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000432 	andcs	r0, r0, r2, lsr r4
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000049a 	mulcs	r0, sl, r4
 200:	00000192 	muleq	r0, r2, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	300e4101 	andcc	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	2000062c 	andcs	r0, r0, ip, lsr #12
 224:	00000060 	andeq	r0, r0, r0, rrx
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	2000068c 	andcs	r0, r0, ip, lsl #13
 244:	00000060 	andeq	r0, r0, r0, rrx
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006ec 	andcs	r0, r0, ip, ror #13
 264:	00000094 	muleq	r0, r4, r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000780 	andcs	r0, r0, r0, lsl #15
 284:	00000020 	andeq	r0, r0, r0, lsr #32
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	200007a0 	andcs	r0, r0, r0, lsr #15
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
 2c0:	00000030 	andeq	r0, r0, r0, lsr r0
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2dc:	7c010001 	stcvc	0, cr0, [r1], {1}
 2e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	000002d4 	ldrdeq	r0, [r0], -r4
 2ec:	200007e9 	andcs	r0, r0, r9, ror #15
 2f0:	0000010a 	andeq	r0, r0, sl, lsl #2
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2fc:	7c010001 	stcvc	0, cr0, [r1], {1}
 300:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 304:	0000000c 	andeq	r0, r0, ip
 308:	000002f4 	strdeq	r0, [r0], -r4
 30c:	200008fd 	strdcs	r0, [r0], -sp
 310:	000001cc 	andeq	r0, r0, ip, asr #3
