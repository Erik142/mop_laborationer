
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 };
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbc6 	bl	20000794 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *SYSTICK_CTRL = 0x0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles = 0x2A)
    *SYSTICK_LOAD = 0x2A;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	222a      	movs	r2, #42	; 0x2a
2000001e:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *SYSTICK_LOAD /= 0x2A; // Decrease delay if we're simulating
#endif
    
    *SYSTICK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *SYSTICK_CTRL = 0x5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*SYSTICK_CTRL & 0x10000) == 0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    
    *SYSTICK_CTRL = 0x0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(void)
{
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
    delay_250ns();
20000058:	f7ff ffda 	bl	20000010 <delay_250ns>
    delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
}
20000060:	46c0      	nop			; (mov r8, r8)
20000062:	46bd      	mov	sp, r7
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000066:	b580      	push	{r7, lr}
20000068:	b084      	sub	sp, #16
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	009b      	lsls	r3, r3, #2
20000072:	60bb      	str	r3, [r7, #8]
        limit = 50;
    }
#endif

    
    for (int i = 1; i <= limit; i++)
20000074:	2301      	movs	r3, #1
20000076:	60fb      	str	r3, [r7, #12]
20000078:	e004      	b.n	20000084 <delay_mikro+0x1e>
    {
        delay_250ns();
2000007a:	f7ff ffc9 	bl	20000010 <delay_250ns>
    for (int i = 1; i <= limit; i++)
2000007e:	68fb      	ldr	r3, [r7, #12]
20000080:	3301      	adds	r3, #1
20000082:	60fb      	str	r3, [r7, #12]
20000084:	68fa      	ldr	r2, [r7, #12]
20000086:	68bb      	ldr	r3, [r7, #8]
20000088:	429a      	cmp	r2, r3
2000008a:	ddf6      	ble.n	2000007a <delay_mikro+0x14>
    }
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46bd      	mov	sp, r7
20000090:	b004      	add	sp, #16
20000092:	bd80      	pop	{r7, pc}

20000094 <delay_mili>:

void delay_mili(unsigned int ms)
{
20000094:	b580      	push	{r7, lr}
20000096:	b084      	sub	sp, #16
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
2000009c:	23fa      	movs	r3, #250	; 0xfa
2000009e:	009b      	lsls	r3, r3, #2
200000a0:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
#endif
    
    for (i = 1; i <= limit; i++)
200000a2:	2301      	movs	r3, #1
200000a4:	60fb      	str	r3, [r7, #12]
200000a6:	e006      	b.n	200000b6 <delay_mili+0x22>
    {
        delay_mikro(ms);
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	0018      	movs	r0, r3
200000ac:	f7ff ffdb 	bl	20000066 <delay_mikro>
    for (i = 1; i <= limit; i++)
200000b0:	68fb      	ldr	r3, [r7, #12]
200000b2:	3301      	adds	r3, #1
200000b4:	60fb      	str	r3, [r7, #12]
200000b6:	68fa      	ldr	r2, [r7, #12]
200000b8:	68bb      	ldr	r3, [r7, #8]
200000ba:	429a      	cmp	r2, r3
200000bc:	ddf4      	ble.n	200000a8 <delay_mili+0x14>
    }
}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	46bd      	mov	sp, r7
200000c2:	b004      	add	sp, #16
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
200000d2:	4b06      	ldr	r3, [pc, #24]	; (200000ec <graphic_ctrl_bit_set+0x26>)
200000d4:	781a      	ldrb	r2, [r3, #0]
200000d6:	4905      	ldr	r1, [pc, #20]	; (200000ec <graphic_ctrl_bit_set+0x26>)
200000d8:	1dfb      	adds	r3, r7, #7
200000da:	781b      	ldrb	r3, [r3, #0]
200000dc:	4313      	orrs	r3, r2
200000de:	b2db      	uxtb	r3, r3
200000e0:	700b      	strb	r3, [r1, #0]
}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b002      	add	sp, #8
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
200000fc:	4b08      	ldr	r3, [pc, #32]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b25b      	sxtb	r3, r3
20000102:	1dfa      	adds	r2, r7, #7
20000104:	7812      	ldrb	r2, [r2, #0]
20000106:	b252      	sxtb	r2, r2
20000108:	43d2      	mvns	r2, r2
2000010a:	b252      	sxtb	r2, r2
2000010c:	4013      	ands	r3, r2
2000010e:	b25a      	sxtb	r2, r3
20000110:	4b03      	ldr	r3, [pc, #12]	; (20000120 <graphic_ctrl_bit_clear+0x30>)
20000112:	b2d2      	uxtb	r2, r2
20000114:	701a      	strb	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b002      	add	sp, #8
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <select_controller>:

void select_controller(uint8_t controller)
{
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
    switch(controller)
20000130:	1dfb      	adds	r3, r7, #7
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	2b08      	cmp	r3, #8
20000136:	d00c      	beq.n	20000152 <select_controller+0x2e>
20000138:	dc02      	bgt.n	20000140 <select_controller+0x1c>
2000013a:	2b00      	cmp	r3, #0
2000013c:	d005      	beq.n	2000014a <select_controller+0x26>
            break;
        case (B_CS1 | B_CS2):
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
        default:
            break;
2000013e:	e01a      	b.n	20000176 <select_controller+0x52>
    switch(controller)
20000140:	2b10      	cmp	r3, #16
20000142:	d00d      	beq.n	20000160 <select_controller+0x3c>
20000144:	2b18      	cmp	r3, #24
20000146:	d012      	beq.n	2000016e <select_controller+0x4a>
            break;
20000148:	e015      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000014a:	2018      	movs	r0, #24
2000014c:	f7ff ffd0 	bl	200000f0 <graphic_ctrl_bit_clear>
            break;
20000150:	e011      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000152:	2008      	movs	r0, #8
20000154:	f7ff ffb7 	bl	200000c6 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000158:	2010      	movs	r0, #16
2000015a:	f7ff ffc9 	bl	200000f0 <graphic_ctrl_bit_clear>
            break;
2000015e:	e00a      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000160:	2008      	movs	r0, #8
20000162:	f7ff ffc5 	bl	200000f0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000166:	2010      	movs	r0, #16
20000168:	f7ff ffad 	bl	200000c6 <graphic_ctrl_bit_set>
            break;
2000016c:	e003      	b.n	20000176 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000016e:	2018      	movs	r0, #24
20000170:	f7ff ffa9 	bl	200000c6 <graphic_ctrl_bit_set>
            break;
20000174:	46c0      	nop			; (mov r8, r8)
    }
}
20000176:	46c0      	nop			; (mov r8, r8)
20000178:	46bd      	mov	sp, r7
2000017a:	b002      	add	sp, #8
2000017c:	bd80      	pop	{r7, pc}

2000017e <graphic_wait_ready>:

void graphic_wait_ready(void)
{
2000017e:	b580      	push	{r7, lr}
20000180:	b082      	sub	sp, #8
20000182:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ffb3 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
2000018a:	4b14      	ldr	r3, [pc, #80]	; (200001dc <graphic_wait_ready+0x5e>)
2000018c:	4a14      	ldr	r2, [pc, #80]	; (200001e0 <graphic_wait_ready+0x62>)
2000018e:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_RS);
20000190:	2001      	movs	r0, #1
20000192:	f7ff ffad 	bl	200000f0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000196:	2002      	movs	r0, #2
20000198:	f7ff ff95 	bl	200000c6 <graphic_ctrl_bit_set>
    
    delay_500ns();
2000019c:	f7ff ff5a 	bl	20000054 <delay_500ns>
    
    unsigned char busy;
    
    do
    {
        graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff90 	bl	200000c6 <graphic_ctrl_bit_set>
        delay_500ns();
200001a6:	f7ff ff55 	bl	20000054 <delay_500ns>
        
        busy = *GRAPHIC_DATA_IDR & LCD_BUSY;
200001aa:	4b0e      	ldr	r3, [pc, #56]	; (200001e4 <graphic_wait_ready+0x66>)
200001ac:	781a      	ldrb	r2, [r3, #0]
200001ae:	1dfb      	adds	r3, r7, #7
200001b0:	217f      	movs	r1, #127	; 0x7f
200001b2:	438a      	bics	r2, r1
200001b4:	701a      	strb	r2, [r3, #0]
        
        graphic_ctrl_bit_clear(B_E);
200001b6:	2040      	movs	r0, #64	; 0x40
200001b8:	f7ff ff9a 	bl	200000f0 <graphic_ctrl_bit_clear>
        delay_500ns();
200001bc:	f7ff ff4a 	bl	20000054 <delay_500ns>
    } while(busy != 0);
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	2b00      	cmp	r3, #0
200001c6:	d1eb      	bne.n	200001a0 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(B_E);
200001c8:	2040      	movs	r0, #64	; 0x40
200001ca:	f7ff ff7c 	bl	200000c6 <graphic_ctrl_bit_set>
    
    * ( (unsigned long *) portModer) = 0x55555555;
200001ce:	4b03      	ldr	r3, [pc, #12]	; (200001dc <graphic_wait_ready+0x5e>)
200001d0:	4a05      	ldr	r2, [pc, #20]	; (200001e8 <graphic_wait_ready+0x6a>)
200001d2:	601a      	str	r2, [r3, #0]
}
200001d4:	46c0      	nop			; (mov r8, r8)
200001d6:	46bd      	mov	sp, r7
200001d8:	b002      	add	sp, #8
200001da:	bd80      	pop	{r7, pc}
200001dc:	40021000 	andmi	r1, r2, r0
200001e0:	00005555 	andeq	r5, r0, r5, asr r5
200001e4:	40021011 	andmi	r1, r2, r1, lsl r0
200001e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001ec <graphic_read>:

uint8_t graphic_read(uint8_t controller)
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b084      	sub	sp, #16
200001f0:	af00      	add	r7, sp, #0
200001f2:	0002      	movs	r2, r0
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val;
    
    graphic_ctrl_bit_clear(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff79 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
200001fe:	4b1b      	ldr	r3, [pc, #108]	; (2000026c <graphic_read+0x80>)
20000200:	4a1b      	ldr	r2, [pc, #108]	; (20000270 <graphic_read+0x84>)
20000202:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_RS | B_RW);
20000204:	2003      	movs	r0, #3
20000206:	f7ff ff5e 	bl	200000c6 <graphic_ctrl_bit_set>
    
    select_controller(controller);
2000020a:	1dfb      	adds	r3, r7, #7
2000020c:	781b      	ldrb	r3, [r3, #0]
2000020e:	0018      	movs	r0, r3
20000210:	f7ff ff88 	bl	20000124 <select_controller>
    delay_500ns();
20000214:	f7ff ff1e 	bl	20000054 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff ff54 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
2000021e:	f7ff ff19 	bl	20000054 <delay_500ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
20000222:	4a14      	ldr	r2, [pc, #80]	; (20000274 <graphic_read+0x88>)
20000224:	230f      	movs	r3, #15
20000226:	18fb      	adds	r3, r7, r3
20000228:	7812      	ldrb	r2, [r2, #0]
2000022a:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff5f 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x55555555;
20000232:	4b0e      	ldr	r3, [pc, #56]	; (2000026c <graphic_read+0x80>)
20000234:	4a10      	ldr	r2, [pc, #64]	; (20000278 <graphic_read+0x8c>)
20000236:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1)
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	2b08      	cmp	r3, #8
2000023e:	d104      	bne.n	2000024a <graphic_read+0x5e>
    {
        select_controller(B_CS1);
20000240:	2008      	movs	r0, #8
20000242:	f7ff ff6f 	bl	20000124 <select_controller>
        graphic_wait_ready();
20000246:	f7ff ff9a 	bl	2000017e <graphic_wait_ready>
    }
    if(controller == B_CS2)
2000024a:	1dfb      	adds	r3, r7, #7
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	2b10      	cmp	r3, #16
20000250:	d104      	bne.n	2000025c <graphic_read+0x70>
    {
        select_controller(B_CS2);
20000252:	2010      	movs	r0, #16
20000254:	f7ff ff66 	bl	20000124 <select_controller>
        graphic_wait_ready();
20000258:	f7ff ff91 	bl	2000017e <graphic_wait_ready>
    }
    
    return ret_val;
2000025c:	230f      	movs	r3, #15
2000025e:	18fb      	adds	r3, r7, r3
20000260:	781b      	ldrb	r3, [r3, #0]
}
20000262:	0018      	movs	r0, r3
20000264:	46bd      	mov	sp, r7
20000266:	b004      	add	sp, #16
20000268:	bd80      	pop	{r7, pc}
2000026a:	46c0      	nop			; (mov r8, r8)
2000026c:	40021000 	andmi	r1, r2, r0
20000270:	00005555 	andeq	r5, r0, r5, asr r5
20000274:	40021011 	andmi	r1, r2, r1, lsl r0
20000278:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000027c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
2000027c:	b580      	push	{r7, lr}
2000027e:	b082      	sub	sp, #8
20000280:	af00      	add	r7, sp, #0
20000282:	0002      	movs	r2, r0
20000284:	1dfb      	adds	r3, r7, #7
20000286:	701a      	strb	r2, [r3, #0]
20000288:	1dbb      	adds	r3, r7, #6
2000028a:	1c0a      	adds	r2, r1, #0
2000028c:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_DATA_ODR = value;
2000028e:	4a1a      	ldr	r2, [pc, #104]	; (200002f8 <graphic_write+0x7c>)
20000290:	1dfb      	adds	r3, r7, #7
20000292:	781b      	ldrb	r3, [r3, #0]
20000294:	7013      	strb	r3, [r2, #0]
    
    select_controller(controller);
20000296:	1dbb      	adds	r3, r7, #6
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff42 	bl	20000124 <select_controller>
    delay_500ns();
200002a0:	f7ff fed8 	bl	20000054 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
200002a4:	2040      	movs	r0, #64	; 0x40
200002a6:	f7ff ff0e 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
200002aa:	f7ff fed3 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200002ae:	2040      	movs	r0, #64	; 0x40
200002b0:	f7ff ff1e 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    if ( (controller & B_CS1) )
200002b4:	1dbb      	adds	r3, r7, #6
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	2208      	movs	r2, #8
200002ba:	4013      	ands	r3, r2
200002bc:	d004      	beq.n	200002c8 <graphic_write+0x4c>
    {
        select_controller(B_CS1);
200002be:	2008      	movs	r0, #8
200002c0:	f7ff ff30 	bl	20000124 <select_controller>
        graphic_wait_ready();
200002c4:	f7ff ff5b 	bl	2000017e <graphic_wait_ready>
    }
    if ( (controller & B_CS2) )
200002c8:	1dbb      	adds	r3, r7, #6
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	2210      	movs	r2, #16
200002ce:	4013      	ands	r3, r2
200002d0:	d004      	beq.n	200002dc <graphic_write+0x60>
    {
        select_controller(B_CS2);
200002d2:	2010      	movs	r0, #16
200002d4:	f7ff ff26 	bl	20000124 <select_controller>
        graphic_wait_ready();
200002d8:	f7ff ff51 	bl	2000017e <graphic_wait_ready>
    }
    
    *GRAPHIC_DATA_ODR = 0x0;
200002dc:	4b06      	ldr	r3, [pc, #24]	; (200002f8 <graphic_write+0x7c>)
200002de:	2200      	movs	r2, #0
200002e0:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff feef 	bl	200000c6 <graphic_ctrl_bit_set>
    
    select_controller(0);
200002e8:	2000      	movs	r0, #0
200002ea:	f7ff ff1b 	bl	20000124 <select_controller>
}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b002      	add	sp, #8
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021015 	andmi	r1, r2, r5, lsl r0

200002fc <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller)
{
200002fc:	b580      	push	{r7, lr}
200002fe:	b082      	sub	sp, #8
20000300:	af00      	add	r7, sp, #0
20000302:	0002      	movs	r2, r0
20000304:	1dfb      	adds	r3, r7, #7
20000306:	701a      	strb	r2, [r3, #0]
20000308:	1dbb      	adds	r3, r7, #6
2000030a:	1c0a      	adds	r2, r1, #0
2000030c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff feee 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	0018      	movs	r0, r3
2000031a:	f7ff ff03 	bl	20000124 <select_controller>
    
    graphic_ctrl_bit_clear(B_RS | B_RW);
2000031e:	2003      	movs	r0, #3
20000320:	f7ff fee6 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    graphic_write(cmd, controller);
20000324:	1dbb      	adds	r3, r7, #6
20000326:	781a      	ldrb	r2, [r3, #0]
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	0011      	movs	r1, r2
2000032e:	0018      	movs	r0, r3
20000330:	f7ff ffa4 	bl	2000027c <graphic_write>
}
20000334:	46c0      	nop			; (mov r8, r8)
20000336:	46bd      	mov	sp, r7
20000338:	b002      	add	sp, #8
2000033a:	bd80      	pop	{r7, pc}

2000033c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	1c0a      	adds	r2, r1, #0
2000034c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000034e:	2040      	movs	r0, #64	; 0x40
20000350:	f7ff fece 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0018      	movs	r0, r3
2000035a:	f7ff fee3 	bl	20000124 <select_controller>
    
    graphic_ctrl_bit_set(B_RS);
2000035e:	2001      	movs	r0, #1
20000360:	f7ff feb1 	bl	200000c6 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000364:	2002      	movs	r0, #2
20000366:	f7ff fec3 	bl	200000f0 <graphic_ctrl_bit_clear>
    
    graphic_write(data,controller);
2000036a:	1dbb      	adds	r3, r7, #6
2000036c:	781a      	ldrb	r2, [r3, #0]
2000036e:	1dfb      	adds	r3, r7, #7
20000370:	781b      	ldrb	r3, [r3, #0]
20000372:	0011      	movs	r1, r2
20000374:	0018      	movs	r0, r3
20000376:	f7ff ff81 	bl	2000027c <graphic_write>
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b002      	add	sp, #8
20000380:	bd80      	pop	{r7, pc}

20000382 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
20000382:	b580      	push	{r7, lr}
20000384:	b082      	sub	sp, #8
20000386:	af00      	add	r7, sp, #0
20000388:	0002      	movs	r2, r0
2000038a:	1dfb      	adds	r3, r7, #7
2000038c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000038e:	1dfb      	adds	r3, r7, #7
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	0018      	movs	r0, r3
20000394:	f7ff ff2a 	bl	200001ec <graphic_read>
    return graphic_read(controller);
20000398:	1dfb      	adds	r3, r7, #7
2000039a:	781b      	ldrb	r3, [r3, #0]
2000039c:	0018      	movs	r0, r3
2000039e:	f7ff ff25 	bl	200001ec <graphic_read>
200003a2:	0003      	movs	r3, r0
}
200003a4:	0018      	movs	r0, r3
200003a6:	46bd      	mov	sp, r7
200003a8:	b002      	add	sp, #8
200003aa:	bd80      	pop	{r7, pc}

200003ac <graphic_initialize>:

void graphic_initialize(void)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	af00      	add	r7, sp, #0
    //graphic_ctrl_bit_clear(B_SELECT);
    //delay_mikro(10);
    
    graphic_ctrl_bit_set(B_E);
200003b0:	2040      	movs	r0, #64	; 0x40
200003b2:	f7ff fe88 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_mikro(10);
200003b6:	200a      	movs	r0, #10
200003b8:	f7ff fe55 	bl	20000066 <delay_mikro>
    
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003bc:	2078      	movs	r0, #120	; 0x78
200003be:	f7ff fe97 	bl	200000f0 <graphic_ctrl_bit_clear>
    delay_mili(30);
200003c2:	201e      	movs	r0, #30
200003c4:	f7ff fe66 	bl	20000094 <delay_mili>
    
    graphic_ctrl_bit_set(B_RST);
200003c8:	2020      	movs	r0, #32
200003ca:	f7ff fe7c 	bl	200000c6 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003ce:	2118      	movs	r1, #24
200003d0:	203e      	movs	r0, #62	; 0x3e
200003d2:	f7ff ff93 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003d6:	2118      	movs	r1, #24
200003d8:	203f      	movs	r0, #63	; 0x3f
200003da:	f7ff ff8f 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200003de:	2118      	movs	r1, #24
200003e0:	20c0      	movs	r0, #192	; 0xc0
200003e2:	f7ff ff8b 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200003e6:	2118      	movs	r1, #24
200003e8:	2040      	movs	r0, #64	; 0x40
200003ea:	f7ff ff87 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200003ee:	2118      	movs	r1, #24
200003f0:	20b8      	movs	r0, #184	; 0xb8
200003f2:	f7ff ff83 	bl	200002fc <graphic_write_command>
    
    select_controller(0);
200003f6:	2000      	movs	r0, #0
200003f8:	f7ff fe94 	bl	20000124 <select_controller>
}
200003fc:	46c0      	nop			; (mov r8, r8)
200003fe:	46bd      	mov	sp, r7
20000400:	bd80      	pop	{r7, pc}

20000402 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000402:	b580      	push	{r7, lr}
20000404:	b082      	sub	sp, #8
20000406:	af00      	add	r7, sp, #0
    char page, add;
    
    for(page = 0; page <= 7; page++)
20000408:	1dfb      	adds	r3, r7, #7
2000040a:	2200      	movs	r2, #0
2000040c:	701a      	strb	r2, [r3, #0]
2000040e:	e023      	b.n	20000458 <graphic_clear_screen+0x56>
    {
        graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000410:	1dfb      	adds	r3, r7, #7
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	2248      	movs	r2, #72	; 0x48
20000416:	4252      	negs	r2, r2
20000418:	4313      	orrs	r3, r2
2000041a:	b2db      	uxtb	r3, r3
2000041c:	2118      	movs	r1, #24
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ff6c 	bl	200002fc <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000424:	2118      	movs	r1, #24
20000426:	2040      	movs	r0, #64	; 0x40
20000428:	f7ff ff68 	bl	200002fc <graphic_write_command>
        
        for(add = 0; add <= 63; add++)
2000042c:	1dbb      	adds	r3, r7, #6
2000042e:	2200      	movs	r2, #0
20000430:	701a      	strb	r2, [r3, #0]
20000432:	e008      	b.n	20000446 <graphic_clear_screen+0x44>
        {
            graphic_write_data(0, B_CS1 | B_CS2);
20000434:	2118      	movs	r1, #24
20000436:	2000      	movs	r0, #0
20000438:	f7ff ff80 	bl	2000033c <graphic_write_data>
        for(add = 0; add <= 63; add++)
2000043c:	1dbb      	adds	r3, r7, #6
2000043e:	781a      	ldrb	r2, [r3, #0]
20000440:	1dbb      	adds	r3, r7, #6
20000442:	3201      	adds	r2, #1
20000444:	701a      	strb	r2, [r3, #0]
20000446:	1dbb      	adds	r3, r7, #6
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	2b3f      	cmp	r3, #63	; 0x3f
2000044c:	d9f2      	bls.n	20000434 <graphic_clear_screen+0x32>
    for(page = 0; page <= 7; page++)
2000044e:	1dfb      	adds	r3, r7, #7
20000450:	781a      	ldrb	r2, [r3, #0]
20000452:	1dfb      	adds	r3, r7, #7
20000454:	3201      	adds	r2, #1
20000456:	701a      	strb	r2, [r3, #0]
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	2b07      	cmp	r3, #7
2000045e:	d9d7      	bls.n	20000410 <graphic_clear_screen+0xe>
        }
    }
}
20000460:	46c0      	nop			; (mov r8, r8)
20000462:	46bd      	mov	sp, r7
20000464:	b002      	add	sp, #8
20000466:	bd80      	pop	{r7, pc}

20000468 <pixel>:

void pixel(unsigned x, unsigned y, unsigned set)
{
20000468:	b5f0      	push	{r4, r5, r6, r7, lr}
2000046a:	b087      	sub	sp, #28
2000046c:	af00      	add	r7, sp, #0
2000046e:	60f8      	str	r0, [r7, #12]
20000470:	60b9      	str	r1, [r7, #8]
20000472:	607a      	str	r2, [r7, #4]
    if (x > 128 || x == 0 || y > 64 || y == 0 || set > 1)
20000474:	68fb      	ldr	r3, [r7, #12]
20000476:	2b80      	cmp	r3, #128	; 0x80
20000478:	d900      	bls.n	2000047c <pixel+0x14>
2000047a:	e0b8      	b.n	200005ee <pixel+0x186>
2000047c:	68fb      	ldr	r3, [r7, #12]
2000047e:	2b00      	cmp	r3, #0
20000480:	d100      	bne.n	20000484 <pixel+0x1c>
20000482:	e0b4      	b.n	200005ee <pixel+0x186>
20000484:	68bb      	ldr	r3, [r7, #8]
20000486:	2b40      	cmp	r3, #64	; 0x40
20000488:	d900      	bls.n	2000048c <pixel+0x24>
2000048a:	e0b0      	b.n	200005ee <pixel+0x186>
2000048c:	68bb      	ldr	r3, [r7, #8]
2000048e:	2b00      	cmp	r3, #0
20000490:	d100      	bne.n	20000494 <pixel+0x2c>
20000492:	e0ac      	b.n	200005ee <pixel+0x186>
20000494:	687b      	ldr	r3, [r7, #4]
20000496:	2b01      	cmp	r3, #1
20000498:	d900      	bls.n	2000049c <pixel+0x34>
2000049a:	e0a8      	b.n	200005ee <pixel+0x186>
    {
        return;
    }
    
    uint8_t bitmask, controller, x_fysisk, index = (y-1)/8;
2000049c:	68bb      	ldr	r3, [r7, #8]
2000049e:	3b01      	subs	r3, #1
200004a0:	08da      	lsrs	r2, r3, #3
200004a2:	2314      	movs	r3, #20
200004a4:	18fb      	adds	r3, r7, r3
200004a6:	701a      	strb	r2, [r3, #0]
    
    switch ((y-1) % 8)
200004a8:	68bb      	ldr	r3, [r7, #8]
200004aa:	3b01      	subs	r3, #1
200004ac:	2207      	movs	r2, #7
200004ae:	4013      	ands	r3, r2
200004b0:	2b07      	cmp	r3, #7
200004b2:	d82c      	bhi.n	2000050e <pixel+0xa6>
200004b4:	009a      	lsls	r2, r3, #2
200004b6:	4b50      	ldr	r3, [pc, #320]	; (200005f8 <pixel+0x190>)
200004b8:	18d3      	adds	r3, r2, r3
200004ba:	681b      	ldr	r3, [r3, #0]
200004bc:	469f      	mov	pc, r3
    {
        case 0:
            bitmask = 0x01;
200004be:	2317      	movs	r3, #23
200004c0:	18fb      	adds	r3, r7, r3
200004c2:	2201      	movs	r2, #1
200004c4:	701a      	strb	r2, [r3, #0]
            break;
200004c6:	e022      	b.n	2000050e <pixel+0xa6>
        case 1:
            bitmask = 0x02;
200004c8:	2317      	movs	r3, #23
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	2202      	movs	r2, #2
200004ce:	701a      	strb	r2, [r3, #0]
            break;
200004d0:	e01d      	b.n	2000050e <pixel+0xa6>
        case 2:
            bitmask = 0x04;
200004d2:	2317      	movs	r3, #23
200004d4:	18fb      	adds	r3, r7, r3
200004d6:	2204      	movs	r2, #4
200004d8:	701a      	strb	r2, [r3, #0]
            break;
200004da:	e018      	b.n	2000050e <pixel+0xa6>
        case 3:
            bitmask = 0x08;
200004dc:	2317      	movs	r3, #23
200004de:	18fb      	adds	r3, r7, r3
200004e0:	2208      	movs	r2, #8
200004e2:	701a      	strb	r2, [r3, #0]
            break;
200004e4:	e013      	b.n	2000050e <pixel+0xa6>
        case 4:
            bitmask = 0x10;
200004e6:	2317      	movs	r3, #23
200004e8:	18fb      	adds	r3, r7, r3
200004ea:	2210      	movs	r2, #16
200004ec:	701a      	strb	r2, [r3, #0]
            break;
200004ee:	e00e      	b.n	2000050e <pixel+0xa6>
        case 5:
            bitmask = 0x20;
200004f0:	2317      	movs	r3, #23
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	2220      	movs	r2, #32
200004f6:	701a      	strb	r2, [r3, #0]
            break;
200004f8:	e009      	b.n	2000050e <pixel+0xa6>
        case 6:
            bitmask = 0x40;
200004fa:	2317      	movs	r3, #23
200004fc:	18fb      	adds	r3, r7, r3
200004fe:	2240      	movs	r2, #64	; 0x40
20000500:	701a      	strb	r2, [r3, #0]
            break;
20000502:	e004      	b.n	2000050e <pixel+0xa6>
        case 7:
            bitmask = 0x80;
20000504:	2317      	movs	r3, #23
20000506:	18fb      	adds	r3, r7, r3
20000508:	2280      	movs	r2, #128	; 0x80
2000050a:	701a      	strb	r2, [r3, #0]
            break;
2000050c:	46c0      	nop			; (mov r8, r8)
    }
    
    if (set == 0)
2000050e:	687b      	ldr	r3, [r7, #4]
20000510:	2b00      	cmp	r3, #0
20000512:	d105      	bne.n	20000520 <pixel+0xb8>
    {
        bitmask = ~bitmask;
20000514:	2217      	movs	r2, #23
20000516:	18bb      	adds	r3, r7, r2
20000518:	18ba      	adds	r2, r7, r2
2000051a:	7812      	ldrb	r2, [r2, #0]
2000051c:	43d2      	mvns	r2, r2
2000051e:	701a      	strb	r2, [r3, #0]
    }
    
    if (x > 64)
20000520:	68fb      	ldr	r3, [r7, #12]
20000522:	2b40      	cmp	r3, #64	; 0x40
20000524:	d90a      	bls.n	2000053c <pixel+0xd4>
    {
        controller = B_CS2;
20000526:	2316      	movs	r3, #22
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2210      	movs	r2, #16
2000052c:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-65;
2000052e:	68fb      	ldr	r3, [r7, #12]
20000530:	b2da      	uxtb	r2, r3
20000532:	2315      	movs	r3, #21
20000534:	18fb      	adds	r3, r7, r3
20000536:	3a41      	subs	r2, #65	; 0x41
20000538:	701a      	strb	r2, [r3, #0]
2000053a:	e009      	b.n	20000550 <pixel+0xe8>
    }
    else
    {
        controller = B_CS1;
2000053c:	2316      	movs	r3, #22
2000053e:	18fb      	adds	r3, r7, r3
20000540:	2208      	movs	r2, #8
20000542:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-1;
20000544:	68fb      	ldr	r3, [r7, #12]
20000546:	b2da      	uxtb	r2, r3
20000548:	2315      	movs	r3, #21
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	3a01      	subs	r2, #1
2000054e:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000550:	2615      	movs	r6, #21
20000552:	19bb      	adds	r3, r7, r6
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	2240      	movs	r2, #64	; 0x40
20000558:	4313      	orrs	r3, r2
2000055a:	b2da      	uxtb	r2, r3
2000055c:	2516      	movs	r5, #22
2000055e:	197b      	adds	r3, r7, r5
20000560:	781b      	ldrb	r3, [r3, #0]
20000562:	0019      	movs	r1, r3
20000564:	0010      	movs	r0, r2
20000566:	f7ff fec9 	bl	200002fc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000056a:	2314      	movs	r3, #20
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2248      	movs	r2, #72	; 0x48
20000572:	4252      	negs	r2, r2
20000574:	4313      	orrs	r3, r2
20000576:	b2da      	uxtb	r2, r3
20000578:	197b      	adds	r3, r7, r5
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	0019      	movs	r1, r3
2000057e:	0010      	movs	r0, r2
20000580:	f7ff febc 	bl	200002fc <graphic_write_command>
    
    uint8_t temp = graphic_read_data(controller);
20000584:	2313      	movs	r3, #19
20000586:	18fc      	adds	r4, r7, r3
20000588:	197b      	adds	r3, r7, r5
2000058a:	781b      	ldrb	r3, [r3, #0]
2000058c:	0018      	movs	r0, r3
2000058e:	f7ff fef8 	bl	20000382 <graphic_read_data>
20000592:	0003      	movs	r3, r0
20000594:	7023      	strb	r3, [r4, #0]
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000596:	19bb      	adds	r3, r7, r6
20000598:	781b      	ldrb	r3, [r3, #0]
2000059a:	2240      	movs	r2, #64	; 0x40
2000059c:	4313      	orrs	r3, r2
2000059e:	b2da      	uxtb	r2, r3
200005a0:	197b      	adds	r3, r7, r5
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	0019      	movs	r1, r3
200005a6:	0010      	movs	r0, r2
200005a8:	f7ff fea8 	bl	200002fc <graphic_write_command>
    
    if (set == 1)
200005ac:	687b      	ldr	r3, [r7, #4]
200005ae:	2b01      	cmp	r3, #1
200005b0:	d109      	bne.n	200005c6 <pixel+0x15e>
    {
        bitmask = bitmask | temp;
200005b2:	2217      	movs	r2, #23
200005b4:	18bb      	adds	r3, r7, r2
200005b6:	18b9      	adds	r1, r7, r2
200005b8:	2213      	movs	r2, #19
200005ba:	18ba      	adds	r2, r7, r2
200005bc:	7809      	ldrb	r1, [r1, #0]
200005be:	7812      	ldrb	r2, [r2, #0]
200005c0:	430a      	orrs	r2, r1
200005c2:	701a      	strb	r2, [r3, #0]
200005c4:	e008      	b.n	200005d8 <pixel+0x170>
    }
    else
    {
        bitmask = bitmask & temp;
200005c6:	2217      	movs	r2, #23
200005c8:	18bb      	adds	r3, r7, r2
200005ca:	18ba      	adds	r2, r7, r2
200005cc:	2113      	movs	r1, #19
200005ce:	1879      	adds	r1, r7, r1
200005d0:	7812      	ldrb	r2, [r2, #0]
200005d2:	7809      	ldrb	r1, [r1, #0]
200005d4:	400a      	ands	r2, r1
200005d6:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_data(bitmask, controller);
200005d8:	2316      	movs	r3, #22
200005da:	18fb      	adds	r3, r7, r3
200005dc:	781a      	ldrb	r2, [r3, #0]
200005de:	2317      	movs	r3, #23
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	0011      	movs	r1, r2
200005e6:	0018      	movs	r0, r3
200005e8:	f7ff fea8 	bl	2000033c <graphic_write_data>
200005ec:	e000      	b.n	200005f0 <pixel+0x188>
        return;
200005ee:	46c0      	nop			; (mov r8, r8)
}
200005f0:	46bd      	mov	sp, r7
200005f2:	b007      	add	sp, #28
200005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	20000828 	andcs	r0, r0, r8, lsr #16

200005fc <draw_object>:

void draw_object(POBJECT o)
{
200005fc:	b580      	push	{r7, lr}
200005fe:	b084      	sub	sp, #16
20000600:	af00      	add	r7, sp, #0
20000602:	6078      	str	r0, [r7, #4]
    int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
20000604:	2300      	movs	r3, #0
20000606:	60fb      	str	r3, [r7, #12]
20000608:	e01d      	b.n	20000646 <draw_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,1);
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	68da      	ldr	r2, [r3, #12]
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	6819      	ldr	r1, [r3, #0]
20000612:	68fb      	ldr	r3, [r7, #12]
20000614:	3304      	adds	r3, #4
20000616:	005b      	lsls	r3, r3, #1
20000618:	18cb      	adds	r3, r1, r3
2000061a:	3304      	adds	r3, #4
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	18d3      	adds	r3, r2, r3
20000620:	0018      	movs	r0, r3
20000622:	687b      	ldr	r3, [r7, #4]
20000624:	691a      	ldr	r2, [r3, #16]
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	6819      	ldr	r1, [r3, #0]
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	3304      	adds	r3, #4
2000062e:	005b      	lsls	r3, r3, #1
20000630:	18cb      	adds	r3, r1, r3
20000632:	3305      	adds	r3, #5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	18d3      	adds	r3, r2, r3
20000638:	2201      	movs	r2, #1
2000063a:	0019      	movs	r1, r3
2000063c:	f7ff ff14 	bl	20000468 <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
20000640:	68fb      	ldr	r3, [r7, #12]
20000642:	3301      	adds	r3, #1
20000644:	60fb      	str	r3, [r7, #12]
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	681b      	ldr	r3, [r3, #0]
2000064a:	681b      	ldr	r3, [r3, #0]
2000064c:	68fa      	ldr	r2, [r7, #12]
2000064e:	429a      	cmp	r2, r3
20000650:	dbdb      	blt.n	2000060a <draw_object+0xe>
    }
}
20000652:	46c0      	nop			; (mov r8, r8)
20000654:	46bd      	mov	sp, r7
20000656:	b004      	add	sp, #16
20000658:	bd80      	pop	{r7, pc}

2000065a <clear_object>:

void clear_object(POBJECT o)
{
2000065a:	b580      	push	{r7, lr}
2000065c:	b084      	sub	sp, #16
2000065e:	af00      	add	r7, sp, #0
20000660:	6078      	str	r0, [r7, #4]
        int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
20000662:	2300      	movs	r3, #0
20000664:	60fb      	str	r3, [r7, #12]
20000666:	e01d      	b.n	200006a4 <clear_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,0);
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	68da      	ldr	r2, [r3, #12]
2000066c:	687b      	ldr	r3, [r7, #4]
2000066e:	6819      	ldr	r1, [r3, #0]
20000670:	68fb      	ldr	r3, [r7, #12]
20000672:	3304      	adds	r3, #4
20000674:	005b      	lsls	r3, r3, #1
20000676:	18cb      	adds	r3, r1, r3
20000678:	3304      	adds	r3, #4
2000067a:	781b      	ldrb	r3, [r3, #0]
2000067c:	18d3      	adds	r3, r2, r3
2000067e:	0018      	movs	r0, r3
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	691a      	ldr	r2, [r3, #16]
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	6819      	ldr	r1, [r3, #0]
20000688:	68fb      	ldr	r3, [r7, #12]
2000068a:	3304      	adds	r3, #4
2000068c:	005b      	lsls	r3, r3, #1
2000068e:	18cb      	adds	r3, r1, r3
20000690:	3305      	adds	r3, #5
20000692:	781b      	ldrb	r3, [r3, #0]
20000694:	18d3      	adds	r3, r2, r3
20000696:	2200      	movs	r2, #0
20000698:	0019      	movs	r1, r3
2000069a:	f7ff fee5 	bl	20000468 <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
2000069e:	68fb      	ldr	r3, [r7, #12]
200006a0:	3301      	adds	r3, #1
200006a2:	60fb      	str	r3, [r7, #12]
200006a4:	687b      	ldr	r3, [r7, #4]
200006a6:	681b      	ldr	r3, [r3, #0]
200006a8:	681b      	ldr	r3, [r3, #0]
200006aa:	68fa      	ldr	r2, [r7, #12]
200006ac:	429a      	cmp	r2, r3
200006ae:	dbdb      	blt.n	20000668 <clear_object+0xe>
    }
}
200006b0:	46c0      	nop			; (mov r8, r8)
200006b2:	46bd      	mov	sp, r7
200006b4:	b004      	add	sp, #16
200006b6:	bd80      	pop	{r7, pc}

200006b8 <move_object>:

void move_object(POBJECT o)
{
200006b8:	b580      	push	{r7, lr}
200006ba:	b082      	sub	sp, #8
200006bc:	af00      	add	r7, sp, #0
200006be:	6078      	str	r0, [r7, #4]
    clear_object(o);
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	0018      	movs	r0, r3
200006c4:	f7ff ffc9 	bl	2000065a <clear_object>
    
    o->posx += o->dirx;
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	68da      	ldr	r2, [r3, #12]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	685b      	ldr	r3, [r3, #4]
200006d0:	18d2      	adds	r2, r2, r3
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	691a      	ldr	r2, [r3, #16]
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	689b      	ldr	r3, [r3, #8]
200006de:	18d2      	adds	r2, r2, r3
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	611a      	str	r2, [r3, #16]
    
    if(o->posx < 1)
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	68db      	ldr	r3, [r3, #12]
200006e8:	2b00      	cmp	r3, #0
200006ea:	dc04      	bgt.n	200006f6 <move_object+0x3e>
    {
        o->dirx *= -1;
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	685b      	ldr	r3, [r3, #4]
200006f0:	425a      	negs	r2, r3
200006f2:	687b      	ldr	r3, [r7, #4]
200006f4:	605a      	str	r2, [r3, #4]
    }
    if( (o->posx + o->geo->sizex) > 128)
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	68da      	ldr	r2, [r3, #12]
200006fa:	687b      	ldr	r3, [r7, #4]
200006fc:	681b      	ldr	r3, [r3, #0]
200006fe:	685b      	ldr	r3, [r3, #4]
20000700:	18d3      	adds	r3, r2, r3
20000702:	2b80      	cmp	r3, #128	; 0x80
20000704:	dd04      	ble.n	20000710 <move_object+0x58>
    {
        o->dirx *= -1;
20000706:	687b      	ldr	r3, [r7, #4]
20000708:	685b      	ldr	r3, [r3, #4]
2000070a:	425a      	negs	r2, r3
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	605a      	str	r2, [r3, #4]
    }
    if(o->posy < 1)
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	691b      	ldr	r3, [r3, #16]
20000714:	2b00      	cmp	r3, #0
20000716:	dc04      	bgt.n	20000722 <move_object+0x6a>
    {
        o->diry *= -1;
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	689b      	ldr	r3, [r3, #8]
2000071c:	425a      	negs	r2, r3
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	609a      	str	r2, [r3, #8]
    }
    if( (o->posy + o->geo->sizey) > 64 )
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	691a      	ldr	r2, [r3, #16]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	681b      	ldr	r3, [r3, #0]
2000072a:	689b      	ldr	r3, [r3, #8]
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	2b40      	cmp	r3, #64	; 0x40
20000730:	dd04      	ble.n	2000073c <move_object+0x84>
    {
        o->diry *= -1;
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	689b      	ldr	r3, [r3, #8]
20000736:	425a      	negs	r2, r3
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	609a      	str	r2, [r3, #8]
    }
    
    draw_object(o);
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	0018      	movs	r0, r3
20000740:	f7ff ff5c 	bl	200005fc <draw_object>
}
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46bd      	mov	sp, r7
20000748:	b002      	add	sp, #8
2000074a:	bd80      	pop	{r7, pc}

2000074c <set_speed_object>:

void set_speed_object(POBJECT o, int speedx, int speedy)
{
2000074c:	b580      	push	{r7, lr}
2000074e:	b084      	sub	sp, #16
20000750:	af00      	add	r7, sp, #0
20000752:	60f8      	str	r0, [r7, #12]
20000754:	60b9      	str	r1, [r7, #8]
20000756:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	68ba      	ldr	r2, [r7, #8]
2000075c:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	687a      	ldr	r2, [r7, #4]
20000762:	609a      	str	r2, [r3, #8]
}
20000764:	46c0      	nop			; (mov r8, r8)
20000766:	46bd      	mov	sp, r7
20000768:	b004      	add	sp, #16
2000076a:	bd80      	pop	{r7, pc}

2000076c <app_init>:

void app_init(void)
{    
2000076c:	b580      	push	{r7, lr}
2000076e:	af00      	add	r7, sp, #0
   #ifdef USBDM
    *((unsigned long *) 0x40023830) = 0x18;
20000770:	4b05      	ldr	r3, [pc, #20]	; (20000788 <app_init+0x1c>)
20000772:	2218      	movs	r2, #24
20000774:	601a      	str	r2, [r3, #0]
    __asm volatile ("LDR R0,=0x08000209\n BLX R0 \n");
20000776:	4815      	ldr	r0, [pc, #84]	; (200007cc <main+0x38>)
20000778:	4780      	blx	r0
    #endif
    *((unsigned long *) portModer) = 0x55555555;
2000077a:	4b04      	ldr	r3, [pc, #16]	; (2000078c <app_init+0x20>)
2000077c:	4a04      	ldr	r2, [pc, #16]	; (20000790 <app_init+0x24>)
2000077e:	601a      	str	r2, [r3, #0]
}
20000780:	46c0      	nop			; (mov r8, r8)
20000782:	46bd      	mov	sp, r7
20000784:	bd80      	pop	{r7, pc}
20000786:	46c0      	nop			; (mov r8, r8)
20000788:	40023830 	andmi	r3, r2, r0, lsr r8
2000078c:	40021000 	andmi	r1, r2, r0
20000790:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000794 <main>:

void main(void)
{
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
    POBJECT p = &ball;
2000079a:	4b0b      	ldr	r3, [pc, #44]	; (200007c8 <main+0x34>)
2000079c:	607b      	str	r3, [r7, #4]
    
    app_init();
2000079e:	f7ff ffe5 	bl	2000076c <app_init>
    graphic_initialize();
200007a2:	f7ff fe03 	bl	200003ac <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
200007a6:	f7ff fe2c 	bl	20000402 <graphic_clear_screen>
#endif

    p->set_speed(p,4,1);
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	6a1b      	ldr	r3, [r3, #32]
200007ae:	6878      	ldr	r0, [r7, #4]
200007b0:	2201      	movs	r2, #1
200007b2:	2104      	movs	r1, #4
200007b4:	4798      	blx	r3
    
    while(1)
    {
        p->move(p);
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	69db      	ldr	r3, [r3, #28]
200007ba:	687a      	ldr	r2, [r7, #4]
200007bc:	0010      	movs	r0, r2
200007be:	4798      	blx	r3
#ifndef SIMULATOR
        delay_mili(40); // 25 bilder per sekund
200007c0:	2028      	movs	r0, #40	; 0x28
200007c2:	f7ff fc67 	bl	20000094 <delay_mili>
        p->move(p);
200007c6:	e7f6      	b.n	200007b6 <main+0x22>
200007c8:	20000804 	andcs	r0, r0, r4, lsl #16
200007cc:	08000209 	stmdaeq	r0, {r0, r3, r9}

200007d0 <ball_geometry>:
200007d0:	0000000c 	andeq	r0, r0, ip
200007d4:	00000004 	andeq	r0, r0, r4
200007d8:	00000004 	andeq	r0, r0, r4
200007dc:	02000100 	andeq	r0, r0, #0, 2
200007e0:	01010001 	tsteq	r1, r1
200007e4:	03010201 	movweq	r0, #4609	; 0x1201
200007e8:	01020002 	tsteq	r2, r2
200007ec:	03020202 	movweq	r0, #8706	; 0x2202
200007f0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000804 <ball>:
20000804:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000810:	00000001 	andeq	r0, r0, r1
20000814:	00000001 	andeq	r0, r0, r1
20000818:	200005fd 	strdcs	r0, [r0], -sp
2000081c:	2000065b 	andcs	r0, r0, fp, asr r6
20000820:	200006b9 			; <UNDEFINED> instruction: 0x200006b9
20000824:	2000074d 	andcs	r0, r0, sp, asr #14
20000828:	200004be 			; <UNDEFINED> instruction: 0x200004be
2000082c:	200004c8 	andcs	r0, r0, r8, asr #9
20000830:	200004d2 	ldrdcs	r0, [r0], -r2
20000834:	200004dc 	ldrdcs	r0, [r0], -ip
20000838:	200004e6 	andcs	r0, r0, r6, ror #9
2000083c:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000840:	200004fa 	strdcs	r0, [r0], -sl
20000844:	20000504 	andcs	r0, r0, r4, lsl #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000629 	andeq	r0, r0, r9, lsr #12
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000218 	andeq	r0, r0, r8, lsl r2
  10:	0000970c 	andeq	r9, r0, ip, lsl #14
  14:	00004900 	andeq	r4, r0, r0, lsl #18
	...
  24:	01de0200 	bicseq	r0, lr, r0, lsl #4
  28:	31010000 	mrscc	r0, (UNDEF: 1)
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	1f080103 	svcne	0x00080103
  34:	04000001 	streq	r0, [r0], #-1
  38:	0000010a 	andeq	r0, r0, sl, lsl #2
  3c:	58330102 	ldmdapl	r3!, {r1, r8}
  40:	05000000 	streq	r0, [r0, #-0]
  44:	35010078 	strcc	r0, [r1, #-120]	; 0xffffff88
  48:	00000025 	andeq	r0, r0, r5, lsr #32
  4c:	00790500 	rsbseq	r0, r9, r0, lsl #10
  50:	00253601 	eoreq	r3, r5, r1, lsl #12
  54:	00010000 	andeq	r0, r1, r0
  58:	00011102 	andeq	r1, r1, r2, lsl #2
  5c:	37370100 	ldrcc	r0, [r7, -r0, lsl #2]!
  60:	04000000 	streq	r0, [r0], #-0
  64:	000001cc 	andeq	r0, r0, ip, asr #3
  68:	9f390134 	svcls	0x00390134
  6c:	06000000 	streq	r0, [r0], -r0
  70:	00000319 	andeq	r0, r0, r9, lsl r3
  74:	009f3b01 	addseq	r3, pc, r1, lsl #22
  78:	06000000 	streq	r0, [r0], -r0
  7c:	000001e6 	andeq	r0, r0, r6, ror #3
  80:	009f3c01 	addseq	r3, pc, r1, lsl #24
  84:	06040000 	streq	r0, [r4], -r0
  88:	000001ec 	andeq	r0, r0, ip, ror #3
  8c:	009f3d01 	addseq	r3, pc, r1, lsl #26
  90:	05080000 	streq	r0, [r8, #-0]
  94:	01007870 	tsteq	r0, r0, ror r8
  98:	0000a63e 	andeq	sl, r0, lr, lsr r6
  9c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a4:	58080074 	stmdapl	r8, {r2, r4, r5, r6}
  a8:	b6000000 	strlt	r0, [r0], -r0
  ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  b0:	000000b6 	strheq	r0, [r0], -r6
  b4:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b8:	0001bf07 	andeq	fp, r1, r7, lsl #30
  bc:	00010200 	andeq	r0, r1, r0, lsl #4
  c0:	3f010000 	svccc	0x00010000
  c4:	00000063 	andeq	r0, r0, r3, rrx
  c8:	00000002 	andeq	r0, r0, r2
  cc:	d33f0100 	teqle	pc, #0, 2
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	00006304 	andeq	r6, r0, r4, lsl #6
  d8:	02fb0400 	rscseq	r0, fp, #0, 8
  dc:	01240000 			; <UNDEFINED> instruction: 0x01240000
  e0:	00015241 	andeq	r5, r1, r1, asr #4
  e4:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
  e8:	4301006f 	movwmi	r0, #4207	; 0x106f
  ec:	000000c8 	andeq	r0, r0, r8, asr #1
  f0:	00920600 	addseq	r0, r2, r0, lsl #12
  f4:	44010000 	strmi	r0, [r1], #-0
  f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  fc:	017b0604 	cmneq	fp, r4, lsl #12
 100:	44010000 	strmi	r0, [r1], #-0
 104:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 108:	01370608 	teqeq	r7, r8, lsl #12
 10c:	45010000 	strmi	r0, [r1, #-0]
 110:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 114:	013c060c 	teqeq	ip, ip, lsl #12
 118:	45010000 	strmi	r0, [r1, #-0]
 11c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 120:	02130610 	andseq	r0, r3, #16, 12	; 0x1000000
 124:	46010000 	strmi	r0, [r1], -r0
 128:	00000168 	andeq	r0, r0, r8, ror #2
 12c:	01a40614 			; <UNDEFINED> instruction: 0x01a40614
 130:	47010000 	strmi	r0, [r1, -r0]
 134:	00000184 	andeq	r0, r0, r4, lsl #3
 138:	00320618 	eorseq	r0, r2, r8, lsl r6
 13c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 140:	000001a0 	andeq	r0, r0, r0, lsr #3
 144:	012d061c 			; <UNDEFINED> instruction: 0x012d061c
 148:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 14c:	000001c6 	andeq	r0, r0, r6, asr #3
 150:	5d0b0020 	stcpl	0, cr0, [fp, #-128]	; 0xffffff80
 154:	0c000001 	stceq	0, cr0, [r0], {1}
 158:	0000015d 	andeq	r0, r0, sp, asr r1
 15c:	63040a00 	movwvs	r0, #18944	; 0x4a00
 160:	0d000001 	stceq	0, cr0, [r0, #-4]
 164:	00000345 	andeq	r0, r0, r5, asr #6
 168:	0152040a 	cmpeq	r2, sl, lsl #8
 16c:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
 170:	0c000001 	stceq	0, cr0, [r0], {1}
 174:	00000179 	andeq	r0, r0, r9, ror r1
 178:	7f040a00 	svcvc	0x00040a00
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	00000345 	andeq	r0, r0, r5, asr #6
 184:	016e040a 	cmneq	lr, sl, lsl #8
 188:	950b0000 	strls	r0, [fp, #-0]
 18c:	0c000001 	stceq	0, cr0, [r0], {1}
 190:	00000195 	muleq	r0, r5, r1
 194:	9b040a00 	blls	10299c <startup-0x1fefd664>
 198:	0d000001 	stceq	0, cr0, [r0, #-4]
 19c:	00000345 	andeq	r0, r0, r5, asr #6
 1a0:	018a040a 	orreq	r0, sl, sl, lsl #8
 1a4:	bb0b0000 	bllt	2c01ac <startup-0x1fd3fe54>
 1a8:	0c000001 	stceq	0, cr0, [r0], {1}
 1ac:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
 1b0:	00009f0c 	andeq	r9, r0, ip, lsl #30
 1b4:	009f0c00 	addseq	r0, pc, r0, lsl #24
 1b8:	0a000000 	beq	1c0 <startup-0x1ffffe40>
 1bc:	0001c104 	andeq	ip, r1, r4, lsl #2
 1c0:	03450d00 	movteq	r0, #23808	; 0x5d00
 1c4:	040a0000 	streq	r0, [sl], #-0
 1c8:	000001a6 	andeq	r0, r0, r6, lsr #3
 1cc:	00033e02 	andeq	r3, r3, r2, lsl #28
 1d0:	d94a0100 	stmdble	sl, {r8}^
 1d4:	02000000 	andeq	r0, r0, #0
 1d8:	0000033d 	andeq	r0, r0, sp, lsr r3
 1dc:	01e24a01 	mvneq	r4, r1, lsl #20
 1e0:	040a0000 	streq	r0, [sl], #-0
 1e4:	000000d9 	ldrdeq	r0, [r0], -r9
 1e8:	0001410e 	andeq	r4, r1, lr, lsl #2
 1ec:	bd510100 	ldflte	f0, [r1, #-0]
 1f0:	05000000 	streq	r0, [r0, #-0]
 1f4:	0007d003 	andeq	sp, r7, r3
 1f8:	020e0f20 	andeq	r0, lr, #32, 30	; 0x80
 1fc:	5c010000 	stcpl	0, cr0, [r1], {-0}
 200:	000001cc 	andeq	r0, r0, ip, asr #3
 204:	08040305 	stmdaeq	r4, {r0, r2, r8, r9}
 208:	76102000 	ldrvc	r2, [r0], -r0
 20c:	01000001 	tsteq	r0, r1
 210:	079401f6 			; <UNDEFINED> instruction: 0x079401f6
 214:	00382000 	eorseq	r2, r8, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	0000022e 	andeq	r0, r0, lr, lsr #4
 220:	01007011 	tsteq	r0, r1, lsl r0
 224:	01d701f8 	ldrsheq	r0, [r7, #24]
 228:	91020000 	mrsls	r0, (UNDEF: 2)
 22c:	62120074 	andsvs	r0, r2, #116	; 0x74
 230:	01000001 	tsteq	r0, r1
 234:	076c01ed 	strbeq	r0, [ip, -sp, ror #3]!
 238:	00282000 	eoreq	r2, r8, r0
 23c:	9c010000 	stcls	0, cr0, [r1], {-0}
 240:	0001fd13 	andeq	pc, r1, r3, lsl sp	; <UNPREDICTABLE>
 244:	01e70100 	mvneq	r0, r0, lsl #2
 248:	2000074c 	andcs	r0, r0, ip, asr #14
 24c:	00000020 	andeq	r0, r0, r0, lsr #32
 250:	02829c01 	addeq	r9, r2, #256	; 0x100
 254:	6f140000 	svcvs	0x00140000
 258:	01e70100 	mvneq	r0, r0, lsl #2
 25c:	000001d7 	ldrdeq	r0, [r0], -r7
 260:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 264:	0000032f 	andeq	r0, r0, pc, lsr #6
 268:	9f01e701 	svcls	0x0001e701
 26c:	02000000 	andeq	r0, r0, #0
 270:	36157091 			; <UNDEFINED> instruction: 0x36157091
 274:	01000003 	tsteq	r0, r3
 278:	009f01e7 	addseq	r0, pc, r7, ror #3
 27c:	91020000 	mrsls	r0, (UNDEF: 2)
 280:	2310006c 	tstcs	r0, #108	; 0x6c
 284:	01000003 	tsteq	r0, r3
 288:	06b801cc 	ldrteq	r0, [r8], ip, asr #3
 28c:	00942000 	addseq	r2, r4, r0
 290:	9c010000 	stcls	0, cr0, [r1], {-0}
 294:	000002a6 	andeq	r0, r0, r6, lsr #5
 298:	01006f14 	tsteq	r0, r4, lsl pc
 29c:	01d701cc 	bicseq	r0, r7, ip, asr #3
 2a0:	91020000 	mrsls	r0, (UNDEF: 2)
 2a4:	e2100074 	ands	r0, r0, #116	; 0x74
 2a8:	01000002 	tsteq	r0, r2
 2ac:	065a01c2 	ldrbeq	r0, [sl], -r2, asr #3
 2b0:	005e2000 	subseq	r2, lr, r0
 2b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b8:	000002d7 	ldrdeq	r0, [r0], -r7
 2bc:	01006f14 	tsteq	r0, r4, lsl pc
 2c0:	01d701c2 	bicseq	r0, r7, r2, asr #3
 2c4:	91020000 	mrsls	r0, (UNDEF: 2)
 2c8:	0069116c 	rsbeq	r1, r9, ip, ror #2
 2cc:	9f01c401 	svcls	0x0001c401
 2d0:	02000000 	andeq	r0, r0, #0
 2d4:	10007491 	mulne	r0, r1, r4
 2d8:	00000300 	andeq	r0, r0, r0, lsl #6
 2dc:	fc01b801 	stc2	8, cr11, [r1], {1}
 2e0:	5e200005 	cdppl	0, 2, cr0, cr0, cr5, {0}
 2e4:	01000000 	mrseq	r0, (UNDEF: 0)
 2e8:	0003089c 	muleq	r3, ip, r8
 2ec:	006f1400 	rsbeq	r1, pc, r0, lsl #8
 2f0:	d701b801 	strle	fp, [r1, -r1, lsl #16]
 2f4:	02000001 	andeq	r0, r0, #1
 2f8:	69116c91 	ldmdbvs	r1, {r0, r4, r7, sl, fp, sp, lr}
 2fc:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
 300:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 304:	00749102 	rsbseq	r9, r4, r2, lsl #2
 308:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
 30c:	01700100 	cmneq	r0, r0, lsl #2
 310:	20000468 	andcs	r0, r0, r8, ror #8
 314:	00000194 	muleq	r0, r4, r1
 318:	03939c01 	orrseq	r9, r3, #256	; 0x100
 31c:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
 320:	01700100 	cmneq	r0, r0, lsl #2
 324:	000000b6 	strheq	r0, [r0], -r6
 328:	145c9102 	ldrbne	r9, [ip], #-258	; 0xfffffefe
 32c:	70010079 	andvc	r0, r1, r9, ror r0
 330:	0000b601 	andeq	fp, r0, r1, lsl #12
 334:	58910200 	ldmpl	r1, {r9}
 338:	74657314 	strbtvc	r7, [r5], #-788	; 0xfffffcec
 33c:	01700100 	cmneq	r0, r0, lsl #2
 340:	000000b6 	strheq	r0, [r0], -r6
 344:	16549102 	ldrbne	r9, [r4], -r2, lsl #2
 348:	000001d6 	ldrdeq	r0, [r0], -r6
 34c:	25017701 	strcs	r7, [r1, #-1793]	; 0xfffff8ff
 350:	02000000 	andeq	r0, r0, #0
 354:	3e166791 	mrccc	7, 0, r6, cr6, cr1, {4}
 358:	01000000 	mrseq	r0, (UNDEF: 0)
 35c:	00250177 	eoreq	r0, r5, r7, ror r1
 360:	91020000 	mrsls	r0, (UNDEF: 2)
 364:	00891666 	addeq	r1, r9, r6, ror #12
 368:	77010000 	strvc	r0, [r1, -r0]
 36c:	00002501 	andeq	r2, r0, r1, lsl #10
 370:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 374:	00029916 	andeq	r9, r2, r6, lsl r9
 378:	01770100 	cmneq	r7, r0, lsl #2
 37c:	00000025 	andeq	r0, r0, r5, lsr #32
 380:	16649102 	strbtne	r9, [r4], -r2, lsl #2
 384:	0000015d 	andeq	r0, r0, sp, asr r1
 388:	2501a801 	strcs	sl, [r1, #-2049]	; 0xfffff7ff
 38c:	02000000 	andeq	r0, r0, #0
 390:	10006391 	mulne	r0, r1, r3
 394:	000002c5 	andeq	r0, r0, r5, asr #5
 398:	02016001 	andeq	r6, r1, #1
 39c:	66200004 	strtvs	r0, [r0], -r4
 3a0:	01000000 	mrseq	r0, (UNDEF: 0)
 3a4:	0003c89c 	muleq	r3, ip, r8
 3a8:	00f31600 	rscseq	r1, r3, r0, lsl #12
 3ac:	62010000 	andvs	r0, r1, #0
 3b0:	0003c801 	andeq	ip, r3, r1, lsl #16
 3b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3b8:	64646111 	strbtvs	r6, [r4], #-273	; 0xfffffeef
 3bc:	01620100 	cmneq	r2, r0, lsl #2
 3c0:	000003c8 	andeq	r0, r0, r8, asr #7
 3c4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 3c8:	28080103 	stmdacs	r8, {r0, r1, r8}
 3cc:	17000001 	strne	r0, [r0, -r1]
 3d0:	00000180 	andeq	r0, r0, r0, lsl #3
 3d4:	ac014a01 			; <UNDEFINED> instruction: 0xac014a01
 3d8:	56200003 	strtpl	r0, [r0], -r3
 3dc:	01000000 	mrseq	r0, (UNDEF: 0)
 3e0:	00e1189c 	smlaleq	r1, r1, ip, r8	; <UNPREDICTABLE>
 3e4:	44010000 	strmi	r0, [r1], #-0
 3e8:	00002501 	andeq	r2, r0, r1, lsl #10
 3ec:	00038200 	andeq	r8, r3, r0, lsl #4
 3f0:	00002a20 	andeq	r2, r0, r0, lsr #20
 3f4:	0b9c0100 	bleq	fe7007fc <ball+0xde6ffff8>
 3f8:	15000004 	strne	r0, [r0, #-4]
 3fc:	0000003e 	andeq	r0, r0, lr, lsr r0
 400:	25014401 	strcs	r4, [r1, #-1025]	; 0xfffffbff
 404:	02000000 	andeq	r0, r0, #0
 408:	10007791 	mulne	r0, r1, r7
 40c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
 410:	3c013801 	stccc	8, cr3, [r1], {1}
 414:	46200003 	strtmi	r0, [r0], -r3
 418:	01000000 	mrseq	r0, (UNDEF: 0)
 41c:	0004409c 	muleq	r4, ip, r0
 420:	00ee1500 	rsceq	r1, lr, r0, lsl #10
 424:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 428:	00002501 	andeq	r2, r0, r1, lsl #10
 42c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 430:	00003e15 	andeq	r3, r0, r5, lsl lr
 434:	01380100 	teqeq	r8, r0, lsl #2
 438:	00000025 	andeq	r0, r0, r5, lsr #32
 43c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 440:	00001610 	andeq	r1, r0, r0, lsl r6
 444:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
 448:	200002fc 	strdcs	r0, [r0], -ip
 44c:	00000040 	andeq	r0, r0, r0, asr #32
 450:	04759c01 	ldrbteq	r9, [r5], #-3073	; 0xfffff3ff
 454:	63140000 	tstvs	r4, #0
 458:	0100646d 	tsteq	r0, sp, ror #8
 45c:	0025012d 	eoreq	r0, r5, sp, lsr #2
 460:	91020000 	mrsls	r0, (UNDEF: 2)
 464:	003e1577 	eorseq	r1, lr, r7, ror r5
 468:	2d010000 	stccs	0, cr0, [r1, #-0]
 46c:	00002501 	andeq	r2, r0, r1, lsl #10
 470:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 474:	014f1000 	mrseq	r1, SPSR
 478:	10010000 	andne	r0, r1, r0
 47c:	00027c01 	andeq	r7, r2, r1, lsl #24
 480:	00008020 	andeq	r8, r0, r0, lsr #32
 484:	aa9c0100 	bge	fe70088c <ball+0xde700088>
 488:	15000004 	strne	r0, [r0, #-4]
 48c:	0000002c 	andeq	r0, r0, ip, lsr #32
 490:	25011001 	strcs	r1, [r1, #-1]
 494:	02000000 	andeq	r0, r0, #0
 498:	3e157791 	mrccc	7, 0, r7, cr5, cr1, {4}
 49c:	01000000 	mrseq	r0, (UNDEF: 0)
 4a0:	00250110 	eoreq	r0, r5, r0, lsl r1
 4a4:	91020000 	mrsls	r0, (UNDEF: 2)
 4a8:	0c190076 	ldceq	0, cr0, [r9], {118}	; 0x76
 4ac:	01000003 	tsteq	r0, r3
 4b0:	000025ec 	andeq	r2, r0, ip, ror #11
 4b4:	0001ec00 	andeq	lr, r1, r0, lsl #24
 4b8:	00009020 	andeq	r9, r0, r0, lsr #32
 4bc:	e09c0100 	adds	r0, ip, r0, lsl #2
 4c0:	1a000004 	bne	4d8 <startup-0x1ffffb28>
 4c4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4c8:	0025ec01 	eoreq	lr, r5, r1, lsl #24
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	01170f6f 	tsteq	r7, pc, ror #30
 4d4:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
 4d8:	00000025 	andeq	r0, r0, r5, lsr #32
 4dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4e0:	0002b21b 	andeq	fp, r2, fp, lsl r2
 4e4:	7ecf0100 	polvce	f0, f7, f0
 4e8:	6e200001 	cdpvs	0, 2, cr0, cr0, cr1, {0}
 4ec:	01000000 	mrseq	r0, (UNDEF: 0)
 4f0:	0005049c 	muleq	r5, ip, r4
 4f4:	01710f00 	cmneq	r1, r0, lsl #30
 4f8:	da010000 	ble	40500 <startup-0x1ffbfb00>
 4fc:	00000030 	andeq	r0, r0, r0, lsr r0
 500:	00779102 	rsbseq	r9, r7, r2, lsl #2
 504:	0000371b 	andeq	r3, r0, fp, lsl r7
 508:	24b80100 	ldrtcs	r0, [r8], #256	; 0x100
 50c:	5a200001 	bpl	800518 <startup-0x1f7ffae8>
 510:	01000000 	mrseq	r0, (UNDEF: 0)
 514:	0005289c 	muleq	r5, ip, r8
 518:	003e1a00 	eorseq	r1, lr, r0, lsl #20
 51c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
 520:	00000025 	andeq	r0, r0, r5, lsr #32
 524:	00779102 	rsbseq	r9, r7, r2, lsl #2
 528:	0001931c 	andeq	r9, r1, ip, lsl r3
 52c:	f0b30100 			; <UNDEFINED> instruction: 0xf0b30100
 530:	34200000 	strtcc	r0, [r0], #-0
 534:	01000000 	mrseq	r0, (UNDEF: 0)
 538:	00054a9c 	muleq	r5, ip, sl
 53c:	00781d00 	rsbseq	r1, r8, r0, lsl #26
 540:	0025b301 	eoreq	fp, r5, r1, lsl #6
 544:	91020000 	mrsls	r0, (UNDEF: 2)
 548:	aa1c0077 	bge	70072c <startup-0x1f8ff8d4>
 54c:	01000001 	tsteq	r0, r1
 550:	0000c6ae 	andeq	ip, r0, lr, lsr #13
 554:	00002a20 	andeq	r2, r0, r0, lsr #20
 558:	6c9c0100 	ldfvss	f0, [ip], {0}
 55c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
 560:	ae010078 	mcrge	0, 0, r0, cr1, cr8, {3}
 564:	00000025 	andeq	r0, r0, r5, lsr #32
 568:	00779102 	rsbseq	r9, r7, r2, lsl #2
 56c:	0001f21b 	andeq	pc, r1, fp, lsl r2	; <UNPREDICTABLE>
 570:	94a00100 	strtls	r0, [r0], #256	; 0x100
 574:	32200000 	eorcc	r0, r0, #0
 578:	01000000 	mrseq	r0, (UNDEF: 0)
 57c:	0005a99c 	muleq	r5, ip, r9
 580:	736d1d00 	cmnvc	sp, #0, 26
 584:	b6a00100 	strtlt	r0, [r0], r0, lsl #2
 588:	02000000 	andeq	r0, r0, #0
 58c:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
 590:	9fa20100 	svcls	0x00a20100
 594:	02000000 	andeq	r0, r0, #0
 598:	6b0f7491 	blvs	3dd7e4 <startup-0x1fc2281c>
 59c:	01000001 	tsteq	r0, r1
 5a0:	00009fa2 	andeq	r9, r0, r2, lsr #31
 5a4:	70910200 	addsvc	r0, r1, r0, lsl #4
 5a8:	00fe1b00 	rscseq	r1, lr, r0, lsl #22
 5ac:	8c010000 	stchi	0, cr0, [r1], {-0}
 5b0:	20000066 	andcs	r0, r0, r6, rrx
 5b4:	0000002e 	andeq	r0, r0, lr, lsr #32
 5b8:	05f99c01 	ldrbeq	r9, [r9, #3073]!	; 0xc01
 5bc:	751d0000 	ldrvc	r0, [sp, #-0]
 5c0:	8c010073 	stchi	0, cr0, [r1], {115}	; 0x73
 5c4:	000000b6 	strheq	r0, [r0], -r6
 5c8:	1f6c9102 	svcne	0x006c9102
 5cc:	8e010069 	cdphi	0, 0, cr0, cr1, cr9, {3}
 5d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 5d4:	00016b0f 	andeq	r6, r1, pc, lsl #22
 5d8:	9f8e0100 	svcls	0x008e0100
 5dc:	02000000 	andeq	r0, r0, #0
 5e0:	74207091 	strtvc	r7, [r0], #-145	; 0xffffff6f
 5e4:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 5e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 5ec:	9a010069 	bls	40798 <startup-0x1ffbf868>
 5f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 5f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5f8:	02ef2100 	rsceq	r2, pc, #0, 2
 5fc:	86010000 	strhi	r0, [r1], -r0
 600:	20000054 	andcs	r0, r0, r4, asr r0
 604:	00000012 	andeq	r0, r0, r2, lsl r0
 608:	0a229c01 	beq	8a7614 <startup-0x1f7589ec>
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	00001070 	andeq	r1, r0, r0, ror r0
 614:	00004420 	andeq	r4, r0, r0, lsr #8
 618:	229c0100 	addscs	r0, ip, #0, 2
 61c:	000002da 	ldrdeq	r0, [r0], -sl
 620:	00006801 	andeq	r6, r0, r1, lsl #16
 624:	000c2000 	andeq	r2, ip, r0
 628:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	150b0000 	strne	r0, [fp, #-0]
  80:	01192701 	tsteq	r9, r1, lsl #14
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490005 	movtne	r0, #36869	; 0x9005
  8c:	130d0000 	movwne	r0, #53248	; 0xd000
  90:	3c0e0300 	stccc	3, cr0, [lr], {-0}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  a4:	00001802 	andeq	r1, r0, r2, lsl #16
  a8:	0300340f 	movweq	r3, #1039	; 0x40f
  ac:	3b0b3a0e 	blcc	2ce8ec <startup-0x1fd31714>
  b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b4:	10000018 	andne	r0, r0, r8, lsl r0
  b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  bc:	0b3a0e03 	bleq	e838d0 <startup-0x1f17c730>
  c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  cc:	00130119 	andseq	r0, r3, r9, lsl r1
  d0:	00341100 	eorseq	r1, r4, r0, lsl #2
  d4:	0b3a0803 	bleq	e820e8 <startup-0x1f17df18>
  d8:	1349053b 	movtne	r0, #38203	; 0x953b
  dc:	00001802 	andeq	r1, r0, r2, lsl #16
  e0:	3f002e12 	svccc	0x00002e12
  e4:	3a0e0319 	bcc	380d50 <startup-0x1fc7f2b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  f0:	97184006 	ldrls	r4, [r8, -r6]
  f4:	00001942 	andeq	r1, r0, r2, asr #18
  f8:	3f012e13 	svccc	0x00012e13
  fc:	3a0e0319 	bcc	380d68 <startup-0x1fc7f298>
 100:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 104:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 108:	97184006 	ldrls	r4, [r8, -r6]
 10c:	13011942 	movwne	r1, #6466	; 0x1942
 110:	05140000 	ldreq	r0, [r4, #-0]
 114:	3a080300 	bcc	200d1c <startup-0x1fdff2e4>
 118:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	00180213 	andseq	r0, r8, r3, lsl r2
 120:	00051500 	andeq	r1, r5, r0, lsl #10
 124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
 128:	1349053b 	movtne	r0, #38203	; 0x953b
 12c:	00001802 	andeq	r1, r0, r2, lsl #16
 130:	03003416 	movweq	r3, #1046	; 0x416
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	02134905 	andseq	r4, r3, #81920	; 0x14000
 13c:	17000018 	smladne	r0, r8, r0, r0
 140:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 154:	18000019 	stmdane	r0, {r0, r3, r4}
 158:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 164:	01111349 	tsteq	r1, r9, asr #6
 168:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 16c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 170:	19000013 	stmdbne	r0, {r0, r1, r4}
 174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 180:	01111349 	tsteq	r1, r9, asr #6
 184:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 188:	01194296 			; <UNDEFINED> instruction: 0x01194296
 18c:	1a000013 	bne	1e0 <startup-0x1ffffe20>
 190:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 194:	0b3b0b3a 	bleq	ec2e84 <startup-0x1f13d17c>
 198:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 19c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1a0:	03193f01 	tsteq	r9, #1, 30
 1a4:	3b0b3a0e 	blcc	2ce9e4 <startup-0x1fd3161c>
 1a8:	1119270b 	tstne	r9, fp, lsl #14
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b4:	00001301 	andeq	r1, r0, r1, lsl #6
 1b8:	3f012e1c 	svccc	0x00012e1c
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c8:	97184006 	ldrls	r4, [r8, -r6]
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	051d0000 	ldreq	r0, [sp, #-0]
 1d4:	3a080300 	bcc	200ddc <startup-0x1fdff224>
 1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	00180213 	andseq	r0, r8, r3, lsl r2
 1e0:	00341e00 	eorseq	r1, r4, r0, lsl #28
 1e4:	0b3a0803 	bleq	e821f8 <startup-0x1f17de08>
 1e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1ec:	00001802 	andeq	r1, r0, r2, lsl #16
 1f0:	0300341f 	movweq	r3, #1055	; 0x41f
 1f4:	3b0b3a08 	blcc	2cea1c <startup-0x1fd315e4>
 1f8:	0013490b 	andseq	r4, r3, fp, lsl #18
 1fc:	010b2000 	mrseq	r2, (UNDEF: 11)
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 208:	03193f00 	tsteq	r9, #0, 30
 20c:	3b0b3a0e 	blcc	2cea4c <startup-0x1fd315b4>
 210:	1119270b 	tstne	r9, fp, lsl #14
 214:	40061201 	andmi	r1, r6, r1, lsl #4
 218:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 21c:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 220:	03193f00 	tsteq	r9, #0, 30
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	1119270b 	tstne	r9, fp, lsl #14
 22c:	40061201 	andmi	r1, r6, r1, lsl #4
 230:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 234:	Address 0x00000234 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007cc 	andcs	r0, r0, ip, asr #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000020c 	andeq	r0, r0, ip, lsl #4
   4:	00600002 	rsbeq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	55472f3a 	strbpl	r2, [r7, #-3898]	; 0xfffff0c6
  20:	5449442f 	strbpl	r4, [r9], #-1071	; 0xfffffbd1
  24:	20313531 	eorscs	r3, r1, r1, lsr r5
  28:	614d202d 	cmpvs	sp, sp, lsr #32
  2c:	6e696b73 	vmovvs.8	d9[7], r6
  30:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  38:	50206461 	eorpl	r6, r0, r1, ror #8
  3c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  40:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  48:	646f432f 	strbtvs	r4, [pc], #-815	; 50 <startup-0x1fffffb0>
  4c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  50:	75612f65 	strbvc	r2, [r1, #-3941]!	; 0xfffff09b
  54:	6f706f74 	svcvs	0x00706f74
  58:	0000676e 	andeq	r6, r0, lr, ror #14
  5c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  60:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  64:	00010063 	andeq	r0, r1, r3, rrx
  68:	05000000 	streq	r0, [r0, #-0]
  6c:	00000002 	andeq	r0, r0, r2
  70:	00e80320 	rsceq	r0, r8, r0, lsr #6
  74:	21211301 			; <UNDEFINED> instruction: 0x21211301
  78:	0302212f 	movweq	r2, #8495	; 0x212f
  7c:	00010100 	andeq	r0, r1, r0, lsl #2
  80:	00100205 	andseq	r0, r0, r5, lsl #4
  84:	f0032000 			; <UNDEFINED> instruction: 0xf0032000
  88:	3f2f0100 	svccc	0x002f0100
  8c:	003f3f42 	eorseq	r3, pc, r2, asr #30
  90:	06010402 	streq	r0, [r1], -r2, lsl #8
  94:	3d680620 	stclcc	6, cr0, [r8, #-128]!	; 0xffffff80
  98:	2f2f2fa1 	svccs	0x002f2fa1
  9c:	0c034b3f 			; <UNDEFINED> instruction: 0x0c034b3f
  a0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  a4:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
  a8:	002c0304 	eoreq	r0, ip, r4, lsl #6
  ac:	06010402 	streq	r0, [r1], -r2, lsl #8
  b0:	4d4e063c 	stclmi	6, cr0, [lr, #-240]	; 0xffffff10
  b4:	0200424b 	andeq	r4, r0, #-1342177276	; 0xb0000004
  b8:	003e0304 	eorseq	r0, lr, r4, lsl #6
  bc:	48030402 	stmdami	r3, {r1, sl}
  c0:	01040200 	mrseq	r0, R12_usr
  c4:	4e063c06 	cdpmi	12, 0, cr3, cr6, cr6, {0}
  c8:	7783674d 	strvc	r6, [r3, sp, asr #14]
  cc:	6777c967 	ldrbvs	ip, [r7, -r7, ror #18]!
  d0:	03741103 	cmneq	r4, #-1073741824	; 0xc0000000
  d4:	1103206f 	tstne	r3, pc, rrx
  d8:	2072034a 	rsbscs	r0, r2, sl, asr #6
  dc:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  e0:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  e4:	3d4d243d 	cfstrdcc	mvd2, [sp, #-244]	; 0xffffff0c
  e8:	3e3d3e3e 	mrccc	14, 1, r3, cr13, cr14, {1}
  ec:	01040200 	mrseq	r0, R12_usr
  f0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
  f4:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
  f8:	00300104 	eorseq	r0, r0, r4, lsl #2
  fc:	68010402 	stmdavs	r1, {r1, sl}
 100:	01040200 	mrseq	r0, R12_usr
 104:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 108:	3e4c2f01 	cdpcc	15, 4, cr2, cr12, cr1, {0}
 10c:	3e69bd3d 	mcrcc	13, 3, fp, cr9, cr13, {1}
 110:	30593e3e 	subscc	r3, r9, lr, lsr lr
 114:	3e5a303d 	mrccc	0, 2, r3, cr10, cr13, {1}
 118:	303d4c3e 	eorscc	r4, sp, lr, lsr ip
 11c:	3d313d4c 	ldccc	13, cr3, [r1, #-304]!	; 0xfffffed0
 120:	594c91cb 	stmdbpl	ip, {r0, r1, r3, r6, r7, r8, ip, pc}^
 124:	3e2f3d30 	mcrcc	13, 1, r3, cr15, cr0, {1}
 128:	5a303d5a 	bpl	c0f698 <startup-0x1f3f0968>
 12c:	3e3e313d 	mrccc	1, 1, r3, cr14, cr13, {1}
 130:	3e91773d 	mrccc	7, 4, r7, cr1, cr13, {1}
 134:	4d833e5a 	stcmi	14, cr3, [r3, #360]	; 0x168
 138:	3d5a3e91 	ldclcc	14, cr3, [sl, #-580]	; 0xfffffdbc
 13c:	674d833e 	smlaldxvs	r8, sp, lr, r3
 140:	324d6759 	subcc	r6, sp, #23330816	; 0x1640000
 144:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 148:	4b4b4b3e 	blmi	12d2e48 <startup-0x1ed2d1b8>
 14c:	3f3d4c4b 	svccc	0x003d4c4b
 150:	4c9f4c3f 	ldcmi	12, cr4, [pc], {63}	; 0x3f
 154:	03040200 	movweq	r0, #16896	; 0x4200
 158:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 15c:	02004803 	andeq	r4, r0, #196608	; 0x30000
 160:	58060104 	stmdapl	r6, {r2, r8}
 164:	02040200 	andeq	r0, r4, #0, 4
 168:	02004506 	andeq	r4, r0, #25165824	; 0x1800000
 16c:	58060104 	stmdapl	r6, {r2, r8}
 170:	4a0a0306 	bmi	280d90 <startup-0x1fd7f270>
 174:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
 178:	4a060104 	bmi	180590 <startup-0x1fe7fa70>
 17c:	02040200 	andeq	r0, r4, #0, 4
 180:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 184:	02004a03 	andeq	r4, r0, #12288	; 0x3000
 188:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
 18c:	4baf684f 	blmi	febda2d0 <ball+0xdebd9acc>
 190:	4b224b22 	blmi	892e20 <startup-0x1f76d1e0>
 194:	4b224b22 	blmi	892e24 <startup-0x1f76d1dc>
 198:	4b224b22 	blmi	892e28 <startup-0x1f76d1d8>
 19c:	3e234b22 	vmulcc.f64	d4, d3, d18
 1a0:	784b3e69 	stmdavc	fp, {r0, r3, r5, r6, r9, sl, fp, ip, sp}^
 1a4:	cac9694b 	bgt	ff25a6d8 <ball+0xdf259ed4>
 1a8:	a23eae92 	eorsge	sl, lr, #2336	; 0x920
 1ac:	7fbf0393 	svcvc	0x00bf0393
 1b0:	00c203ac 	sbceq	r0, r2, ip, lsr #7
 1b4:	004d6920 	subeq	r6, sp, r0, lsr #18
 1b8:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1bc:	03040200 	movweq	r0, #16896	; 0x4200
 1c0:	02009c08 	andeq	r9, r0, #8, 24	; 0x800
 1c4:	3c060104 	stfccs	f0, [r6], {4}
 1c8:	4d4d6a06 	vstrmi	s13, [sp, #-24]	; 0xffffffe8
 1cc:	03040200 	movweq	r0, #16896	; 0x4200
 1d0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1d4:	009c0803 	addseq	r0, ip, r3, lsl #16
 1d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1dc:	4d6a063c 	stclmi	6, cr0, [sl, #-240]!	; 0xffffff10
 1e0:	76754c4b 	ldrbtvc	r4, [r5], -fp, asr #24
 1e4:	5a845a4c 	bpl	fe116b1c <ball+0xde116318>
 1e8:	5b845a4c 	blpl	fe116b20 <ball+0xde11631c>
 1ec:	3d674d4b 	stclcc	13, cr4, [r7, #-300]!	; 0xfffffed4
 1f0:	3d304d3d 	ldccc	13, cr4, [r0, #-244]!	; 0xffffff0c
 1f4:	3da13d30 	stccc	13, cr3, [r1, #192]!	; 0xc0
 1f8:	31302f30 	teqcc	r0, r0, lsr pc
 1fc:	01040200 	mrseq	r0, R12_usr
 200:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 204:	02005a01 	andeq	r5, r0, #4096	; 0x1000
 208:	023a0104 	eorseq	r0, sl, #4, 2
 20c:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
  14:	72670073 	rsbvc	r0, r7, #115	; 0x73
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  20:	5f657469 	svcpl	0x00657469
  24:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  28:	00646e61 	rsbeq	r6, r4, r1, ror #28
  2c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  30:	6f6d0065 	svcvs	0x006d0065
  34:	73006576 	movwvc	r6, #1398	; 0x576
  38:	63656c65 	cmnvs	r5, #25856	; 0x6500
  3c:	6f635f74 	svcvs	0x00635f74
  40:	6f72746e 	svcvs	0x0072746e
  44:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  48:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
  4c:	445c5547 	ldrbmi	r5, [ip], #-1351	; 0xfffffab9
  50:	35315449 	ldrcc	r5, [r1, #-1097]!	; 0xfffffbb7
  54:	202d2031 	eorcs	r2, sp, r1, lsr r0
  58:	6b73614d 	blvs	1cd8594 <startup-0x1e327a6c>
  5c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
  60:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
  64:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
  68:	6f725020 	svcvs	0x00725020
  6c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  70:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
  74:	435c676e 	cmpmi	ip, #28835840	; 0x1b80000
  78:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  7c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  80:	6f747561 	svcvs	0x00747561
  84:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  88:	665f7800 	ldrbvs	r7, [pc], -r0, lsl #16
  8c:	73697379 	cmnvc	r9, #-469762047	; 0xe4000001
  90:	6964006b 	stmdbvs	r4!, {r0, r1, r3, r5, r6}^
  94:	5a007872 	bpl	1e264 <startup-0x1ffe1d9c>
  98:	55472f3a 	strbpl	r2, [r7, #-3898]	; 0xfffff0c6
  9c:	5449442f 	strbpl	r4, [r9], #-1071	; 0xfffffbd1
  a0:	20313531 	eorscs	r3, r1, r1, lsr r5
  a4:	614d202d 	cmpvs	sp, sp, lsr #32
  a8:	6e696b73 	vmovvs.8	d9[7], r6
  ac:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  b4:	50206461 	eorpl	r6, r0, r1, ror #8
  b8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  bc:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  c0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  c4:	646f432f 	strbtvs	r4, [pc], #-815	; cc <startup-0x1fffff34>
  c8:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  cc:	75612f65 	strbvc	r2, [r1, #-3941]!	; 0xfffff09b
  d0:	6f706f74 	svcvs	0x00706f74
  d4:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
  d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  dc:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  e0:	61726700 	cmnvs	r2, r0, lsl #14
  e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  e8:	6165725f 	cmnvs	r5, pc, asr r2
  ec:	61645f64 	cmnvs	r4, r4, ror #30
  f0:	70006174 	andvc	r6, r0, r4, ror r1
  f4:	00656761 	rsbeq	r6, r5, r1, ror #14
  f8:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  fc:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
 100:	5f79616c 	svcpl	0x0079616c
 104:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 108:	5074006f 	rsbspl	r0, r4, pc, rrx
 10c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 110:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 114:	7200544e 	andvc	r5, r0, #1308622848	; 0x4e000000
 118:	765f7465 	ldrbvc	r7, [pc], -r5, ror #8
 11c:	75006c61 	strvc	r6, [r0, #-3169]	; 0xfffff39f
 120:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 124:	2064656e 	rsbcs	r6, r4, lr, ror #10
 128:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 12c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 130:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 134:	70006465 	andvc	r6, r0, r5, ror #8
 138:	0078736f 	rsbseq	r7, r8, pc, ror #6
 13c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 140:	6c616200 	sfmvs	f6, 2, [r1], #-0
 144:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 148:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 14c:	67007972 	smlsdxvs	r0, r2, r9, r7
 150:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 154:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 158:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 15c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 160:	70610070 	rsbvc	r0, r1, r0, ror r0
 164:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 168:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
 16c:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
 170:	73756200 	cmnvc	r5, #0, 4
 174:	616d0079 	smcvs	53257	; 0xd009
 178:	64006e69 	strvs	r6, [r0], #-3689	; 0xfffff197
 17c:	00797269 	rsbseq	r7, r9, r9, ror #4
 180:	70617267 	rsbvc	r7, r1, r7, ror #4
 184:	5f636968 	svcpl	0x00636968
 188:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 18c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 190:	6700657a 	smlsdxvs	r0, sl, r5, r6
 194:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 198:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 19c:	5f6c7274 	svcpl	0x006c7274
 1a0:	5f746962 	svcpl	0x00746962
 1a4:	61656c63 	cmnvs	r5, r3, ror #24
 1a8:	72670072 	rsbvc	r0, r7, #114	; 0x72
 1ac:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b0:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 1b4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1b8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 1bc:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
 1c0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1c4:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1cc:	6f654774 	svcvs	0x00654774
 1d0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1d4:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
 1d8:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 1dc:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 1e0:	5f38746e 	svcpl	0x0038746e
 1e4:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 1e8:	0078657a 	rsbseq	r6, r8, sl, ror r5
 1ec:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1f0:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 1f4:	5f79616c 	svcpl	0x0079616c
 1f8:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
 1fc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 200:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 204:	6f5f6465 	svcvs	0x005f6465
 208:	63656a62 	cmnvs	r5, #401408	; 0x62000
 20c:	61620074 	smcvs	8196	; 0x2004
 210:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 214:	00776172 	rsbseq	r6, r7, r2, ror r1
 218:	20554e47 	subscs	r4, r5, r7, asr #28
 21c:	20393943 	eorscs	r3, r9, r3, asr #18
 220:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 224:	30322031 	eorscc	r2, r2, r1, lsr r0
 228:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
 22c:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
 230:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 234:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 238:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 23c:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 240:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 244:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
 248:	6172622d 	cmnvs	r2, sp, lsr #4
 24c:	2068636e 	rsbcs	r6, r8, lr, ror #6
 250:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 254:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 258:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 25c:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
 260:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 264:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 268:	616d2d20 	cmnvs	sp, r0, lsr #26
 26c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 270:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 274:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 278:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 27c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 280:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 284:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 288:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 28c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 290:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 294:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 298:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 29c:	67007865 	strvs	r7, [r0, -r5, ror #16]
 2a0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2a8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2ac:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2b0:	72670061 	rsbvc	r0, r7, #97	; 0x61
 2b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b8:	61775f63 	cmnvs	r7, r3, ror #30
 2bc:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 2c0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 2c4:	61726700 	cmnvs	r2, r0, lsl #14
 2c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2cc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2d0:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 2d4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 2d8:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
 2dc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 2e0:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
 2e4:	5f726165 	svcpl	0x00726165
 2e8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2ec:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 2f0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2f4:	3030355f 	eorscc	r3, r0, pc, asr r5
 2f8:	7400736e 	strvc	r7, [r0], #-878	; 0xfffffc92
 2fc:	006a624f 	rsbeq	r6, sl, pc, asr #4
 300:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 304:	6a626f5f 	bvs	189c088 <startup-0x1e763f78>
 308:	00746365 	rsbseq	r6, r4, r5, ror #6
 30c:	70617267 	rsbvc	r7, r1, r7, ror #4
 310:	5f636968 	svcpl	0x00636968
 314:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 318:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 31c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 320:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 324:	5f65766f 	svcpl	0x0065766f
 328:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 32c:	73007463 	movwvc	r7, #1123	; 0x463
 330:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 334:	70730078 	rsbsvc	r0, r3, r8, ror r0
 338:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 33c:	424f5000 	submi	r5, pc, #0
 340:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 344:	626f7400 	rsbvs	r7, pc, #0, 8
 348:	Address 0x00000348 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffeb0a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000066 	andcs	r0, r0, r6, rrx
  64:	0000002e 	andeq	r0, r0, lr, lsr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000094 	mulcs	r0, r4, r0
  84:	00000032 	andeq	r0, r0, r2, lsr r0
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	0000002a 	andeq	r0, r0, sl, lsr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000124 	andcs	r0, r0, r4, lsr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000017e 	andcs	r0, r0, lr, ror r1
 104:	0000006e 	andeq	r0, r0, lr, rrx
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001ec 	andcs	r0, r0, ip, ror #3
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	2000027c 	andcs	r0, r0, ip, ror r2
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200002fc 	strdcs	r0, [r0], -ip
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000033c 	andcs	r0, r0, ip, lsr r3
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000382 	andcs	r0, r0, r2, lsl #7
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003ac 	andcs	r0, r0, ip, lsr #7
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000402 	andcs	r0, r0, r2, lsl #8
 1e0:	00000066 	andeq	r0, r0, r6, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000468 	andcs	r0, r0, r8, ror #8
 200:	00000194 	muleq	r0, r4, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	300e4101 	andcc	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	200005fc 	strdcs	r0, [r0], -ip
 224:	0000005e 	andeq	r0, r0, lr, asr r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	2000065a 	andcs	r0, r0, sl, asr r6
 244:	0000005e 	andeq	r0, r0, lr, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 264:	00000094 	muleq	r0, r4, r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	2000074c 	andcs	r0, r0, ip, asr #14
 284:	00000020 	andeq	r0, r0, r0, lsr #32
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	2000076c 	andcs	r0, r0, ip, ror #14
 2a4:	00000028 	andeq	r0, r0, r8, lsr #32
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	20000794 	mulcs	r0, r4, r7
 2c0:	00000038 	andeq	r0, r0, r8, lsr r0
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
