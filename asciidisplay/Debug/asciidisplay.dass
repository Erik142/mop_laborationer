
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 ASCII_REG ascii_ctrl_reg, ascii_data_reg;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9b4 	bl	20000370 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *systick_ctrl_addr = 0x0;
20000014:	4b0f      	ldr	r3, [pc, #60]	; (20000054 <delay_250ns+0x44>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	2200      	movs	r2, #0
2000001a:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles = 0x2A)
    *systick_load_addr = 0x2A;
2000001c:	4b0e      	ldr	r3, [pc, #56]	; (20000058 <delay_250ns+0x48>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	222a      	movs	r2, #42	; 0x2a
20000022:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *systick_load_addr /= 0x2A; // Decrease delay if we're simulating
#endif
    
    *systick_val_addr = 0;
20000024:	4b0d      	ldr	r3, [pc, #52]	; (2000005c <delay_250ns+0x4c>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	2200      	movs	r2, #0
2000002a:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *systick_ctrl_addr = 0x5;
2000002c:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
2000002e:	681b      	ldr	r3, [r3, #0]
20000030:	2205      	movs	r2, #5
20000032:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*systick_ctrl_addr & 0x10000) == 0);
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	4b07      	ldr	r3, [pc, #28]	; (20000054 <delay_250ns+0x44>)
20000038:	681b      	ldr	r3, [r3, #0]
2000003a:	681a      	ldr	r2, [r3, #0]
2000003c:	2380      	movs	r3, #128	; 0x80
2000003e:	025b      	lsls	r3, r3, #9
20000040:	4013      	ands	r3, r2
20000042:	d0f8      	beq.n	20000036 <delay_250ns+0x26>
    
    *systick_ctrl_addr = 0x0;
20000044:	4b03      	ldr	r3, [pc, #12]	; (20000054 <delay_250ns+0x44>)
20000046:	681b      	ldr	r3, [r3, #0]
20000048:	2200      	movs	r2, #0
2000004a:	601a      	str	r2, [r3, #0]
}
2000004c:	46c0      	nop			; (mov r8, r8)
2000004e:	46bd      	mov	sp, r7
20000050:	bd80      	pop	{r7, pc}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	20000404 	andcs	r0, r0, r4, lsl #8
20000058:	20000408 	andcs	r0, r0, r8, lsl #8
2000005c:	2000040c 	andcs	r0, r0, ip, lsl #8

20000060 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	009b      	lsls	r3, r3, #2
2000006c:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = limit/10;
#endif
    
    for (int i = 1; i <= limit; i++)
2000006e:	2301      	movs	r3, #1
20000070:	60fb      	str	r3, [r7, #12]
20000072:	e004      	b.n	2000007e <delay_mikro+0x1e>
    {
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
    for (int i = 1; i <= limit; i++)
20000078:	68fb      	ldr	r3, [r7, #12]
2000007a:	3301      	adds	r3, #1
2000007c:	60fb      	str	r3, [r7, #12]
2000007e:	68fa      	ldr	r2, [r7, #12]
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	429a      	cmp	r2, r3
20000084:	ddf6      	ble.n	20000074 <delay_mikro+0x14>
    }
}
20000086:	46c0      	nop			; (mov r8, r8)
20000088:	46bd      	mov	sp, r7
2000008a:	b004      	add	sp, #16
2000008c:	bd80      	pop	{r7, pc}

2000008e <delay_mili>:

void delay_mili(unsigned int ms)
{
2000008e:	b580      	push	{r7, lr}
20000090:	b084      	sub	sp, #16
20000092:	af00      	add	r7, sp, #0
20000094:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
20000096:	23fa      	movs	r3, #250	; 0xfa
20000098:	009b      	lsls	r3, r3, #2
2000009a:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
#endif
    
    for (i = 1; i <= limit; i++)
2000009c:	2301      	movs	r3, #1
2000009e:	60fb      	str	r3, [r7, #12]
200000a0:	e006      	b.n	200000b0 <delay_mili+0x22>
    {
        delay_mikro(ms);
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	0018      	movs	r0, r3
200000a6:	f7ff ffdb 	bl	20000060 <delay_mikro>
    for (i = 1; i <= limit; i++)
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	68fa      	ldr	r2, [r7, #12]
200000b2:	68bb      	ldr	r3, [r7, #8]
200000b4:	429a      	cmp	r2, r3
200000b6:	ddf4      	ble.n	200000a2 <delay_mili+0x14>
    }
}
200000b8:	46c0      	nop			; (mov r8, r8)
200000ba:	46bd      	mov	sp, r7
200000bc:	b004      	add	sp, #16
200000be:	bd80      	pop	{r7, pc}

200000c0 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x)
{
200000c0:	b580      	push	{r7, lr}
200000c2:	b082      	sub	sp, #8
200000c4:	af00      	add	r7, sp, #0
200000c6:	0002      	movs	r2, r0
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	701a      	strb	r2, [r3, #0]
    *ascii_ctrl_reg.out = (*ascii_ctrl_reg.out & ~x) | x;
200000cc:	4b06      	ldr	r3, [pc, #24]	; (200000e8 <ascii_ctrl_bit_set+0x28>)
200000ce:	681b      	ldr	r3, [r3, #0]
200000d0:	7819      	ldrb	r1, [r3, #0]
200000d2:	4b05      	ldr	r3, [pc, #20]	; (200000e8 <ascii_ctrl_bit_set+0x28>)
200000d4:	681b      	ldr	r3, [r3, #0]
200000d6:	1dfa      	adds	r2, r7, #7
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	430a      	orrs	r2, r1
200000dc:	b2d2      	uxtb	r2, r2
200000de:	701a      	strb	r2, [r3, #0]
}
200000e0:	46c0      	nop			; (mov r8, r8)
200000e2:	46bd      	mov	sp, r7
200000e4:	b002      	add	sp, #8
200000e6:	bd80      	pop	{r7, pc}
200000e8:	200003f4 	strdcs	r0, [r0], -r4

200000ec <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
200000ec:	b580      	push	{r7, lr}
200000ee:	b082      	sub	sp, #8
200000f0:	af00      	add	r7, sp, #0
200000f2:	0002      	movs	r2, r0
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	701a      	strb	r2, [r3, #0]
    *ascii_ctrl_reg.out = (*ascii_ctrl_reg.out & ~x);
200000f8:	4b09      	ldr	r3, [pc, #36]	; (20000120 <ascii_ctrl_bit_clear+0x34>)
200000fa:	681b      	ldr	r3, [r3, #0]
200000fc:	781b      	ldrb	r3, [r3, #0]
200000fe:	b25b      	sxtb	r3, r3
20000100:	1dfa      	adds	r2, r7, #7
20000102:	7812      	ldrb	r2, [r2, #0]
20000104:	b252      	sxtb	r2, r2
20000106:	43d2      	mvns	r2, r2
20000108:	b252      	sxtb	r2, r2
2000010a:	4013      	ands	r3, r2
2000010c:	b25a      	sxtb	r2, r3
2000010e:	4b04      	ldr	r3, [pc, #16]	; (20000120 <ascii_ctrl_bit_clear+0x34>)
20000110:	681b      	ldr	r3, [r3, #0]
20000112:	b2d2      	uxtb	r2, r2
20000114:	701a      	strb	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b002      	add	sp, #8
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	200003f4 	strdcs	r0, [r0], -r4

20000124 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20000130:	2040      	movs	r0, #64	; 0x40
20000132:	f7ff ffc5 	bl	200000c0 <ascii_ctrl_bit_set>
    *ascii_data_reg.out = byte;
20000136:	4b07      	ldr	r3, [pc, #28]	; (20000154 <ascii_write_controller+0x30>)
20000138:	681b      	ldr	r3, [r3, #0]
2000013a:	1dfa      	adds	r2, r7, #7
2000013c:	7812      	ldrb	r2, [r2, #0]
2000013e:	701a      	strb	r2, [r3, #0]
    delay_250ns();
20000140:	f7ff ff66 	bl	20000010 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
20000144:	2040      	movs	r0, #64	; 0x40
20000146:	f7ff ffd1 	bl	200000ec <ascii_ctrl_bit_clear>
}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	46bd      	mov	sp, r7
2000014e:	b002      	add	sp, #8
20000150:	bd80      	pop	{r7, pc}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	200003fc 	strdcs	r0, [r0], -ip

20000158 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000158:	b580      	push	{r7, lr}
2000015a:	b082      	sub	sp, #8
2000015c:	af00      	add	r7, sp, #0
    unsigned char ret_val;
    
    ascii_ctrl_bit_set(B_E);
2000015e:	2040      	movs	r0, #64	; 0x40
20000160:	f7ff ffae 	bl	200000c0 <ascii_ctrl_bit_set>
    
    delay_250ns();
20000164:	f7ff ff54 	bl	20000010 <delay_250ns>
    delay_250ns();
20000168:	f7ff ff52 	bl	20000010 <delay_250ns>
    
    ret_val = *ascii_data_reg.in;
2000016c:	4b06      	ldr	r3, [pc, #24]	; (20000188 <ascii_read_controller+0x30>)
2000016e:	685a      	ldr	r2, [r3, #4]
20000170:	1dfb      	adds	r3, r7, #7
20000172:	7812      	ldrb	r2, [r2, #0]
20000174:	701a      	strb	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_E);
20000176:	2040      	movs	r0, #64	; 0x40
20000178:	f7ff ffb8 	bl	200000ec <ascii_ctrl_bit_clear>
    
    return ret_val;
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	781b      	ldrb	r3, [r3, #0]
}
20000180:	0018      	movs	r0, r3
20000182:	46bd      	mov	sp, r7
20000184:	b002      	add	sp, #8
20000186:	bd80      	pop	{r7, pc}
20000188:	200003fc 	strdcs	r0, [r0], -ip

2000018c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
2000018c:	b580      	push	{r7, lr}
2000018e:	b082      	sub	sp, #8
20000190:	af00      	add	r7, sp, #0
20000192:	0002      	movs	r2, r0
20000194:	1dfb      	adds	r3, r7, #7
20000196:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RW | B_RS);
20000198:	2003      	movs	r0, #3
2000019a:	f7ff ffa7 	bl	200000ec <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
2000019e:	1dfb      	adds	r3, r7, #7
200001a0:	781b      	ldrb	r3, [r3, #0]
200001a2:	0018      	movs	r0, r3
200001a4:	f7ff ffbe 	bl	20000124 <ascii_write_controller>
}
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b002      	add	sp, #8
200001ae:	bd80      	pop	{r7, pc}

200001b0 <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
200001b0:	b580      	push	{r7, lr}
200001b2:	b082      	sub	sp, #8
200001b4:	af00      	add	r7, sp, #0
200001b6:	0002      	movs	r2, r0
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200001bc:	2001      	movs	r0, #1
200001be:	f7ff ff7f 	bl	200000c0 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200001c2:	2002      	movs	r0, #2
200001c4:	f7ff ff92 	bl	200000ec <ascii_ctrl_bit_clear>
    
    ascii_write_controller(data);
200001c8:	1dfb      	adds	r3, r7, #7
200001ca:	781b      	ldrb	r3, [r3, #0]
200001cc:	0018      	movs	r0, r3
200001ce:	f7ff ffa9 	bl	20000124 <ascii_write_controller>
}
200001d2:	46c0      	nop			; (mov r8, r8)
200001d4:	46bd      	mov	sp, r7
200001d6:	b002      	add	sp, #8
200001d8:	bd80      	pop	{r7, pc}

200001da <ascii_read_status>:

unsigned char ascii_read_status(void)
{
200001da:	b590      	push	{r4, r7, lr}
200001dc:	b083      	sub	sp, #12
200001de:	af00      	add	r7, sp, #0
    unsigned char status;
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x0000;
200001e0:	4b0b      	ldr	r3, [pc, #44]	; (20000210 <ascii_read_status+0x36>)
200001e2:	2200      	movs	r2, #0
200001e4:	801a      	strh	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_RS);
200001e6:	2001      	movs	r0, #1
200001e8:	f7ff ff80 	bl	200000ec <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
200001ec:	2002      	movs	r0, #2
200001ee:	f7ff ff67 	bl	200000c0 <ascii_ctrl_bit_set>
    
    status = ascii_read_controller();
200001f2:	1dfc      	adds	r4, r7, #7
200001f4:	f7ff ffb0 	bl	20000158 <ascii_read_controller>
200001f8:	0003      	movs	r3, r0
200001fa:	7023      	strb	r3, [r4, #0]
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x5555;
200001fc:	4b04      	ldr	r3, [pc, #16]	; (20000210 <ascii_read_status+0x36>)
200001fe:	4a05      	ldr	r2, [pc, #20]	; (20000214 <ascii_read_status+0x3a>)
20000200:	801a      	strh	r2, [r3, #0]
    
    return status;
20000202:	1dfb      	adds	r3, r7, #7
20000204:	781b      	ldrb	r3, [r3, #0]
}
20000206:	0018      	movs	r0, r3
20000208:	46bd      	mov	sp, r7
2000020a:	b003      	add	sp, #12
2000020c:	bd90      	pop	{r4, r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	40021002 	andmi	r1, r2, r2
20000214:	00005555 	andeq	r5, r0, r5, asr r5

20000218 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000218:	b590      	push	{r4, r7, lr}
2000021a:	b083      	sub	sp, #12
2000021c:	af00      	add	r7, sp, #0
    unsigned char data;
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x0000;
2000021e:	4b0a      	ldr	r3, [pc, #40]	; (20000248 <ascii_read_data+0x30>)
20000220:	2200      	movs	r2, #0
20000222:	801a      	strh	r2, [r3, #0]
    
    ascii_ctrl_bit_set(B_RS | B_RW);
20000224:	2003      	movs	r0, #3
20000226:	f7ff ff4b 	bl	200000c0 <ascii_ctrl_bit_set>
    
    data = ascii_read_controller();
2000022a:	1dfc      	adds	r4, r7, #7
2000022c:	f7ff ff94 	bl	20000158 <ascii_read_controller>
20000230:	0003      	movs	r3, r0
20000232:	7023      	strb	r3, [r4, #0]
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x5555;
20000234:	4b04      	ldr	r3, [pc, #16]	; (20000248 <ascii_read_data+0x30>)
20000236:	4a05      	ldr	r2, [pc, #20]	; (2000024c <ascii_read_data+0x34>)
20000238:	801a      	strh	r2, [r3, #0]
    
    return data;
2000023a:	1dfb      	adds	r3, r7, #7
2000023c:	781b      	ldrb	r3, [r3, #0]
}
2000023e:	0018      	movs	r0, r3
20000240:	46bd      	mov	sp, r7
20000242:	b003      	add	sp, #12
20000244:	bd90      	pop	{r4, r7, pc}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	40021002 	andmi	r1, r2, r2
2000024c:	00005555 	andeq	r5, r0, r5, asr r5

20000250 <ascii_init>:

void ascii_init(void)
{
20000250:	b580      	push	{r7, lr}
20000252:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_SELECT);
20000254:	2004      	movs	r0, #4
20000256:	f7ff ff33 	bl	200000c0 <ascii_ctrl_bit_set>
    
    while( (ascii_read_status() & 0x80) == 0x80);
2000025a:	46c0      	nop			; (mov r8, r8)
2000025c:	f7ff ffbd 	bl	200001da <ascii_read_status>
20000260:	0003      	movs	r3, r0
20000262:	001a      	movs	r2, r3
20000264:	2380      	movs	r3, #128	; 0x80
20000266:	4013      	ands	r3, r2
20000268:	2b80      	cmp	r3, #128	; 0x80
2000026a:	d0f7      	beq.n	2000025c <ascii_init+0xc>
    
    delay_mikro(8);
2000026c:	2008      	movs	r0, #8
2000026e:	f7ff fef7 	bl	20000060 <delay_mikro>
    
    // Set font size to 5x8 and set 2 rows
    ascii_write_cmd(0x3C);
20000272:	203c      	movs	r0, #60	; 0x3c
20000274:	f7ff ff8a 	bl	2000018c <ascii_write_cmd>
    delay_mikro(40);
20000278:	2028      	movs	r0, #40	; 0x28
2000027a:	f7ff fef1 	bl	20000060 <delay_mikro>
    
    // Set display and marker on
    ascii_write_cmd(0x0E);
2000027e:	200e      	movs	r0, #14
20000280:	f7ff ff84 	bl	2000018c <ascii_write_cmd>
    delay_mikro(40);
20000284:	2028      	movs	r0, #40	; 0x28
20000286:	f7ff feeb 	bl	20000060 <delay_mikro>
    
    // Clear Display
    ascii_write_cmd(0x01);
2000028a:	2001      	movs	r0, #1
2000028c:	f7ff ff7e 	bl	2000018c <ascii_write_cmd>
    delay_mili(2);
20000290:	2002      	movs	r0, #2
20000292:	f7ff fefc 	bl	2000008e <delay_mili>
    
    // Set addressing mode to increment, no buffer shift
    ascii_write_cmd(0x06);
20000296:	2006      	movs	r0, #6
20000298:	f7ff ff78 	bl	2000018c <ascii_write_cmd>
    delay_mikro(40);
2000029c:	2028      	movs	r0, #40	; 0x28
2000029e:	f7ff fedf 	bl	20000060 <delay_mikro>
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	bd80      	pop	{r7, pc}

200002a8 <ascii_write_char>:

void ascii_write_char(char c)
{
200002a8:	b580      	push	{r7, lr}
200002aa:	b082      	sub	sp, #8
200002ac:	af00      	add	r7, sp, #0
200002ae:	0002      	movs	r2, r0
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	701a      	strb	r2, [r3, #0]
    while( (ascii_read_status() & 0x80) == 0x80);
200002b4:	46c0      	nop			; (mov r8, r8)
200002b6:	f7ff ff90 	bl	200001da <ascii_read_status>
200002ba:	0003      	movs	r3, r0
200002bc:	001a      	movs	r2, r3
200002be:	2380      	movs	r3, #128	; 0x80
200002c0:	4013      	ands	r3, r2
200002c2:	2b80      	cmp	r3, #128	; 0x80
200002c4:	d0f7      	beq.n	200002b6 <ascii_write_char+0xe>
    
    delay_mikro(8);
200002c6:	2008      	movs	r0, #8
200002c8:	f7ff feca 	bl	20000060 <delay_mikro>
    
    ascii_write_data(c);
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	0018      	movs	r0, r3
200002d2:	f7ff ff6d 	bl	200001b0 <ascii_write_data>
    
    delay_mikro(43);
200002d6:	202b      	movs	r0, #43	; 0x2b
200002d8:	f7ff fec2 	bl	20000060 <delay_mikro>
}
200002dc:	46c0      	nop			; (mov r8, r8)
200002de:	46bd      	mov	sp, r7
200002e0:	b002      	add	sp, #8
200002e2:	bd80      	pop	{r7, pc}

200002e4 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
200002e4:	b580      	push	{r7, lr}
200002e6:	b084      	sub	sp, #16
200002e8:	af00      	add	r7, sp, #0
200002ea:	6078      	str	r0, [r7, #4]
200002ec:	6039      	str	r1, [r7, #0]
    char address = x - 1;
200002ee:	687b      	ldr	r3, [r7, #4]
200002f0:	b2da      	uxtb	r2, r3
200002f2:	230f      	movs	r3, #15
200002f4:	18fb      	adds	r3, r7, r3
200002f6:	3a01      	subs	r2, #1
200002f8:	701a      	strb	r2, [r3, #0]
    
    if (y == 2)
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	2b02      	cmp	r3, #2
200002fe:	d105      	bne.n	2000030c <ascii_gotoxy+0x28>
    {
        address += 0x40;
20000300:	220f      	movs	r2, #15
20000302:	18bb      	adds	r3, r7, r2
20000304:	18ba      	adds	r2, r7, r2
20000306:	7812      	ldrb	r2, [r2, #0]
20000308:	3240      	adds	r2, #64	; 0x40
2000030a:	701a      	strb	r2, [r3, #0]
    }
    
    ascii_write_cmd( 0x80 | address);
2000030c:	230f      	movs	r3, #15
2000030e:	18fb      	adds	r3, r7, r3
20000310:	781b      	ldrb	r3, [r3, #0]
20000312:	2280      	movs	r2, #128	; 0x80
20000314:	4252      	negs	r2, r2
20000316:	4313      	orrs	r3, r2
20000318:	b2db      	uxtb	r3, r3
2000031a:	0018      	movs	r0, r3
2000031c:	f7ff ff36 	bl	2000018c <ascii_write_cmd>
}
20000320:	46c0      	nop			; (mov r8, r8)
20000322:	46bd      	mov	sp, r7
20000324:	b004      	add	sp, #16
20000326:	bd80      	pop	{r7, pc}

20000328 <app_init>:

void app_init(void)
{
20000328:	b580      	push	{r7, lr}
2000032a:	af00      	add	r7, sp, #0
#ifdef USBDM
    * ( (unsigned long *) 0x40023830) = 0x18; // Starta klockor port D och E
    __asm__ volatile( " LDR R0,=0x08000209\n BLX R0 \n"); //Initiera PLL
#endif
    
    ascii_ctrl_reg.in = ( (unsigned char *) portIdrLow);
2000032c:	4b08      	ldr	r3, [pc, #32]	; (20000350 <app_init+0x28>)
2000032e:	4a09      	ldr	r2, [pc, #36]	; (20000354 <app_init+0x2c>)
20000330:	605a      	str	r2, [r3, #4]
    ascii_ctrl_reg.out = ( (unsigned char *) portOdrLow);
20000332:	4b07      	ldr	r3, [pc, #28]	; (20000350 <app_init+0x28>)
20000334:	4a08      	ldr	r2, [pc, #32]	; (20000358 <app_init+0x30>)
20000336:	601a      	str	r2, [r3, #0]
    
    ascii_data_reg.in = ( (unsigned char *) portIdrHigh);
20000338:	4b08      	ldr	r3, [pc, #32]	; (2000035c <app_init+0x34>)
2000033a:	4a09      	ldr	r2, [pc, #36]	; (20000360 <app_init+0x38>)
2000033c:	605a      	str	r2, [r3, #4]
    ascii_data_reg.out = ( (unsigned char *) portOdrHigh);
2000033e:	4b07      	ldr	r3, [pc, #28]	; (2000035c <app_init+0x34>)
20000340:	4a08      	ldr	r2, [pc, #32]	; (20000364 <app_init+0x3c>)
20000342:	601a      	str	r2, [r3, #0]
    
    * ( (unsigned long *) portModer) = 0x55555555;
20000344:	4b08      	ldr	r3, [pc, #32]	; (20000368 <app_init+0x40>)
20000346:	4a09      	ldr	r2, [pc, #36]	; (2000036c <app_init+0x44>)
20000348:	601a      	str	r2, [r3, #0]
}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	46bd      	mov	sp, r7
2000034e:	bd80      	pop	{r7, pc}
20000350:	200003f4 	strdcs	r0, [r0], -r4
20000354:	40021010 	andmi	r1, r2, r0, lsl r0
20000358:	40021014 	andmi	r1, r2, r4, lsl r0
2000035c:	200003fc 	strdcs	r0, [r0], -ip
20000360:	40021011 	andmi	r1, r2, r1, lsl r0
20000364:	40021015 	andmi	r1, r2, r5, lsl r0
20000368:	40021000 	andmi	r1, r2, r0
2000036c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000370 <main>:

void main(void)
{
20000370:	b5b0      	push	{r4, r5, r7, lr}
20000372:	b088      	sub	sp, #32
20000374:	af00      	add	r7, sp, #0
    char *s;
    char test1[] = "Hej ";
20000376:	2414      	movs	r4, #20
20000378:	193b      	adds	r3, r7, r4
2000037a:	4a1c      	ldr	r2, [pc, #112]	; (200003ec <main+0x7c>)
2000037c:	6811      	ldr	r1, [r2, #0]
2000037e:	6019      	str	r1, [r3, #0]
20000380:	7912      	ldrb	r2, [r2, #4]
20000382:	711a      	strb	r2, [r3, #4]
    char test2[] = "Display - test";
20000384:	1d3b      	adds	r3, r7, #4
20000386:	4a1a      	ldr	r2, [pc, #104]	; (200003f0 <main+0x80>)
20000388:	ca23      	ldmia	r2!, {r0, r1, r5}
2000038a:	c323      	stmia	r3!, {r0, r1, r5}
2000038c:	8811      	ldrh	r1, [r2, #0]
2000038e:	8019      	strh	r1, [r3, #0]
20000390:	7892      	ldrb	r2, [r2, #2]
20000392:	709a      	strb	r2, [r3, #2]
    
    app_init();
20000394:	f7ff ffc8 	bl	20000328 <app_init>
    ascii_init();
20000398:	f7ff ff5a 	bl	20000250 <ascii_init>
    ascii_gotoxy(1,1);
2000039c:	2101      	movs	r1, #1
2000039e:	2001      	movs	r0, #1
200003a0:	f7ff ffa0 	bl	200002e4 <ascii_gotoxy>
    
    s = test1;
200003a4:	193b      	adds	r3, r7, r4
200003a6:	61fb      	str	r3, [r7, #28]
    
    while( *s )
200003a8:	e006      	b.n	200003b8 <main+0x48>
    {
        ascii_write_char(*s++);
200003aa:	69fb      	ldr	r3, [r7, #28]
200003ac:	1c5a      	adds	r2, r3, #1
200003ae:	61fa      	str	r2, [r7, #28]
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	0018      	movs	r0, r3
200003b4:	f7ff ff78 	bl	200002a8 <ascii_write_char>
    while( *s )
200003b8:	69fb      	ldr	r3, [r7, #28]
200003ba:	781b      	ldrb	r3, [r3, #0]
200003bc:	2b00      	cmp	r3, #0
200003be:	d1f4      	bne.n	200003aa <main+0x3a>
    }
    
    ascii_gotoxy(1,2);
200003c0:	2102      	movs	r1, #2
200003c2:	2001      	movs	r0, #1
200003c4:	f7ff ff8e 	bl	200002e4 <ascii_gotoxy>
    
    s = test2;
200003c8:	1d3b      	adds	r3, r7, #4
200003ca:	61fb      	str	r3, [r7, #28]
    
    while( *s )
200003cc:	e006      	b.n	200003dc <main+0x6c>
    {
        ascii_write_char(*s++);
200003ce:	69fb      	ldr	r3, [r7, #28]
200003d0:	1c5a      	adds	r2, r3, #1
200003d2:	61fa      	str	r2, [r7, #28]
200003d4:	781b      	ldrb	r3, [r3, #0]
200003d6:	0018      	movs	r0, r3
200003d8:	f7ff ff66 	bl	200002a8 <ascii_write_char>
    while( *s )
200003dc:	69fb      	ldr	r3, [r7, #28]
200003de:	781b      	ldrb	r3, [r3, #0]
200003e0:	2b00      	cmp	r3, #0
200003e2:	d1f4      	bne.n	200003ce <main+0x5e>
    }
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b008      	add	sp, #32
200003ea:	bdb0      	pop	{r4, r5, r7, pc}
200003ec:	20000410 	andcs	r0, r0, r0, lsl r4
200003f0:	20000418 	andcs	r0, r0, r8, lsl r4

200003f4 <ascii_ctrl_reg>:
	...

200003fc <ascii_data_reg>:
	...

20000404 <systick_ctrl_addr>:
20000404:	e000e010 	and	lr, r0, r0, lsl r0

20000408 <systick_load_addr>:
20000408:	e000e014 	and	lr, r0, r4, lsl r0

2000040c <systick_val_addr>:
2000040c:	e000e018 	and	lr, r0, r8, lsl r0
20000410:	206a6548 	rsbcs	r6, sl, r8, asr #10
20000414:	00000000 	andeq	r0, r0, r0
20000418:	70736944 	rsbsvc	r6, r3, r4, asr #18
2000041c:	2079616c 	rsbscs	r6, r9, ip, ror #2
20000420:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000424:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000390 	muleq	r0, r0, r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000136 	andeq	r0, r0, r6, lsr r1
  10:	0002590c 	andeq	r5, r2, ip, lsl #18
  14:	0001b700 	andeq	fp, r1, r0, lsl #14
	...
  24:	02b10200 	adcseq	r0, r1, #0, 4
  28:	16010000 	strne	r0, [r1], -r0
  2c:	00000036 	andeq	r0, r0, r6, lsr r0
  30:	04040305 	streq	r0, [r4], #-773	; 0xfffffcfb
  34:	04032000 	streq	r2, [r3], #-0
  38:	0000003c 	andeq	r0, r0, ip, lsr r0
  3c:	56070404 	strpl	r0, [r7], -r4, lsl #8
  40:	02000000 	andeq	r0, r0, #0
  44:	00000080 	andeq	r0, r0, r0, lsl #1
  48:	00361701 	eorseq	r1, r6, r1, lsl #14
  4c:	03050000 	movweq	r0, #20480	; 0x5000
  50:	20000408 	andcs	r0, r0, r8, lsl #8
  54:	00002502 	andeq	r2, r0, r2, lsl #10
  58:	36180100 	ldrcc	r0, [r8], -r0, lsl #2
  5c:	05000000 	streq	r0, [r0, #-0]
  60:	00040c03 	andeq	r0, r4, r3, lsl #24
  64:	02a70520 	adceq	r0, r7, #32, 10	; 0x8000000
  68:	01080000 	mrseq	r0, (UNDEF: 8)
  6c:	0000891a 	andeq	r8, r0, sl, lsl r9
  70:	756f0600 	strbvc	r0, [pc, #-1536]!	; fffffa78 <systick_val_addr+0xdffff66c>
  74:	1c010074 	stcne	0, cr0, [r1], {116}	; 0x74
  78:	00000089 	andeq	r0, r0, r9, lsl #1
  7c:	6e690600 	cdpvs	6, 6, cr0, cr9, cr0, {0}
  80:	891d0100 	ldmdbhi	sp, {r8}
  84:	04000000 	streq	r0, [r0], #-0
  88:	8f040300 	svchi	0x00040300
  8c:	04000000 	streq	r0, [r0], #-0
  90:	00360801 	eorseq	r0, r6, r1, lsl #16
  94:	10070000 	andne	r0, r7, r0
  98:	01000002 	tsteq	r0, r2
  9c:	0000651e 	andeq	r6, r0, lr, lsl r5
  a0:	00710200 	rsbseq	r0, r1, r0, lsl #4
  a4:	20010000 	andcs	r0, r1, r0
  a8:	00000096 	muleq	r0, r6, r0
  ac:	03f40305 	mvnseq	r0, #335544320	; 0x14000000
  b0:	92022000 	andls	r2, r2, #0
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00009620 	andeq	r9, r0, r0, lsr #12
  bc:	fc030500 	stc2	5, cr0, [r3], {-0}
  c0:	08200003 	stmdaeq	r0!, {r0, r1}
  c4:	000000db 	ldrdeq	r0, [r0], -fp
  c8:	0370ec01 	cmneq	r0, #256	; 0x100
  cc:	00842000 	addeq	r2, r4, r0
  d0:	9c010000 	stcls	0, cr0, [r1], {-0}
  d4:	00000101 	andeq	r0, r0, r1, lsl #2
  d8:	01007309 	tsteq	r0, r9, lsl #6
  dc:	000101ee 	andeq	r0, r1, lr, ror #3
  e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
  e4:	00024d0a 	andeq	r4, r2, sl, lsl #26
  e8:	0eef0100 	cdpeq	1, 14, cr0, cr15, cr0, {0}
  ec:	02000001 	andeq	r0, r0, #1
  f0:	530a6491 	movwpl	r6, #42129	; 0xa491
  f4:	01000002 	tsteq	r0, r2
  f8:	000125f0 	strdeq	r2, [r1], -r0
  fc:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 100:	07040300 	streq	r0, [r4, -r0, lsl #6]
 104:	04000001 	streq	r0, [r0], #-1
 108:	003f0801 	eorseq	r0, pc, r1, lsl #16
 10c:	070b0000 	streq	r0, [fp, -r0]
 110:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
 114:	0c000001 	stceq	0, cr0, [r0], {1}
 118:	0000011e 	andeq	r0, r0, lr, lsl r1
 11c:	04040004 	streq	r0, [r4], #-4
 120:	00005b07 	andeq	r5, r0, r7, lsl #22
 124:	01070b00 	tsteq	r7, r0, lsl #22
 128:	01350000 	teqeq	r5, r0
 12c:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
 130:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 134:	00680d00 	rsbeq	r0, r8, r0, lsl #26
 138:	dc010000 	stcle	0, cr0, [r1], {-0}
 13c:	20000328 	andcs	r0, r0, r8, lsr #6
 140:	00000048 	andeq	r0, r0, r8, asr #32
 144:	18089c01 	stmdane	r8, {r0, sl, fp, ip, pc}
 148:	01000000 	mrseq	r0, (UNDEF: 0)
 14c:	0002e4d0 	ldrdeq	lr, [r2], -r0
 150:	00004420 	andeq	r4, r0, r0, lsr #8
 154:	829c0100 	addshi	r0, ip, #0, 2
 158:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 15c:	d0010078 	andle	r0, r1, r8, ror r0
 160:	00000182 	andeq	r0, r0, r2, lsl #3
 164:	0e6c9102 	lgneqe	f1, f2
 168:	d0010079 	andle	r0, r1, r9, ror r0
 16c:	00000182 	andeq	r0, r0, r2, lsl #3
 170:	0a689102 	beq	1a24580 <startup-0x1e5dba80>
 174:	000000f8 	strdeq	r0, [r0], -r8
 178:	0107d201 	tsteq	r7, r1, lsl #4
 17c:	91020000 	mrsls	r0, (UNDEF: 2)
 180:	040f0077 	streq	r0, [pc], #-119	; 188 <startup-0x1ffffe78>
 184:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 188:	00a10800 	adceq	r0, r1, r0, lsl #16
 18c:	c5010000 	strgt	r0, [r1, #-0]
 190:	200002a8 	andcs	r0, r0, r8, lsr #5
 194:	0000003c 	andeq	r0, r0, ip, lsr r0
 198:	01ab9c01 			; <UNDEFINED> instruction: 0x01ab9c01
 19c:	630e0000 	movwvs	r0, #57344	; 0xe000
 1a0:	07c50100 	strbeq	r0, [r5, r0, lsl #2]
 1a4:	02000001 	andeq	r0, r0, #1
 1a8:	10007791 	mulne	r0, r1, r7
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	0250ac01 	subseq	sl, r0, #256	; 0x100
 1b4:	00582000 	subseq	r2, r8, r0
 1b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1bc:	00022611 	andeq	r2, r2, r1, lsl r6
 1c0:	8f9d0100 	svchi	0x009d0100
 1c4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 1c8:	38200002 	stmdacc	r0!, {r1}
 1cc:	01000000 	mrseq	r0, (UNDEF: 0)
 1d0:	0001e49c 	muleq	r1, ip, r4
 1d4:	02310a00 	eorseq	r0, r1, #0, 20
 1d8:	9f010000 	svcls	0x00010000
 1dc:	0000008f 	andeq	r0, r0, pc, lsl #1
 1e0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 1e4:	00004411 	andeq	r4, r0, r1, lsl r4
 1e8:	8f8d0100 	svchi	0x008d0100
 1ec:	da000000 	ble	1f4 <startup-0x1ffffe0c>
 1f0:	3e200001 	cdpcc	0, 2, cr0, cr0, cr1, {0}
 1f4:	01000000 	mrseq	r0, (UNDEF: 0)
 1f8:	00020c9c 	muleq	r2, ip, ip
 1fc:	004f0a00 	subeq	r0, pc, r0, lsl #20
 200:	8f010000 	svchi	0x00010000
 204:	0000008f 	andeq	r0, r0, pc, lsl #1
 208:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 20c:	00011208 	andeq	r1, r1, r8, lsl #4
 210:	b0850100 	addlt	r0, r5, r0, lsl #2
 214:	2a200001 	bcs	800220 <startup-0x1f7ffde0>
 218:	01000000 	mrseq	r0, (UNDEF: 0)
 21c:	0002309c 	muleq	r2, ip, r0
 220:	02311200 	eorseq	r1, r1, #0, 4
 224:	85010000 	strhi	r0, [r1, #-0]
 228:	0000008f 	andeq	r0, r0, pc, lsl #1
 22c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 230:	0000e808 	andeq	lr, r0, r8, lsl #16
 234:	8c7f0100 	ldfhie	f0, [pc], #-0	; 23c <startup-0x1ffffdc4>
 238:	24200001 	strtcs	r0, [r0], #-1
 23c:	01000000 	mrseq	r0, (UNDEF: 0)
 240:	0002549c 	muleq	r2, ip, r4
 244:	000b1200 	andeq	r1, fp, r0, lsl #4
 248:	7f010000 	svcvc	0x00010000
 24c:	0000008f 	andeq	r0, r0, pc, lsl #1
 250:	00779102 	rsbseq	r9, r7, r2, lsl #2
 254:	0000b211 	andeq	fp, r0, r1, lsl r2
 258:	8f6f0100 	svchi	0x006f0100
 25c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 260:	34200001 	strtcc	r0, [r0], #-1
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	00027c9c 	muleq	r2, ip, ip
 26c:	00e00a00 	rsceq	r0, r0, r0, lsl #20
 270:	71010000 	mrsvc	r0, (UNDEF: 1)
 274:	0000008f 	andeq	r0, r0, pc, lsl #1
 278:	00779102 	rsbseq	r9, r7, r2, lsl #2
 27c:	00023608 	andeq	r3, r2, r8, lsl #12
 280:	24670100 	strbtcs	r0, [r7], #-256	; 0xffffff00
 284:	34200001 	strtcc	r0, [r0], #-1
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	0002a09c 	muleq	r2, ip, r0
 290:	00131200 	andseq	r1, r3, r0, lsl #4
 294:	67010000 	strvs	r0, [r1, -r0]
 298:	0000008f 	andeq	r0, r0, pc, lsl #1
 29c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2a0:	0001fb13 	andeq	pc, r1, r3, lsl fp	; <UNPREDICTABLE>
 2a4:	ec620100 	stfe	f0, [r2], #-0
 2a8:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	0002c29c 	muleq	r2, ip, r2
 2b4:	00780e00 	rsbseq	r0, r8, r0, lsl #28
 2b8:	008f6201 	addeq	r6, pc, r1, lsl #4
 2bc:	91020000 	mrsls	r0, (UNDEF: 2)
 2c0:	c8130077 	ldmdagt	r3, {r0, r1, r2, r4, r5, r6}
 2c4:	01000000 	mrseq	r0, (UNDEF: 0)
 2c8:	0000c05d 	andeq	ip, r0, sp, asr r0
 2cc:	00002c20 	andeq	r2, r0, r0, lsr #24
 2d0:	e49c0100 	ldr	r0, [ip], #256	; 0x100
 2d4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 2d8:	5d010078 	stcpl	0, cr0, [r1, #-480]	; 0xfffffe20
 2dc:	0000008f 	andeq	r0, r0, pc, lsl #1
 2e0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2e4:	00012308 	andeq	r2, r1, r8, lsl #6
 2e8:	8e4f0100 	dvfhie	f0, f7, f0
 2ec:	32200000 	eorcc	r0, r0, #0
 2f0:	01000000 	mrseq	r0, (UNDEF: 0)
 2f4:	0003219c 	muleq	r3, ip, r1
 2f8:	736d0e00 	cmnvc	sp, #0, 28
 2fc:	1e4f0100 	dvfnee	f0, f7, f0
 300:	02000001 	andeq	r0, r0, #1
 304:	69096c91 	stmdbvs	r9, {r0, r4, r7, sl, fp, sp, lr}
 308:	82510100 	subshi	r0, r1, #0, 2
 30c:	02000001 	andeq	r0, r0, #1
 310:	000a7491 	muleq	sl, r1, r4
 314:	01000001 	tsteq	r0, r1
 318:	00018251 	andeq	r8, r1, r1, asr r2
 31c:	70910200 	addsvc	r0, r1, r0, lsl #4
 320:	01060800 	tsteq	r6, r0, lsl #16
 324:	41010000 	mrsmi	r0, (UNDEF: 1)
 328:	20000060 	andcs	r0, r0, r0, rrx
 32c:	0000002e 	andeq	r0, r0, lr, lsr #32
 330:	03719c01 	cmneq	r1, #256	; 0x100
 334:	750e0000 	strvc	r0, [lr, #-0]
 338:	41010073 	tstmi	r1, r3, ror r0
 33c:	0000011e 	andeq	r0, r0, lr, lsl r1
 340:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
 344:	43010069 	movwmi	r0, #4201	; 0x1069
 348:	00000182 	andeq	r0, r0, r2, lsl #3
 34c:	0001000a 	andeq	r0, r1, sl
 350:	82430100 	subhi	r0, r3, #0, 2
 354:	02000001 	andeq	r0, r0, #1
 358:	6e157091 	mrcvs	0, 0, r7, cr5, cr1, {4}
 35c:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 360:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 364:	49010069 	stmdbmi	r1, {r0, r3, r5, r6}
 368:	00000182 	andeq	r0, r0, r2, lsl #3
 36c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 370:	021a0d00 	andseq	r0, sl, #0, 26
 374:	2b010000 	blcs	4037c <startup-0x1ffbfc84>
 378:	20000010 	andcs	r0, r0, r0, lsl r0
 37c:	00000050 	andeq	r0, r0, r0, asr r0
 380:	2e0d9c01 	cdpcs	12, 0, cr9, cr13, cr1, {0}
 384:	01000001 	tsteq	r0, r1
 388:	00000023 	andeq	r0, r0, r3, lsr #32
 38c:	00000c20 	andeq	r0, r0, r0, lsr #24
 390:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  20:	00001802 	andeq	r1, r0, r2, lsl #16
  24:	0b000f03 	bleq	3c38 <startup-0x1fffc3c8>
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	03011305 	movweq	r1, #4869	; 0x1305
  3c:	3a0b0b0e 	bcc	2c2c7c <startup-0x1fd3d384>
  40:	010b3b0b 	tsteq	fp, fp, lsl #22
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	08000013 	stmdaeq	r0, {r0, r1, r4}
  64:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  68:	0b3a0e03 	bleq	e8387c <startup-0x1f17c784>
  6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  70:	06120111 			; <UNDEFINED> instruction: 0x06120111
  74:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  78:	00130119 	andseq	r0, r3, r9, lsl r1
  7c:	00340900 	eorseq	r0, r4, r0, lsl #18
  80:	0b3a0803 	bleq	e82094 <startup-0x1f17df6c>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00001802 	andeq	r1, r0, r2, lsl #16
  8c:	0300340a 	movweq	r3, #1034	; 0x40a
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  98:	0b000018 	bleq	100 <startup-0x1fffff00>
  9c:	13490101 	movtne	r0, #37121	; 0x9101
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
  a8:	000b2f13 	andeq	r2, fp, r3, lsl pc
  ac:	002e0d00 	eoreq	r0, lr, r0, lsl #26
  b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  b4:	0b3b0b3a 	bleq	ec2da4 <startup-0x1f13d25c>
  b8:	01111927 	tsteq	r1, r7, lsr #18
  bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c0:	00194297 	mulseq	r9, r7, r2
  c4:	00050e00 	andeq	r0, r5, r0, lsl #28
  c8:	0b3a0803 	bleq	e820dc <startup-0x1f17df24>
  cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	0b00240f 	bleq	9118 <startup-0x1fff6ee8>
  d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  dc:	10000008 	andne	r0, r0, r8
  e0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  f4:	11000019 	tstne	r0, r9, lsl r0
  f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 104:	01111349 	tsteq	r1, r9, asr #6
 108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 10c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 110:	12000013 	andne	r0, r0, #19
 114:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 120:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	1119270b 	tstne	r9, fp, lsl #14
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	03003414 	movweq	r3, #1044	; 0x414
 140:	3b0b3a08 	blcc	2ce968 <startup-0x1fd31698>
 144:	0013490b 	andseq	r4, r3, fp, lsl #18
 148:	010b1500 	tsteq	fp, r0, lsl #10
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	Address 0x00000150 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003e4 	andeq	r0, r0, r4, ror #7
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200003f4 	strdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000130 	andeq	r0, r0, r0, lsr r1
   4:	00640002 	rsbeq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	55472f3a 	strbpl	r2, [r7, #-3898]	; 0xfffff0c6
  20:	5449442f 	strbpl	r4, [r9], #-1071	; 0xfffffbd1
  24:	20313531 	eorscs	r3, r1, r1, lsr r5
  28:	614d202d 	cmpvs	sp, sp, lsr #32
  2c:	6e696b73 	vmovvs.8	d9[7], r6
  30:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  38:	50206461 	eorpl	r6, r0, r1, ror #8
  3c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  40:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  48:	646f432f 	strbtvs	r4, [pc], #-815	; 50 <startup-0x1fffffb0>
  4c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  50:	73612f65 	cmnvc	r1, #404	; 0x194
  54:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
  58:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  5c:	00007961 	andeq	r7, r0, r1, ror #18
  60:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  64:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  68:	00010063 	andeq	r0, r1, r3, rrx
  6c:	05000000 	streq	r0, [r0, #-0]
  70:	00000002 	andeq	r0, r0, r2
  74:	01230320 			; <UNDEFINED> instruction: 0x01230320
  78:	2f212113 	svccs	0x00212113
  7c:	00030221 	andeq	r0, r3, r1, lsr #4
  80:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  84:	00001002 	andeq	r1, r0, r2
  88:	012b0320 			; <UNDEFINED> instruction: 0x012b0320
  8c:	4d504d2f 	ldclmi	13, cr4, [r0, #-188]	; 0xffffff44
  90:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
  94:	06200601 	strteq	r0, [r0], -r1, lsl #12
  98:	4ba14b76 	blmi	fe852e78 <systick_val_addr+0xde852a6c>
  9c:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
  a0:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
  a4:	002c0304 	eoreq	r0, ip, r4, lsl #6
  a8:	06010402 	streq	r0, [r1], -r2, lsl #8
  ac:	4d4e063c 	stclmi	6, cr0, [lr, #-240]	; 0xffffff10
  b0:	0200424b 	andeq	r4, r0, #-1342177276	; 0xb0000004
  b4:	003e0304 	eorseq	r0, lr, r4, lsl #6
  b8:	48030402 	stmdami	r3, {r1, sl}
  bc:	01040200 	mrseq	r0, R12_usr
  c0:	4e063c06 	cdpmi	12, 0, cr3, cr6, cr6, {0}
  c4:	699f674d 	ldmibvs	pc, {r0, r2, r3, r6, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
  c8:	6777e567 	ldrbvs	lr, [r7, -r7, ror #10]!
  cc:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
  d0:	2f3e3f77 	svccs	0x003e3f77
  d4:	2f3e5a30 	svccs	0x003e5a30
  d8:	593d6769 	ldmdbpl	sp!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
  dc:	3e3d674d 	cdpcc	7, 3, cr6, cr13, cr13, {2}
  e0:	3e3f4d59 	mrccc	13, 1, r4, cr15, cr9, {2}
  e4:	3e5a3e3d 	mrccc	14, 2, r3, cr10, cr13, {1}
  e8:	3e3f932f 	cdpcc	3, 3, cr9, cr15, cr15, {1}
  ec:	2f3e5a3e 	svccs	0x003e5a3e
  f0:	003e2f93 	mlaseq	lr, r3, pc, r2	; <UNPREDICTABLE>
  f4:	06010402 	streq	r0, [r1], -r2, lsl #8
  f8:	3f840620 	svccc	0x00840620
  fc:	3f3d3f3d 	svccc	0x003d3f3d
 100:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
 104:	0200673f 	andeq	r6, r0, #16515072	; 0xfc0000
 108:	20060104 	andcs	r0, r6, r4, lsl #2
 10c:	5a3e8406 	bpl	fa112c <startup-0x1f05eed4>
 110:	68594d3d 	ldmdavs	r9, {r0, r2, r3, r4, r5, r8, sl, fp, lr}^
 114:	4d9f693e 	vldrmi.16	s12, [pc, #124]	; 198 <startup-0x1ffffe68>	; <UNPREDICTABLE>
 118:	3d3e3d34 	ldccc	13, cr3, [lr, #-208]!	; 0xffffff30
 11c:	31083d3e 	tstcc	r8, lr, lsr sp
 120:	2f84753e 	svccs	0x0084753e
 124:	22304c2f 	eorscs	r4, r0, #12032	; 0x2f00
 128:	304c4f72 	subcc	r4, ip, r2, ror pc
 12c:	024e7222 	subeq	r7, lr, #536870914	; 0x20000002
 130:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
   4:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
   8:	63007469 	movwvs	r7, #1129	; 0x469
   c:	616d6d6f 	cmnvs	sp, pc, ror #26
  10:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
  14:	00657479 	rsbeq	r7, r5, r9, ror r4
  18:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  1c:	6f675f69 	svcvs	0x00675f69
  20:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  24:	73797300 	cmnvc	r9, #0, 6
  28:	6b636974 	blvs	18da600 <startup-0x1e725a00>
  2c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
  30:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
  34:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
  38:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  3c:	63206465 			; <UNDEFINED> instruction: 0x63206465
  40:	00726168 	rsbseq	r6, r2, r8, ror #2
  44:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  48:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  4c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  50:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  54:	6f6c0073 	svcvs	0x006c0073
  58:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
  5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  60:	2064656e 	rsbcs	r6, r4, lr, ror #10
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	5f707061 	svcpl	0x00707061
  6c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  70:	63736100 	cmnvs	r3, #0, 2
  74:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  78:	5f6c7274 	svcpl	0x006c7274
  7c:	00676572 	rsbeq	r6, r7, r2, ror r5
  80:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
  84:	5f6b6369 	svcpl	0x006b6369
  88:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
  8c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
  90:	73610072 	cmnvc	r1, #114	; 0x72
  94:	5f696963 	svcpl	0x00696963
  98:	61746164 	cmnvs	r4, r4, ror #2
  9c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
  a0:	63736100 	cmnvs	r3, #0, 2
  a4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  a8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  ac:	6168635f 	cmnvs	r8, pc, asr r3
  b0:	73610072 	cmnvc	r1, #114	; 0x72
  b4:	5f696963 	svcpl	0x00696963
  b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  bc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  c0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffef8 <systick_val_addr+0xdffffaec>
  c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
  c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  cc:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
  d0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  d4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  d8:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
  dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
  e0:	5f746572 	svcpl	0x00746572
  e4:	006c6176 	rsbeq	r6, ip, r6, ror r1
  e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  ec:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  f0:	5f657469 	svcpl	0x00657469
  f4:	00646d63 	rsbeq	r6, r4, r3, ror #26
  f8:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
  fc:	00737365 	rsbseq	r7, r3, r5, ror #6
 100:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 104:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 108:	5f79616c 	svcpl	0x0079616c
 10c:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 110:	7361006f 	cmnvc	r1, #111	; 0x6f
 114:	5f696963 	svcpl	0x00696963
 118:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 11c:	61645f65 	cmnvs	r4, r5, ror #30
 120:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 124:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 128:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 12c:	74730069 	ldrbtvc	r0, [r3], #-105	; 0xffffff97
 130:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 134:	4e470070 	mcrmi	0, 2, r0, cr7, cr0, {3}
 138:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 13c:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
 140:	20312e32 	eorscs	r2, r1, r2, lsr lr
 144:	37313032 			; <UNDEFINED> instruction: 0x37313032
 148:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
 14c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 150:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 154:	5b202965 	blpl	80a6f0 <startup-0x1f7f5910>
 158:	2f4d5241 	svccs	0x004d5241
 15c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
 160:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
 164:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
 168:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 16c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 170:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 174:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 178:	30323535 	eorscc	r3, r2, r5, lsr r5
 17c:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
 180:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 184:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 188:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 18c:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 190:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 194:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
 198:	616f6c66 	cmnvs	pc, r6, ror #24
 19c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1a0:	6f733d69 	svcvs	0x00733d69
 1a4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1a8:	4f2d2067 	svcmi	0x002d2067
 1ac:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 1b0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 1b4:	5a003939 	bpl	e6a0 <startup-0x1fff1960>
 1b8:	55475c3a 	strbpl	r5, [r7, #-3130]	; 0xfffff3c6
 1bc:	5449445c 	strbpl	r4, [r9], #-1116	; 0xfffffba4
 1c0:	20313531 	eorscs	r3, r1, r1, lsr r5
 1c4:	614d202d 	cmpvs	sp, sp, lsr #32
 1c8:	6e696b73 	vmovvs.8	d9[7], r6
 1cc:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 1d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1d4:	50206461 	eorpl	r6, r0, r1, ror #8
 1d8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 1dc:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 1e0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 1e4:	646f435c 	strbtvs	r4, [pc], #-860	; 1ec <startup-0x1ffffe14>
 1e8:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 1ec:	73615c65 	cmnvc	r1, #25856	; 0x6500
 1f0:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 1f4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1f8:	61007961 	tstvs	r0, r1, ror #18
 1fc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 200:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 204:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 208:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 20c:	00726165 	rsbseq	r6, r2, r5, ror #2
 210:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
 214:	45525f49 	ldrbmi	r5, [r2, #-3913]	; 0xfffff0b7
 218:	65640047 	strbvs	r0, [r4, #-71]!	; 0xffffffb9
 21c:	5f79616c 	svcpl	0x0079616c
 220:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 224:	73610073 	cmnvc	r1, #115	; 0x73
 228:	5f696963 	svcpl	0x00696963
 22c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 230:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 234:	73610061 	cmnvc	r1, #97	; 0x61
 238:	5f696963 	svcpl	0x00696963
 23c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 240:	6f635f65 	svcvs	0x00635f65
 244:	6f72746e 	svcvs	0x0072746e
 248:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 24c:	73657400 	cmnvc	r5, #0, 8
 250:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
 254:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
 258:	2f3a5a00 	svccs	0x003a5a00
 25c:	442f5547 	strtmi	r5, [pc], #-1351	; 264 <startup-0x1ffffd9c>
 260:	35315449 	ldrcc	r5, [r1, #-1097]!	; 0xfffffbb7
 264:	202d2031 	eorcs	r2, sp, r1, lsr r0
 268:	6b73614d 	blvs	1cd87a4 <startup-0x1e32785c>
 26c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 270:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 274:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 278:	6f725020 	svcvs	0x00725020
 27c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 280:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 284:	432f676e 			; <UNDEFINED> instruction: 0x432f676e
 288:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 28c:	2f657469 	svccs	0x00657469
 290:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 294:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 298:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 29c:	6174732f 	cmnvs	r4, pc, lsr #6
 2a0:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2a4:	6100632e 	tstvs	r0, lr, lsr #6
 2a8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2ac:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
 2b0:	73797300 	cmnvc	r9, #0, 6
 2b4:	6b636974 	blvs	18da88c <startup-0x1e725774>
 2b8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2bc:	64615f6c 	strbtvs	r5, [r1], #-3948	; 0xfffff094
 2c0:	Address 0x000002c0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <systick_val_addr+0xdfffef02>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000050 	andeq	r0, r0, r0, asr r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000060 	andcs	r0, r0, r0, rrx
  48:	0000002e 	andeq	r0, r0, lr, lsr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000008e 	andcs	r0, r0, lr, lsl #1
  68:	00000032 	andeq	r0, r0, r2, lsr r0
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000c0 	andcs	r0, r0, r0, asr #1
  88:	0000002c 	andeq	r0, r0, ip, lsr #32
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000ec 	andcs	r0, r0, ip, ror #1
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000124 	andcs	r0, r0, r4, lsr #2
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000158 	andcs	r0, r0, r8, asr r1
  e8:	00000034 	andeq	r0, r0, r4, lsr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000018c 	andcs	r0, r0, ip, lsl #3
 108:	00000024 	andeq	r0, r0, r4, lsr #32
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 118:	00000007 	andeq	r0, r0, r7
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 128:	0000002a 	andeq	r0, r0, sl, lsr #32
 12c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 130:	41018e02 	tstmi	r1, r2, lsl #28
 134:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 138:	00000007 	andeq	r0, r0, r7
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	200001da 	ldrdcs	r0, [r0], -sl
 148:	0000003e 	andeq	r0, r0, lr, lsr r0
 14c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 150:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 154:	180e4101 	stmdane	lr, {r0, r8, lr}
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	20000218 	andcs	r0, r0, r8, lsl r2
 168:	00000038 	andeq	r0, r0, r8, lsr r0
 16c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 170:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 174:	180e4101 	stmdane	lr, {r0, r8, lr}
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	00000018 	andeq	r0, r0, r8, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	20000250 	andcs	r0, r0, r0, asr r2
 188:	00000058 	andeq	r0, r0, r8, asr r0
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0000070d 	andeq	r0, r0, sp, lsl #14
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200002a8 	andcs	r0, r0, r8, lsr #5
 1a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200002e4 	andcs	r0, r0, r4, ror #5
 1c4:	00000044 	andeq	r0, r0, r4, asr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000328 	andcs	r0, r0, r8, lsr #6
 1e4:	00000048 	andeq	r0, r0, r8, asr #32
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000370 	andcs	r0, r0, r0, ror r3
 200:	00000084 	andeq	r0, r0, r4, lsl #1
 204:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 208:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
