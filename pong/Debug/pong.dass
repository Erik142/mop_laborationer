
./Debug/pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 static volatile char right_point;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fe64 	bl	20000cd0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <keyb>:

unsigned char keyb(char column)
{
20000010:	b580      	push	{r7, lr}
20000012:	b086      	sub	sp, #24
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
    char row, col, col_vals;
    
    for (row = 0; row < 4; row++)
2000001c:	2317      	movs	r3, #23
2000001e:	18fb      	adds	r3, r7, r3
20000020:	2200      	movs	r2, #0
20000022:	701a      	strb	r2, [r3, #0]
20000024:	e03a      	b.n	2000009c <keyb+0x8c>
    {
        // Activate row
        *keypad_out = (1 << (4 + row));
20000026:	2317      	movs	r3, #23
20000028:	18fb      	adds	r3, r7, r3
2000002a:	781b      	ldrb	r3, [r3, #0]
2000002c:	3304      	adds	r3, #4
2000002e:	2201      	movs	r2, #1
20000030:	409a      	lsls	r2, r3
20000032:	4b1f      	ldr	r3, [pc, #124]	; (200000b0 <keyb+0xa0>)
20000034:	681b      	ldr	r3, [r3, #0]
20000036:	b2d2      	uxtb	r2, r2
20000038:	701a      	strb	r2, [r3, #0]
        //*PORTD_ODR_HIGH = (1 << (4 + row));
        
        for (int i=0;i<10000;i++){
2000003a:	2300      	movs	r3, #0
2000003c:	613b      	str	r3, [r7, #16]
2000003e:	e002      	b.n	20000046 <keyb+0x36>
20000040:	693b      	ldr	r3, [r7, #16]
20000042:	3301      	adds	r3, #1
20000044:	613b      	str	r3, [r7, #16]
20000046:	693b      	ldr	r3, [r7, #16]
20000048:	4a1a      	ldr	r2, [pc, #104]	; (200000b4 <keyb+0xa4>)
2000004a:	4293      	cmp	r3, r2
2000004c:	ddf8      	ble.n	20000040 <keyb+0x30>
            
        }
        
        // Read columns
        col_vals = *keypad_in & 0xF;
2000004e:	4b1a      	ldr	r3, [pc, #104]	; (200000b8 <keyb+0xa8>)
20000050:	681b      	ldr	r3, [r3, #0]
20000052:	781a      	ldrb	r2, [r3, #0]
20000054:	200f      	movs	r0, #15
20000056:	183b      	adds	r3, r7, r0
20000058:	210f      	movs	r1, #15
2000005a:	400a      	ands	r2, r1
2000005c:	701a      	strb	r2, [r3, #0]
        //col_vals = *PORTD_IDR_HIGH & 0xF;
        
        if ( (col_vals & (1 << (column - 1))) != 0 )
2000005e:	183b      	adds	r3, r7, r0
20000060:	781a      	ldrb	r2, [r3, #0]
20000062:	1dfb      	adds	r3, r7, #7
20000064:	781b      	ldrb	r3, [r3, #0]
20000066:	3b01      	subs	r3, #1
20000068:	411a      	asrs	r2, r3
2000006a:	0013      	movs	r3, r2
2000006c:	2201      	movs	r2, #1
2000006e:	4013      	ands	r3, r2
20000070:	d00a      	beq.n	20000088 <keyb+0x78>
        {
            return KeyValues[row][column - 1];
20000072:	2317      	movs	r3, #23
20000074:	18fb      	adds	r3, r7, r3
20000076:	781a      	ldrb	r2, [r3, #0]
20000078:	1dfb      	adds	r3, r7, #7
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	3b01      	subs	r3, #1
2000007e:	490f      	ldr	r1, [pc, #60]	; (200000bc <keyb+0xac>)
20000080:	0092      	lsls	r2, r2, #2
20000082:	188a      	adds	r2, r1, r2
20000084:	5cd3      	ldrb	r3, [r2, r3]
20000086:	e00f      	b.n	200000a8 <keyb+0x98>
        } 
        
        // Deactivate row
        *keypad_out = 0;
20000088:	4b09      	ldr	r3, [pc, #36]	; (200000b0 <keyb+0xa0>)
2000008a:	681b      	ldr	r3, [r3, #0]
2000008c:	2200      	movs	r2, #0
2000008e:	701a      	strb	r2, [r3, #0]
    for (row = 0; row < 4; row++)
20000090:	2117      	movs	r1, #23
20000092:	187b      	adds	r3, r7, r1
20000094:	781a      	ldrb	r2, [r3, #0]
20000096:	187b      	adds	r3, r7, r1
20000098:	3201      	adds	r2, #1
2000009a:	701a      	strb	r2, [r3, #0]
2000009c:	2317      	movs	r3, #23
2000009e:	18fb      	adds	r3, r7, r3
200000a0:	781b      	ldrb	r3, [r3, #0]
200000a2:	2b03      	cmp	r3, #3
200000a4:	d9bf      	bls.n	20000026 <keyb+0x16>
    }
    
    return 0xFF;
200000a6:	23ff      	movs	r3, #255	; 0xff
}
200000a8:	0018      	movs	r0, r3
200000aa:	46bd      	mov	sp, r7
200000ac:	b006      	add	sp, #24
200000ae:	bd80      	pop	{r7, pc}
200000b0:	20000e10 	andcs	r0, r0, r0, lsl lr
200000b4:	0000270f 	andeq	r2, r0, pc, lsl #14
200000b8:	20000e14 	andcs	r0, r0, r4, lsl lr
200000bc:	20001040 	andcs	r1, r0, r0, asr #32

200000c0 <delay_250ns>:

void delay_250ns(void)
{
200000c0:	b580      	push	{r7, lr}
200000c2:	af00      	add	r7, sp, #0
    *SYSTICK_CTRL = 0x0;
200000c4:	4b0c      	ldr	r3, [pc, #48]	; (200000f8 <delay_250ns+0x38>)
200000c6:	2200      	movs	r2, #0
200000c8:	601a      	str	r2, [r3, #0]
    
    // Set STK_LOAD value (250 ns = 42 clock cycles = 0x2A)
    *SYSTICK_LOAD = 0x2A;
200000ca:	4b0c      	ldr	r3, [pc, #48]	; (200000fc <delay_250ns+0x3c>)
200000cc:	222a      	movs	r2, #42	; 0x2a
200000ce:	601a      	str	r2, [r3, #0]
    
#ifdef SIMULATOR
    *SYSTICK_LOAD /= 0x2A; // Decrease delay if we're simulating
#endif
    
    *SYSTICK_VAL = 0;
200000d0:	4b0b      	ldr	r3, [pc, #44]	; (20000100 <delay_250ns+0x40>)
200000d2:	2200      	movs	r2, #0
200000d4:	601a      	str	r2, [r3, #0]
    
    // Enable counter
    *SYSTICK_CTRL = 0x5;
200000d6:	4b08      	ldr	r3, [pc, #32]	; (200000f8 <delay_250ns+0x38>)
200000d8:	2205      	movs	r2, #5
200000da:	601a      	str	r2, [r3, #0]
    
    // Wait until "COUNTFLAG" in STK_CTRL is 1
    while ( (*SYSTICK_CTRL & 0x10000) == 0);
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	4b06      	ldr	r3, [pc, #24]	; (200000f8 <delay_250ns+0x38>)
200000e0:	681a      	ldr	r2, [r3, #0]
200000e2:	2380      	movs	r3, #128	; 0x80
200000e4:	025b      	lsls	r3, r3, #9
200000e6:	4013      	ands	r3, r2
200000e8:	d0f9      	beq.n	200000de <delay_250ns+0x1e>
    
    *SYSTICK_CTRL = 0x0;
200000ea:	4b03      	ldr	r3, [pc, #12]	; (200000f8 <delay_250ns+0x38>)
200000ec:	2200      	movs	r2, #0
200000ee:	601a      	str	r2, [r3, #0]
}
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	bd80      	pop	{r7, pc}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	e000e010 	and	lr, r0, r0, lsl r0
200000fc:	e000e014 	and	lr, r0, r4, lsl r0
20000100:	e000e018 	and	lr, r0, r8, lsl r0

20000104 <delay_500ns>:

void delay_500ns(void)
{
20000104:	b580      	push	{r7, lr}
20000106:	af00      	add	r7, sp, #0
    delay_250ns();
20000108:	f7ff ffda 	bl	200000c0 <delay_250ns>
    delay_250ns();
2000010c:	f7ff ffd8 	bl	200000c0 <delay_250ns>
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	bd80      	pop	{r7, pc}

20000116 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000116:	b580      	push	{r7, lr}
20000118:	b084      	sub	sp, #16
2000011a:	af00      	add	r7, sp, #0
2000011c:	6078      	str	r0, [r7, #4]
    int i, limit = 4*us;
2000011e:	687b      	ldr	r3, [r7, #4]
20000120:	009b      	lsls	r3, r3, #2
20000122:	60bb      	str	r3, [r7, #8]
        limit = 50;
    }
#endif

    
    for (int i = 1; i <= limit; i++)
20000124:	2301      	movs	r3, #1
20000126:	60fb      	str	r3, [r7, #12]
20000128:	e004      	b.n	20000134 <delay_mikro+0x1e>
    {
        delay_250ns();
2000012a:	f7ff ffc9 	bl	200000c0 <delay_250ns>
    for (int i = 1; i <= limit; i++)
2000012e:	68fb      	ldr	r3, [r7, #12]
20000130:	3301      	adds	r3, #1
20000132:	60fb      	str	r3, [r7, #12]
20000134:	68fa      	ldr	r2, [r7, #12]
20000136:	68bb      	ldr	r3, [r7, #8]
20000138:	429a      	cmp	r2, r3
2000013a:	ddf6      	ble.n	2000012a <delay_mikro+0x14>
    }
}
2000013c:	46c0      	nop			; (mov r8, r8)
2000013e:	46bd      	mov	sp, r7
20000140:	b004      	add	sp, #16
20000142:	bd80      	pop	{r7, pc}

20000144 <delay_mili>:

void delay_mili(unsigned int ms)
{
20000144:	b580      	push	{r7, lr}
20000146:	b084      	sub	sp, #16
20000148:	af00      	add	r7, sp, #0
2000014a:	6078      	str	r0, [r7, #4]
    int i, limit = 1000;
2000014c:	23fa      	movs	r3, #250	; 0xfa
2000014e:	009b      	lsls	r3, r3, #2
20000150:	60bb      	str	r3, [r7, #8]
    
#ifdef SIMULATOR
    limit = 10;
#endif
    
    for (i = 1; i <= limit; i++)
20000152:	2301      	movs	r3, #1
20000154:	60fb      	str	r3, [r7, #12]
20000156:	e006      	b.n	20000166 <delay_mili+0x22>
    {
        delay_mikro(ms);
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	0018      	movs	r0, r3
2000015c:	f7ff ffdb 	bl	20000116 <delay_mikro>
    for (i = 1; i <= limit; i++)
20000160:	68fb      	ldr	r3, [r7, #12]
20000162:	3301      	adds	r3, #1
20000164:	60fb      	str	r3, [r7, #12]
20000166:	68fa      	ldr	r2, [r7, #12]
20000168:	68bb      	ldr	r3, [r7, #8]
2000016a:	429a      	cmp	r2, r3
2000016c:	ddf4      	ble.n	20000158 <delay_mili+0x14>
    }
}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	46bd      	mov	sp, r7
20000172:	b004      	add	sp, #16
20000174:	bd80      	pop	{r7, pc}

20000176 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x)
{
20000176:	b580      	push	{r7, lr}
20000178:	b082      	sub	sp, #8
2000017a:	af00      	add	r7, sp, #0
2000017c:	0002      	movs	r2, r0
2000017e:	1dfb      	adds	r3, r7, #7
20000180:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
20000182:	4b06      	ldr	r3, [pc, #24]	; (2000019c <graphic_ctrl_bit_set+0x26>)
20000184:	781a      	ldrb	r2, [r3, #0]
20000186:	4905      	ldr	r1, [pc, #20]	; (2000019c <graphic_ctrl_bit_set+0x26>)
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	4313      	orrs	r3, r2
2000018e:	b2db      	uxtb	r3, r3
20000190:	700b      	strb	r3, [r1, #0]
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	40021014 	andmi	r1, r2, r4, lsl r0

200001a0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
200001a0:	b580      	push	{r7, lr}
200001a2:	b082      	sub	sp, #8
200001a4:	af00      	add	r7, sp, #0
200001a6:	0002      	movs	r2, r0
200001a8:	1dfb      	adds	r3, r7, #7
200001aa:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
200001ac:	4b08      	ldr	r3, [pc, #32]	; (200001d0 <graphic_ctrl_bit_clear+0x30>)
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	b25b      	sxtb	r3, r3
200001b2:	1dfa      	adds	r2, r7, #7
200001b4:	7812      	ldrb	r2, [r2, #0]
200001b6:	b252      	sxtb	r2, r2
200001b8:	43d2      	mvns	r2, r2
200001ba:	b252      	sxtb	r2, r2
200001bc:	4013      	ands	r3, r2
200001be:	b25a      	sxtb	r2, r3
200001c0:	4b03      	ldr	r3, [pc, #12]	; (200001d0 <graphic_ctrl_bit_clear+0x30>)
200001c2:	b2d2      	uxtb	r2, r2
200001c4:	701a      	strb	r2, [r3, #0]
}
200001c6:	46c0      	nop			; (mov r8, r8)
200001c8:	46bd      	mov	sp, r7
200001ca:	b002      	add	sp, #8
200001cc:	bd80      	pop	{r7, pc}
200001ce:	46c0      	nop			; (mov r8, r8)
200001d0:	40021014 	andmi	r1, r2, r4, lsl r0

200001d4 <select_controller>:

void select_controller(uint8_t controller)
{
200001d4:	b580      	push	{r7, lr}
200001d6:	b082      	sub	sp, #8
200001d8:	af00      	add	r7, sp, #0
200001da:	0002      	movs	r2, r0
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	701a      	strb	r2, [r3, #0]
    switch(controller)
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	2b08      	cmp	r3, #8
200001e6:	d00c      	beq.n	20000202 <select_controller+0x2e>
200001e8:	dc02      	bgt.n	200001f0 <select_controller+0x1c>
200001ea:	2b00      	cmp	r3, #0
200001ec:	d005      	beq.n	200001fa <select_controller+0x26>
            break;
        case (B_CS1 | B_CS2):
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
            break;
        default:
            break;
200001ee:	e01a      	b.n	20000226 <select_controller+0x52>
    switch(controller)
200001f0:	2b10      	cmp	r3, #16
200001f2:	d00d      	beq.n	20000210 <select_controller+0x3c>
200001f4:	2b18      	cmp	r3, #24
200001f6:	d012      	beq.n	2000021e <select_controller+0x4a>
            break;
200001f8:	e015      	b.n	20000226 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1 | B_CS2);
200001fa:	2018      	movs	r0, #24
200001fc:	f7ff ffd0 	bl	200001a0 <graphic_ctrl_bit_clear>
            break;
20000200:	e011      	b.n	20000226 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000202:	2008      	movs	r0, #8
20000204:	f7ff ffb7 	bl	20000176 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000208:	2010      	movs	r0, #16
2000020a:	f7ff ffc9 	bl	200001a0 <graphic_ctrl_bit_clear>
            break;
2000020e:	e00a      	b.n	20000226 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1);
20000210:	2008      	movs	r0, #8
20000212:	f7ff ffc5 	bl	200001a0 <graphic_ctrl_bit_clear>
            graphic_ctrl_bit_set(B_CS2);
20000216:	2010      	movs	r0, #16
20000218:	f7ff ffad 	bl	20000176 <graphic_ctrl_bit_set>
            break;
2000021c:	e003      	b.n	20000226 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000021e:	2018      	movs	r0, #24
20000220:	f7ff ffa9 	bl	20000176 <graphic_ctrl_bit_set>
            break;
20000224:	46c0      	nop			; (mov r8, r8)
    }
}
20000226:	46c0      	nop			; (mov r8, r8)
20000228:	46bd      	mov	sp, r7
2000022a:	b002      	add	sp, #8
2000022c:	bd80      	pop	{r7, pc}

2000022e <graphic_wait_ready>:

void graphic_wait_ready(void)
{
2000022e:	b580      	push	{r7, lr}
20000230:	b082      	sub	sp, #8
20000232:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_E);
20000234:	2040      	movs	r0, #64	; 0x40
20000236:	f7ff ffb3 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
2000023a:	4b14      	ldr	r3, [pc, #80]	; (2000028c <graphic_wait_ready+0x5e>)
2000023c:	4a14      	ldr	r2, [pc, #80]	; (20000290 <graphic_wait_ready+0x62>)
2000023e:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_RS);
20000240:	2001      	movs	r0, #1
20000242:	f7ff ffad 	bl	200001a0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000246:	2002      	movs	r0, #2
20000248:	f7ff ff95 	bl	20000176 <graphic_ctrl_bit_set>
    
    delay_500ns();
2000024c:	f7ff ff5a 	bl	20000104 <delay_500ns>
    
    unsigned char busy;
    
    do
    {
        graphic_ctrl_bit_set(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff90 	bl	20000176 <graphic_ctrl_bit_set>
        delay_500ns();
20000256:	f7ff ff55 	bl	20000104 <delay_500ns>
        
        busy = *GRAPHIC_DATA_IDR & LCD_BUSY;
2000025a:	4b0e      	ldr	r3, [pc, #56]	; (20000294 <graphic_wait_ready+0x66>)
2000025c:	781a      	ldrb	r2, [r3, #0]
2000025e:	1dfb      	adds	r3, r7, #7
20000260:	217f      	movs	r1, #127	; 0x7f
20000262:	438a      	bics	r2, r1
20000264:	701a      	strb	r2, [r3, #0]
        
        graphic_ctrl_bit_clear(B_E);
20000266:	2040      	movs	r0, #64	; 0x40
20000268:	f7ff ff9a 	bl	200001a0 <graphic_ctrl_bit_clear>
        delay_500ns();
2000026c:	f7ff ff4a 	bl	20000104 <delay_500ns>
    } while(busy != 0);
20000270:	1dfb      	adds	r3, r7, #7
20000272:	781b      	ldrb	r3, [r3, #0]
20000274:	2b00      	cmp	r3, #0
20000276:	d1eb      	bne.n	20000250 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff7c 	bl	20000176 <graphic_ctrl_bit_set>
    
    * ( (unsigned long *) portModer) = 0x55555555;
2000027e:	4b03      	ldr	r3, [pc, #12]	; (2000028c <graphic_wait_ready+0x5e>)
20000280:	4a05      	ldr	r2, [pc, #20]	; (20000298 <graphic_wait_ready+0x6a>)
20000282:	601a      	str	r2, [r3, #0]
}
20000284:	46c0      	nop			; (mov r8, r8)
20000286:	46bd      	mov	sp, r7
20000288:	b002      	add	sp, #8
2000028a:	bd80      	pop	{r7, pc}
2000028c:	40021000 	andmi	r1, r2, r0
20000290:	00005555 	andeq	r5, r0, r5, asr r5
20000294:	40021011 	andmi	r1, r2, r1, lsl r0
20000298:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000029c <graphic_read>:

uint8_t graphic_read(uint8_t controller)
{
2000029c:	b580      	push	{r7, lr}
2000029e:	b084      	sub	sp, #16
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val;
    
    graphic_ctrl_bit_clear(B_E);
200002a8:	2040      	movs	r0, #64	; 0x40
200002aa:	f7ff ff79 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x00005555;
200002ae:	4b1b      	ldr	r3, [pc, #108]	; (2000031c <graphic_read+0x80>)
200002b0:	4a1b      	ldr	r2, [pc, #108]	; (20000320 <graphic_read+0x84>)
200002b2:	601a      	str	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_RS | B_RW);
200002b4:	2003      	movs	r0, #3
200002b6:	f7ff ff5e 	bl	20000176 <graphic_ctrl_bit_set>
    
    select_controller(controller);
200002ba:	1dfb      	adds	r3, r7, #7
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff88 	bl	200001d4 <select_controller>
    delay_500ns();
200002c4:	f7ff ff1e 	bl	20000104 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
200002c8:	2040      	movs	r0, #64	; 0x40
200002ca:	f7ff ff54 	bl	20000176 <graphic_ctrl_bit_set>
    delay_500ns();
200002ce:	f7ff ff19 	bl	20000104 <delay_500ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
200002d2:	4a14      	ldr	r2, [pc, #80]	; (20000324 <graphic_read+0x88>)
200002d4:	230f      	movs	r3, #15
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	7812      	ldrb	r2, [r2, #0]
200002da:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_clear(B_E);
200002dc:	2040      	movs	r0, #64	; 0x40
200002de:	f7ff ff5f 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    * ( (unsigned long *) portModer) = 0x55555555;
200002e2:	4b0e      	ldr	r3, [pc, #56]	; (2000031c <graphic_read+0x80>)
200002e4:	4a10      	ldr	r2, [pc, #64]	; (20000328 <graphic_read+0x8c>)
200002e6:	601a      	str	r2, [r3, #0]
    
    if(controller == B_CS1)
200002e8:	1dfb      	adds	r3, r7, #7
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2b08      	cmp	r3, #8
200002ee:	d104      	bne.n	200002fa <graphic_read+0x5e>
    {
        select_controller(B_CS1);
200002f0:	2008      	movs	r0, #8
200002f2:	f7ff ff6f 	bl	200001d4 <select_controller>
        graphic_wait_ready();
200002f6:	f7ff ff9a 	bl	2000022e <graphic_wait_ready>
    }
    if(controller == B_CS2)
200002fa:	1dfb      	adds	r3, r7, #7
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	2b10      	cmp	r3, #16
20000300:	d104      	bne.n	2000030c <graphic_read+0x70>
    {
        select_controller(B_CS2);
20000302:	2010      	movs	r0, #16
20000304:	f7ff ff66 	bl	200001d4 <select_controller>
        graphic_wait_ready();
20000308:	f7ff ff91 	bl	2000022e <graphic_wait_ready>
    }
    
    return ret_val;
2000030c:	230f      	movs	r3, #15
2000030e:	18fb      	adds	r3, r7, r3
20000310:	781b      	ldrb	r3, [r3, #0]
}
20000312:	0018      	movs	r0, r3
20000314:	46bd      	mov	sp, r7
20000316:	b004      	add	sp, #16
20000318:	bd80      	pop	{r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021000 	andmi	r1, r2, r0
20000320:	00005555 	andeq	r5, r0, r5, asr r5
20000324:	40021011 	andmi	r1, r2, r1, lsl r0
20000328:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000032c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller)
{
2000032c:	b580      	push	{r7, lr}
2000032e:	b082      	sub	sp, #8
20000330:	af00      	add	r7, sp, #0
20000332:	0002      	movs	r2, r0
20000334:	1dfb      	adds	r3, r7, #7
20000336:	701a      	strb	r2, [r3, #0]
20000338:	1dbb      	adds	r3, r7, #6
2000033a:	1c0a      	adds	r2, r1, #0
2000033c:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_DATA_ODR = value;
2000033e:	4a1a      	ldr	r2, [pc, #104]	; (200003a8 <graphic_write+0x7c>)
20000340:	1dfb      	adds	r3, r7, #7
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	7013      	strb	r3, [r2, #0]
    
    select_controller(controller);
20000346:	1dbb      	adds	r3, r7, #6
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	0018      	movs	r0, r3
2000034c:	f7ff ff42 	bl	200001d4 <select_controller>
    delay_500ns();
20000350:	f7ff fed8 	bl	20000104 <delay_500ns>
    
    graphic_ctrl_bit_set(B_E);
20000354:	2040      	movs	r0, #64	; 0x40
20000356:	f7ff ff0e 	bl	20000176 <graphic_ctrl_bit_set>
    delay_500ns();
2000035a:	f7ff fed3 	bl	20000104 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
2000035e:	2040      	movs	r0, #64	; 0x40
20000360:	f7ff ff1e 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    if ( (controller & B_CS1) )
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	2208      	movs	r2, #8
2000036a:	4013      	ands	r3, r2
2000036c:	d004      	beq.n	20000378 <graphic_write+0x4c>
    {
        select_controller(B_CS1);
2000036e:	2008      	movs	r0, #8
20000370:	f7ff ff30 	bl	200001d4 <select_controller>
        graphic_wait_ready();
20000374:	f7ff ff5b 	bl	2000022e <graphic_wait_ready>
    }
    if ( (controller & B_CS2) )
20000378:	1dbb      	adds	r3, r7, #6
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	2210      	movs	r2, #16
2000037e:	4013      	ands	r3, r2
20000380:	d004      	beq.n	2000038c <graphic_write+0x60>
    {
        select_controller(B_CS2);
20000382:	2010      	movs	r0, #16
20000384:	f7ff ff26 	bl	200001d4 <select_controller>
        graphic_wait_ready();
20000388:	f7ff ff51 	bl	2000022e <graphic_wait_ready>
    }
    
    *GRAPHIC_DATA_ODR = 0x0;
2000038c:	4b06      	ldr	r3, [pc, #24]	; (200003a8 <graphic_write+0x7c>)
2000038e:	2200      	movs	r2, #0
20000390:	701a      	strb	r2, [r3, #0]
    
    graphic_ctrl_bit_set(B_E);
20000392:	2040      	movs	r0, #64	; 0x40
20000394:	f7ff feef 	bl	20000176 <graphic_ctrl_bit_set>
    
    select_controller(0);
20000398:	2000      	movs	r0, #0
2000039a:	f7ff ff1b 	bl	200001d4 <select_controller>
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b002      	add	sp, #8
200003a4:	bd80      	pop	{r7, pc}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	40021015 	andmi	r1, r2, r5, lsl r0

200003ac <graphic_write_command>:

void graphic_write_command(uint8_t cmd, uint8_t controller)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	b082      	sub	sp, #8
200003b0:	af00      	add	r7, sp, #0
200003b2:	0002      	movs	r2, r0
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	701a      	strb	r2, [r3, #0]
200003b8:	1dbb      	adds	r3, r7, #6
200003ba:	1c0a      	adds	r2, r1, #0
200003bc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200003be:	2040      	movs	r0, #64	; 0x40
200003c0:	f7ff feee 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
200003c4:	1dbb      	adds	r3, r7, #6
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	0018      	movs	r0, r3
200003ca:	f7ff ff03 	bl	200001d4 <select_controller>
    
    graphic_ctrl_bit_clear(B_RS | B_RW);
200003ce:	2003      	movs	r0, #3
200003d0:	f7ff fee6 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    graphic_write(cmd, controller);
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	781a      	ldrb	r2, [r3, #0]
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	0011      	movs	r1, r2
200003de:	0018      	movs	r0, r3
200003e0:	f7ff ffa4 	bl	2000032c <graphic_write>
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b002      	add	sp, #8
200003ea:	bd80      	pop	{r7, pc}

200003ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
200003ec:	b580      	push	{r7, lr}
200003ee:	b082      	sub	sp, #8
200003f0:	af00      	add	r7, sp, #0
200003f2:	0002      	movs	r2, r0
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	701a      	strb	r2, [r3, #0]
200003f8:	1dbb      	adds	r3, r7, #6
200003fa:	1c0a      	adds	r2, r1, #0
200003fc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200003fe:	2040      	movs	r0, #64	; 0x40
20000400:	f7ff fece 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    select_controller(controller);
20000404:	1dbb      	adds	r3, r7, #6
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	0018      	movs	r0, r3
2000040a:	f7ff fee3 	bl	200001d4 <select_controller>
    
    graphic_ctrl_bit_set(B_RS);
2000040e:	2001      	movs	r0, #1
20000410:	f7ff feb1 	bl	20000176 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000414:	2002      	movs	r0, #2
20000416:	f7ff fec3 	bl	200001a0 <graphic_ctrl_bit_clear>
    
    graphic_write(data,controller);
2000041a:	1dbb      	adds	r3, r7, #6
2000041c:	781a      	ldrb	r2, [r3, #0]
2000041e:	1dfb      	adds	r3, r7, #7
20000420:	781b      	ldrb	r3, [r3, #0]
20000422:	0011      	movs	r1, r2
20000424:	0018      	movs	r0, r3
20000426:	f7ff ff81 	bl	2000032c <graphic_write>
}
2000042a:	46c0      	nop			; (mov r8, r8)
2000042c:	46bd      	mov	sp, r7
2000042e:	b002      	add	sp, #8
20000430:	bd80      	pop	{r7, pc}

20000432 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller)
{
20000432:	b580      	push	{r7, lr}
20000434:	b082      	sub	sp, #8
20000436:	af00      	add	r7, sp, #0
20000438:	0002      	movs	r2, r0
2000043a:	1dfb      	adds	r3, r7, #7
2000043c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000043e:	1dfb      	adds	r3, r7, #7
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	0018      	movs	r0, r3
20000444:	f7ff ff2a 	bl	2000029c <graphic_read>
    return graphic_read(controller);
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	0018      	movs	r0, r3
2000044e:	f7ff ff25 	bl	2000029c <graphic_read>
20000452:	0003      	movs	r3, r0
}
20000454:	0018      	movs	r0, r3
20000456:	46bd      	mov	sp, r7
20000458:	b002      	add	sp, #8
2000045a:	bd80      	pop	{r7, pc}

2000045c <graphic_initialize>:

void graphic_initialize(void)
{
2000045c:	b580      	push	{r7, lr}
2000045e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(B_SELECT);
20000460:	2004      	movs	r0, #4
20000462:	f7ff fe9d 	bl	200001a0 <graphic_ctrl_bit_clear>
    delay_mikro(10);
20000466:	200a      	movs	r0, #10
20000468:	f7ff fe55 	bl	20000116 <delay_mikro>
    
    graphic_ctrl_bit_set(B_E);
2000046c:	2040      	movs	r0, #64	; 0x40
2000046e:	f7ff fe82 	bl	20000176 <graphic_ctrl_bit_set>
    delay_mikro(10);
20000472:	200a      	movs	r0, #10
20000474:	f7ff fe4f 	bl	20000116 <delay_mikro>
    
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000478:	2078      	movs	r0, #120	; 0x78
2000047a:	f7ff fe91 	bl	200001a0 <graphic_ctrl_bit_clear>
    delay_mili(30);
2000047e:	201e      	movs	r0, #30
20000480:	f7ff fe60 	bl	20000144 <delay_mili>
    
    graphic_ctrl_bit_set(B_RST);
20000484:	2020      	movs	r0, #32
20000486:	f7ff fe76 	bl	20000176 <graphic_ctrl_bit_set>
    
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000048a:	2118      	movs	r1, #24
2000048c:	203e      	movs	r0, #62	; 0x3e
2000048e:	f7ff ff8d 	bl	200003ac <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000492:	2118      	movs	r1, #24
20000494:	203f      	movs	r0, #63	; 0x3f
20000496:	f7ff ff89 	bl	200003ac <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000049a:	2118      	movs	r1, #24
2000049c:	20c0      	movs	r0, #192	; 0xc0
2000049e:	f7ff ff85 	bl	200003ac <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200004a2:	2118      	movs	r1, #24
200004a4:	2040      	movs	r0, #64	; 0x40
200004a6:	f7ff ff81 	bl	200003ac <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200004aa:	2118      	movs	r1, #24
200004ac:	20b8      	movs	r0, #184	; 0xb8
200004ae:	f7ff ff7d 	bl	200003ac <graphic_write_command>
    
    select_controller(0);
200004b2:	2000      	movs	r0, #0
200004b4:	f7ff fe8e 	bl	200001d4 <select_controller>
}
200004b8:	46c0      	nop			; (mov r8, r8)
200004ba:	46bd      	mov	sp, r7
200004bc:	bd80      	pop	{r7, pc}

200004be <graphic_clear_screen>:

void graphic_clear_screen(void)
{
200004be:	b580      	push	{r7, lr}
200004c0:	b082      	sub	sp, #8
200004c2:	af00      	add	r7, sp, #0
    char page, add;
    
    for(page = 0; page <= 7; page++)
200004c4:	1dfb      	adds	r3, r7, #7
200004c6:	2200      	movs	r2, #0
200004c8:	701a      	strb	r2, [r3, #0]
200004ca:	e023      	b.n	20000514 <graphic_clear_screen+0x56>
    {
        graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200004cc:	1dfb      	adds	r3, r7, #7
200004ce:	781b      	ldrb	r3, [r3, #0]
200004d0:	2248      	movs	r2, #72	; 0x48
200004d2:	4252      	negs	r2, r2
200004d4:	4313      	orrs	r3, r2
200004d6:	b2db      	uxtb	r3, r3
200004d8:	2118      	movs	r1, #24
200004da:	0018      	movs	r0, r3
200004dc:	f7ff ff66 	bl	200003ac <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200004e0:	2118      	movs	r1, #24
200004e2:	2040      	movs	r0, #64	; 0x40
200004e4:	f7ff ff62 	bl	200003ac <graphic_write_command>
        
        for(add = 0; add <= 63; add++)
200004e8:	1dbb      	adds	r3, r7, #6
200004ea:	2200      	movs	r2, #0
200004ec:	701a      	strb	r2, [r3, #0]
200004ee:	e008      	b.n	20000502 <graphic_clear_screen+0x44>
        {
            graphic_write_data(0, B_CS1 | B_CS2);
200004f0:	2118      	movs	r1, #24
200004f2:	2000      	movs	r0, #0
200004f4:	f7ff ff7a 	bl	200003ec <graphic_write_data>
        for(add = 0; add <= 63; add++)
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	781a      	ldrb	r2, [r3, #0]
200004fc:	1dbb      	adds	r3, r7, #6
200004fe:	3201      	adds	r2, #1
20000500:	701a      	strb	r2, [r3, #0]
20000502:	1dbb      	adds	r3, r7, #6
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	2b3f      	cmp	r3, #63	; 0x3f
20000508:	d9f2      	bls.n	200004f0 <graphic_clear_screen+0x32>
    for(page = 0; page <= 7; page++)
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	781a      	ldrb	r2, [r3, #0]
2000050e:	1dfb      	adds	r3, r7, #7
20000510:	3201      	adds	r2, #1
20000512:	701a      	strb	r2, [r3, #0]
20000514:	1dfb      	adds	r3, r7, #7
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	2b07      	cmp	r3, #7
2000051a:	d9d7      	bls.n	200004cc <graphic_clear_screen+0xe>
        }
    }
}
2000051c:	46c0      	nop			; (mov r8, r8)
2000051e:	46bd      	mov	sp, r7
20000520:	b002      	add	sp, #8
20000522:	bd80      	pop	{r7, pc}

20000524 <pixel>:

void pixel(unsigned x, unsigned y, unsigned set)
{
20000524:	b5f0      	push	{r4, r5, r6, r7, lr}
20000526:	b087      	sub	sp, #28
20000528:	af00      	add	r7, sp, #0
2000052a:	60f8      	str	r0, [r7, #12]
2000052c:	60b9      	str	r1, [r7, #8]
2000052e:	607a      	str	r2, [r7, #4]
    if (x > 128 || x == 0 || y > 64 || y == 0 || set > 1)
20000530:	68fb      	ldr	r3, [r7, #12]
20000532:	2b80      	cmp	r3, #128	; 0x80
20000534:	d900      	bls.n	20000538 <pixel+0x14>
20000536:	e0b8      	b.n	200006aa <pixel+0x186>
20000538:	68fb      	ldr	r3, [r7, #12]
2000053a:	2b00      	cmp	r3, #0
2000053c:	d100      	bne.n	20000540 <pixel+0x1c>
2000053e:	e0b4      	b.n	200006aa <pixel+0x186>
20000540:	68bb      	ldr	r3, [r7, #8]
20000542:	2b40      	cmp	r3, #64	; 0x40
20000544:	d900      	bls.n	20000548 <pixel+0x24>
20000546:	e0b0      	b.n	200006aa <pixel+0x186>
20000548:	68bb      	ldr	r3, [r7, #8]
2000054a:	2b00      	cmp	r3, #0
2000054c:	d100      	bne.n	20000550 <pixel+0x2c>
2000054e:	e0ac      	b.n	200006aa <pixel+0x186>
20000550:	687b      	ldr	r3, [r7, #4]
20000552:	2b01      	cmp	r3, #1
20000554:	d900      	bls.n	20000558 <pixel+0x34>
20000556:	e0a8      	b.n	200006aa <pixel+0x186>
    {
        return;
    }
    
    uint8_t bitmask, controller, x_fysisk, index = (y-1)/8;
20000558:	68bb      	ldr	r3, [r7, #8]
2000055a:	3b01      	subs	r3, #1
2000055c:	08da      	lsrs	r2, r3, #3
2000055e:	2314      	movs	r3, #20
20000560:	18fb      	adds	r3, r7, r3
20000562:	701a      	strb	r2, [r3, #0]
    
    switch ((y-1) % 8)
20000564:	68bb      	ldr	r3, [r7, #8]
20000566:	3b01      	subs	r3, #1
20000568:	2207      	movs	r2, #7
2000056a:	4013      	ands	r3, r2
2000056c:	2b07      	cmp	r3, #7
2000056e:	d82c      	bhi.n	200005ca <pixel+0xa6>
20000570:	009a      	lsls	r2, r3, #2
20000572:	4b50      	ldr	r3, [pc, #320]	; (200006b4 <pixel+0x190>)
20000574:	18d3      	adds	r3, r2, r3
20000576:	681b      	ldr	r3, [r3, #0]
20000578:	469f      	mov	pc, r3
    {
        case 0:
            bitmask = 0x01;
2000057a:	2317      	movs	r3, #23
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	2201      	movs	r2, #1
20000580:	701a      	strb	r2, [r3, #0]
            break;
20000582:	e022      	b.n	200005ca <pixel+0xa6>
        case 1:
            bitmask = 0x02;
20000584:	2317      	movs	r3, #23
20000586:	18fb      	adds	r3, r7, r3
20000588:	2202      	movs	r2, #2
2000058a:	701a      	strb	r2, [r3, #0]
            break;
2000058c:	e01d      	b.n	200005ca <pixel+0xa6>
        case 2:
            bitmask = 0x04;
2000058e:	2317      	movs	r3, #23
20000590:	18fb      	adds	r3, r7, r3
20000592:	2204      	movs	r2, #4
20000594:	701a      	strb	r2, [r3, #0]
            break;
20000596:	e018      	b.n	200005ca <pixel+0xa6>
        case 3:
            bitmask = 0x08;
20000598:	2317      	movs	r3, #23
2000059a:	18fb      	adds	r3, r7, r3
2000059c:	2208      	movs	r2, #8
2000059e:	701a      	strb	r2, [r3, #0]
            break;
200005a0:	e013      	b.n	200005ca <pixel+0xa6>
        case 4:
            bitmask = 0x10;
200005a2:	2317      	movs	r3, #23
200005a4:	18fb      	adds	r3, r7, r3
200005a6:	2210      	movs	r2, #16
200005a8:	701a      	strb	r2, [r3, #0]
            break;
200005aa:	e00e      	b.n	200005ca <pixel+0xa6>
        case 5:
            bitmask = 0x20;
200005ac:	2317      	movs	r3, #23
200005ae:	18fb      	adds	r3, r7, r3
200005b0:	2220      	movs	r2, #32
200005b2:	701a      	strb	r2, [r3, #0]
            break;
200005b4:	e009      	b.n	200005ca <pixel+0xa6>
        case 6:
            bitmask = 0x40;
200005b6:	2317      	movs	r3, #23
200005b8:	18fb      	adds	r3, r7, r3
200005ba:	2240      	movs	r2, #64	; 0x40
200005bc:	701a      	strb	r2, [r3, #0]
            break;
200005be:	e004      	b.n	200005ca <pixel+0xa6>
        case 7:
            bitmask = 0x80;
200005c0:	2317      	movs	r3, #23
200005c2:	18fb      	adds	r3, r7, r3
200005c4:	2280      	movs	r2, #128	; 0x80
200005c6:	701a      	strb	r2, [r3, #0]
            break;
200005c8:	46c0      	nop			; (mov r8, r8)
    }
    
    if (set == 0)
200005ca:	687b      	ldr	r3, [r7, #4]
200005cc:	2b00      	cmp	r3, #0
200005ce:	d105      	bne.n	200005dc <pixel+0xb8>
    {
        bitmask = ~bitmask;
200005d0:	2217      	movs	r2, #23
200005d2:	18bb      	adds	r3, r7, r2
200005d4:	18ba      	adds	r2, r7, r2
200005d6:	7812      	ldrb	r2, [r2, #0]
200005d8:	43d2      	mvns	r2, r2
200005da:	701a      	strb	r2, [r3, #0]
    }
    
    if (x > 64)
200005dc:	68fb      	ldr	r3, [r7, #12]
200005de:	2b40      	cmp	r3, #64	; 0x40
200005e0:	d90a      	bls.n	200005f8 <pixel+0xd4>
    {
        controller = B_CS2;
200005e2:	2316      	movs	r3, #22
200005e4:	18fb      	adds	r3, r7, r3
200005e6:	2210      	movs	r2, #16
200005e8:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-65;
200005ea:	68fb      	ldr	r3, [r7, #12]
200005ec:	b2da      	uxtb	r2, r3
200005ee:	2315      	movs	r3, #21
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	3a41      	subs	r2, #65	; 0x41
200005f4:	701a      	strb	r2, [r3, #0]
200005f6:	e009      	b.n	2000060c <pixel+0xe8>
    }
    else
    {
        controller = B_CS1;
200005f8:	2316      	movs	r3, #22
200005fa:	18fb      	adds	r3, r7, r3
200005fc:	2208      	movs	r2, #8
200005fe:	701a      	strb	r2, [r3, #0]
        x_fysisk = x-1;
20000600:	68fb      	ldr	r3, [r7, #12]
20000602:	b2da      	uxtb	r2, r3
20000604:	2315      	movs	r3, #21
20000606:	18fb      	adds	r3, r7, r3
20000608:	3a01      	subs	r2, #1
2000060a:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
2000060c:	2615      	movs	r6, #21
2000060e:	19bb      	adds	r3, r7, r6
20000610:	781b      	ldrb	r3, [r3, #0]
20000612:	2240      	movs	r2, #64	; 0x40
20000614:	4313      	orrs	r3, r2
20000616:	b2da      	uxtb	r2, r3
20000618:	2516      	movs	r5, #22
2000061a:	197b      	adds	r3, r7, r5
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0019      	movs	r1, r3
20000620:	0010      	movs	r0, r2
20000622:	f7ff fec3 	bl	200003ac <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000626:	2314      	movs	r3, #20
20000628:	18fb      	adds	r3, r7, r3
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	2248      	movs	r2, #72	; 0x48
2000062e:	4252      	negs	r2, r2
20000630:	4313      	orrs	r3, r2
20000632:	b2da      	uxtb	r2, r3
20000634:	197b      	adds	r3, r7, r5
20000636:	781b      	ldrb	r3, [r3, #0]
20000638:	0019      	movs	r1, r3
2000063a:	0010      	movs	r0, r2
2000063c:	f7ff feb6 	bl	200003ac <graphic_write_command>
    
    uint8_t temp = graphic_read_data(controller);
20000640:	2313      	movs	r3, #19
20000642:	18fc      	adds	r4, r7, r3
20000644:	197b      	adds	r3, r7, r5
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	0018      	movs	r0, r3
2000064a:	f7ff fef2 	bl	20000432 <graphic_read_data>
2000064e:	0003      	movs	r3, r0
20000650:	7023      	strb	r3, [r4, #0]
    
    graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000652:	19bb      	adds	r3, r7, r6
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	2240      	movs	r2, #64	; 0x40
20000658:	4313      	orrs	r3, r2
2000065a:	b2da      	uxtb	r2, r3
2000065c:	197b      	adds	r3, r7, r5
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	0019      	movs	r1, r3
20000662:	0010      	movs	r0, r2
20000664:	f7ff fea2 	bl	200003ac <graphic_write_command>
    
    if (set == 1)
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	2b01      	cmp	r3, #1
2000066c:	d109      	bne.n	20000682 <pixel+0x15e>
    {
        bitmask = bitmask | temp;
2000066e:	2217      	movs	r2, #23
20000670:	18bb      	adds	r3, r7, r2
20000672:	18b9      	adds	r1, r7, r2
20000674:	2213      	movs	r2, #19
20000676:	18ba      	adds	r2, r7, r2
20000678:	7809      	ldrb	r1, [r1, #0]
2000067a:	7812      	ldrb	r2, [r2, #0]
2000067c:	430a      	orrs	r2, r1
2000067e:	701a      	strb	r2, [r3, #0]
20000680:	e008      	b.n	20000694 <pixel+0x170>
    }
    else
    {
        bitmask = bitmask & temp;
20000682:	2217      	movs	r2, #23
20000684:	18bb      	adds	r3, r7, r2
20000686:	18ba      	adds	r2, r7, r2
20000688:	2113      	movs	r1, #19
2000068a:	1879      	adds	r1, r7, r1
2000068c:	7812      	ldrb	r2, [r2, #0]
2000068e:	7809      	ldrb	r1, [r1, #0]
20000690:	400a      	ands	r2, r1
20000692:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_data(bitmask, controller);
20000694:	2316      	movs	r3, #22
20000696:	18fb      	adds	r3, r7, r3
20000698:	781a      	ldrb	r2, [r3, #0]
2000069a:	2317      	movs	r3, #23
2000069c:	18fb      	adds	r3, r7, r3
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	0011      	movs	r1, r2
200006a2:	0018      	movs	r0, r3
200006a4:	f7ff fea2 	bl	200003ec <graphic_write_data>
200006a8:	e000      	b.n	200006ac <pixel+0x188>
        return;
200006aa:	46c0      	nop			; (mov r8, r8)
}
200006ac:	46bd      	mov	sp, r7
200006ae:	b007      	add	sp, #28
200006b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200006b2:	46c0      	nop			; (mov r8, r8)
200006b4:	20001050 	andcs	r1, r0, r0, asr r0

200006b8 <draw_object>:

void draw_object(POBJECT o)
{
200006b8:	b580      	push	{r7, lr}
200006ba:	b084      	sub	sp, #16
200006bc:	af00      	add	r7, sp, #0
200006be:	6078      	str	r0, [r7, #4]
    int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
200006c0:	2300      	movs	r3, #0
200006c2:	60fb      	str	r3, [r7, #12]
200006c4:	e01d      	b.n	20000702 <draw_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,1);
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	68da      	ldr	r2, [r3, #12]
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	6819      	ldr	r1, [r3, #0]
200006ce:	68fb      	ldr	r3, [r7, #12]
200006d0:	3304      	adds	r3, #4
200006d2:	005b      	lsls	r3, r3, #1
200006d4:	18cb      	adds	r3, r1, r3
200006d6:	3304      	adds	r3, #4
200006d8:	781b      	ldrb	r3, [r3, #0]
200006da:	18d3      	adds	r3, r2, r3
200006dc:	0018      	movs	r0, r3
200006de:	687b      	ldr	r3, [r7, #4]
200006e0:	691a      	ldr	r2, [r3, #16]
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	6819      	ldr	r1, [r3, #0]
200006e6:	68fb      	ldr	r3, [r7, #12]
200006e8:	3304      	adds	r3, #4
200006ea:	005b      	lsls	r3, r3, #1
200006ec:	18cb      	adds	r3, r1, r3
200006ee:	3305      	adds	r3, #5
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	18d3      	adds	r3, r2, r3
200006f4:	2201      	movs	r2, #1
200006f6:	0019      	movs	r1, r3
200006f8:	f7ff ff14 	bl	20000524 <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
200006fc:	68fb      	ldr	r3, [r7, #12]
200006fe:	3301      	adds	r3, #1
20000700:	60fb      	str	r3, [r7, #12]
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	681b      	ldr	r3, [r3, #0]
20000706:	681b      	ldr	r3, [r3, #0]
20000708:	68fa      	ldr	r2, [r7, #12]
2000070a:	429a      	cmp	r2, r3
2000070c:	dbdb      	blt.n	200006c6 <draw_object+0xe>
    }
}
2000070e:	46c0      	nop			; (mov r8, r8)
20000710:	46bd      	mov	sp, r7
20000712:	b004      	add	sp, #16
20000714:	bd80      	pop	{r7, pc}

20000716 <clear_object>:

void clear_object(POBJECT o)
{
20000716:	b580      	push	{r7, lr}
20000718:	b084      	sub	sp, #16
2000071a:	af00      	add	r7, sp, #0
2000071c:	6078      	str	r0, [r7, #4]
        int i;
    
    for(i = 0; i < o->geo->numpoints; i++)
2000071e:	2300      	movs	r3, #0
20000720:	60fb      	str	r3, [r7, #12]
20000722:	e01d      	b.n	20000760 <clear_object+0x4a>
    {
        pixel(o->posx + o->geo->px[i].x,o->posy + o->geo->px[i].y,0);
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	68da      	ldr	r2, [r3, #12]
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	6819      	ldr	r1, [r3, #0]
2000072c:	68fb      	ldr	r3, [r7, #12]
2000072e:	3304      	adds	r3, #4
20000730:	005b      	lsls	r3, r3, #1
20000732:	18cb      	adds	r3, r1, r3
20000734:	3304      	adds	r3, #4
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	18d3      	adds	r3, r2, r3
2000073a:	0018      	movs	r0, r3
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	691a      	ldr	r2, [r3, #16]
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	6819      	ldr	r1, [r3, #0]
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	3304      	adds	r3, #4
20000748:	005b      	lsls	r3, r3, #1
2000074a:	18cb      	adds	r3, r1, r3
2000074c:	3305      	adds	r3, #5
2000074e:	781b      	ldrb	r3, [r3, #0]
20000750:	18d3      	adds	r3, r2, r3
20000752:	2200      	movs	r2, #0
20000754:	0019      	movs	r1, r3
20000756:	f7ff fee5 	bl	20000524 <pixel>
    for(i = 0; i < o->geo->numpoints; i++)
2000075a:	68fb      	ldr	r3, [r7, #12]
2000075c:	3301      	adds	r3, #1
2000075e:	60fb      	str	r3, [r7, #12]
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	681b      	ldr	r3, [r3, #0]
20000764:	681b      	ldr	r3, [r3, #0]
20000766:	68fa      	ldr	r2, [r7, #12]
20000768:	429a      	cmp	r2, r3
2000076a:	dbdb      	blt.n	20000724 <clear_object+0xe>
    }
}
2000076c:	46c0      	nop			; (mov r8, r8)
2000076e:	46bd      	mov	sp, r7
20000770:	b004      	add	sp, #16
20000772:	bd80      	pop	{r7, pc}

20000774 <move_object>:

void move_object(POBJECT o)
{
20000774:	b580      	push	{r7, lr}
20000776:	b082      	sub	sp, #8
20000778:	af00      	add	r7, sp, #0
2000077a:	6078      	str	r0, [r7, #4]
    clear_object(o);
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	0018      	movs	r0, r3
20000780:	f7ff ffc9 	bl	20000716 <clear_object>
    
    o->posx += o->dirx;
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	68da      	ldr	r2, [r3, #12]
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	685b      	ldr	r3, [r3, #4]
2000078c:	18d2      	adds	r2, r2, r3
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	691a      	ldr	r2, [r3, #16]
20000796:	687b      	ldr	r3, [r7, #4]
20000798:	689b      	ldr	r3, [r3, #8]
2000079a:	18d2      	adds	r2, r2, r3
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	611a      	str	r2, [r3, #16]
    
    if((o->posy) >= left_paddle.posy && (o->posy + o->geo->sizey) <= (left_paddle.posy + left_paddle.geo->sizey))
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	691a      	ldr	r2, [r3, #16]
200007a4:	4b48      	ldr	r3, [pc, #288]	; (200008c8 <move_object+0x154>)
200007a6:	691b      	ldr	r3, [r3, #16]
200007a8:	429a      	cmp	r2, r3
200007aa:	db24      	blt.n	200007f6 <move_object+0x82>
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	691a      	ldr	r2, [r3, #16]
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	681b      	ldr	r3, [r3, #0]
200007b4:	689b      	ldr	r3, [r3, #8]
200007b6:	18d2      	adds	r2, r2, r3
200007b8:	4b43      	ldr	r3, [pc, #268]	; (200008c8 <move_object+0x154>)
200007ba:	6919      	ldr	r1, [r3, #16]
200007bc:	4b42      	ldr	r3, [pc, #264]	; (200008c8 <move_object+0x154>)
200007be:	681b      	ldr	r3, [r3, #0]
200007c0:	689b      	ldr	r3, [r3, #8]
200007c2:	18cb      	adds	r3, r1, r3
200007c4:	429a      	cmp	r2, r3
200007c6:	dc16      	bgt.n	200007f6 <move_object+0x82>
    {
        if(o->posx <= (left_paddle.posx + left_paddle.geo->sizex))
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	68da      	ldr	r2, [r3, #12]
200007cc:	4b3e      	ldr	r3, [pc, #248]	; (200008c8 <move_object+0x154>)
200007ce:	68d9      	ldr	r1, [r3, #12]
200007d0:	4b3d      	ldr	r3, [pc, #244]	; (200008c8 <move_object+0x154>)
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	685b      	ldr	r3, [r3, #4]
200007d6:	18cb      	adds	r3, r1, r3
200007d8:	429a      	cmp	r2, r3
200007da:	dc0c      	bgt.n	200007f6 <move_object+0x82>
        {
            o->dirx *= -1;
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	685b      	ldr	r3, [r3, #4]
200007e0:	425a      	negs	r2, r3
200007e2:	687b      	ldr	r3, [r7, #4]
200007e4:	605a      	str	r2, [r3, #4]
            o->posx = left_paddle.posx + o->geo->sizex;
200007e6:	4b38      	ldr	r3, [pc, #224]	; (200008c8 <move_object+0x154>)
200007e8:	68da      	ldr	r2, [r3, #12]
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	681b      	ldr	r3, [r3, #0]
200007ee:	685b      	ldr	r3, [r3, #4]
200007f0:	18d2      	adds	r2, r2, r3
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	60da      	str	r2, [r3, #12]
        }
    }
    
    if(o->posx < 1)
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	68db      	ldr	r3, [r3, #12]
200007fa:	2b00      	cmp	r3, #0
200007fc:	dc09      	bgt.n	20000812 <move_object+0x9e>
    {
        o->posx = 64;
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	2240      	movs	r2, #64	; 0x40
20000802:	60da      	str	r2, [r3, #12]
        right_point += 1;
20000804:	4b31      	ldr	r3, [pc, #196]	; (200008cc <move_object+0x158>)
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	b2db      	uxtb	r3, r3
2000080a:	3301      	adds	r3, #1
2000080c:	b2da      	uxtb	r2, r3
2000080e:	4b2f      	ldr	r3, [pc, #188]	; (200008cc <move_object+0x158>)
20000810:	701a      	strb	r2, [r3, #0]
    }
    if( (o->posx + o->geo->sizex) > 128)
20000812:	687b      	ldr	r3, [r7, #4]
20000814:	68da      	ldr	r2, [r3, #12]
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	681b      	ldr	r3, [r3, #0]
2000081a:	685b      	ldr	r3, [r3, #4]
2000081c:	18d3      	adds	r3, r2, r3
2000081e:	2b80      	cmp	r3, #128	; 0x80
20000820:	dd09      	ble.n	20000836 <move_object+0xc2>
    {
        o->posx = 64;
20000822:	687b      	ldr	r3, [r7, #4]
20000824:	2240      	movs	r2, #64	; 0x40
20000826:	60da      	str	r2, [r3, #12]
        left_point += 1; 
20000828:	4b29      	ldr	r3, [pc, #164]	; (200008d0 <move_object+0x15c>)
2000082a:	781b      	ldrb	r3, [r3, #0]
2000082c:	b2db      	uxtb	r3, r3
2000082e:	3301      	adds	r3, #1
20000830:	b2da      	uxtb	r2, r3
20000832:	4b27      	ldr	r3, [pc, #156]	; (200008d0 <move_object+0x15c>)
20000834:	701a      	strb	r2, [r3, #0]
    }
    
    if((o->posy) >= right_paddle.posy && (o->posy + o->geo->sizey) <= (right_paddle.posy + right_paddle.geo->sizey))
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	691a      	ldr	r2, [r3, #16]
2000083a:	4b26      	ldr	r3, [pc, #152]	; (200008d4 <move_object+0x160>)
2000083c:	691b      	ldr	r3, [r3, #16]
2000083e:	429a      	cmp	r2, r3
20000840:	db24      	blt.n	2000088c <move_object+0x118>
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	691a      	ldr	r2, [r3, #16]
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	681b      	ldr	r3, [r3, #0]
2000084a:	689b      	ldr	r3, [r3, #8]
2000084c:	18d2      	adds	r2, r2, r3
2000084e:	4b21      	ldr	r3, [pc, #132]	; (200008d4 <move_object+0x160>)
20000850:	6919      	ldr	r1, [r3, #16]
20000852:	4b20      	ldr	r3, [pc, #128]	; (200008d4 <move_object+0x160>)
20000854:	681b      	ldr	r3, [r3, #0]
20000856:	689b      	ldr	r3, [r3, #8]
20000858:	18cb      	adds	r3, r1, r3
2000085a:	429a      	cmp	r2, r3
2000085c:	dc16      	bgt.n	2000088c <move_object+0x118>
    {
        if( (o->posx + o->geo->sizex) >= right_paddle.posx)
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	68da      	ldr	r2, [r3, #12]
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	681b      	ldr	r3, [r3, #0]
20000866:	685b      	ldr	r3, [r3, #4]
20000868:	18d2      	adds	r2, r2, r3
2000086a:	4b1a      	ldr	r3, [pc, #104]	; (200008d4 <move_object+0x160>)
2000086c:	68db      	ldr	r3, [r3, #12]
2000086e:	429a      	cmp	r2, r3
20000870:	db0c      	blt.n	2000088c <move_object+0x118>
        {
            o->dirx *= -1;
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	685b      	ldr	r3, [r3, #4]
20000876:	425a      	negs	r2, r3
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	605a      	str	r2, [r3, #4]
            o->posx = right_paddle.posx - o->geo->sizex;
2000087c:	4b15      	ldr	r3, [pc, #84]	; (200008d4 <move_object+0x160>)
2000087e:	68da      	ldr	r2, [r3, #12]
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	681b      	ldr	r3, [r3, #0]
20000884:	685b      	ldr	r3, [r3, #4]
20000886:	1ad2      	subs	r2, r2, r3
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	60da      	str	r2, [r3, #12]
    else
    {
        
    }
    
    if(o->posy < 1)
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	691b      	ldr	r3, [r3, #16]
20000890:	2b00      	cmp	r3, #0
20000892:	dc04      	bgt.n	2000089e <move_object+0x12a>
    {
        o->diry *= -1;
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	689b      	ldr	r3, [r3, #8]
20000898:	425a      	negs	r2, r3
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	609a      	str	r2, [r3, #8]
    }
    if( (o->posy + o->geo->sizey) > 64 )
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	691a      	ldr	r2, [r3, #16]
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	681b      	ldr	r3, [r3, #0]
200008a6:	689b      	ldr	r3, [r3, #8]
200008a8:	18d3      	adds	r3, r2, r3
200008aa:	2b40      	cmp	r3, #64	; 0x40
200008ac:	dd04      	ble.n	200008b8 <move_object+0x144>
    {
        o->diry *= -1;
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	689b      	ldr	r3, [r3, #8]
200008b2:	425a      	negs	r2, r3
200008b4:	687b      	ldr	r3, [r7, #4]
200008b6:	609a      	str	r2, [r3, #8]
    }
    
    draw_object(o);
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	0018      	movs	r0, r3
200008bc:	f7ff fefc 	bl	200006b8 <draw_object>
}
200008c0:	46c0      	nop			; (mov r8, r8)
200008c2:	46bd      	mov	sp, r7
200008c4:	b002      	add	sp, #8
200008c6:	bd80      	pop	{r7, pc}
200008c8:	20000fe8 	andcs	r0, r0, r8, ror #31
200008cc:	20000e0d 	andcs	r0, r0, sp, lsl #28
200008d0:	20000e0c 	andcs	r0, r0, ip, lsl #28
200008d4:	2000100c 	andcs	r1, r0, ip

200008d8 <move_paddle>:

void move_paddle(POBJECT o)
{
200008d8:	b580      	push	{r7, lr}
200008da:	b082      	sub	sp, #8
200008dc:	af00      	add	r7, sp, #0
200008de:	6078      	str	r0, [r7, #4]
    clear_object(o);
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	0018      	movs	r0, r3
200008e4:	f7ff ff17 	bl	20000716 <clear_object>
    
    o->posx += o->dirx;
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	68da      	ldr	r2, [r3, #12]
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	685b      	ldr	r3, [r3, #4]
200008f0:	18d2      	adds	r2, r2, r3
200008f2:	687b      	ldr	r3, [r7, #4]
200008f4:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	691a      	ldr	r2, [r3, #16]
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	689b      	ldr	r3, [r3, #8]
200008fe:	18d2      	adds	r2, r2, r3
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	611a      	str	r2, [r3, #16]
   
    if(o->posy < 1)
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	691b      	ldr	r3, [r3, #16]
20000908:	2b00      	cmp	r3, #0
2000090a:	dc02      	bgt.n	20000912 <move_paddle+0x3a>
    {
        o->diry = 0;
2000090c:	687b      	ldr	r3, [r7, #4]
2000090e:	2200      	movs	r2, #0
20000910:	609a      	str	r2, [r3, #8]
    }
    if( (o->posy + o->geo->sizey) > 64 )
20000912:	687b      	ldr	r3, [r7, #4]
20000914:	691a      	ldr	r2, [r3, #16]
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	681b      	ldr	r3, [r3, #0]
2000091a:	689b      	ldr	r3, [r3, #8]
2000091c:	18d3      	adds	r3, r2, r3
2000091e:	2b40      	cmp	r3, #64	; 0x40
20000920:	dd02      	ble.n	20000928 <move_paddle+0x50>
    {
        o->diry = 0;
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	2200      	movs	r2, #0
20000926:	609a      	str	r2, [r3, #8]
    }
    
    draw_object(o);
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	0018      	movs	r0, r3
2000092c:	f7ff fec4 	bl	200006b8 <draw_object>
    o->dirx = 0;
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	2200      	movs	r2, #0
20000934:	605a      	str	r2, [r3, #4]
    o->diry = 0;
20000936:	687b      	ldr	r3, [r7, #4]
20000938:	2200      	movs	r2, #0
2000093a:	609a      	str	r2, [r3, #8]
}
2000093c:	46c0      	nop			; (mov r8, r8)
2000093e:	46bd      	mov	sp, r7
20000940:	b002      	add	sp, #8
20000942:	bd80      	pop	{r7, pc}

20000944 <set_speed_object>:

void set_speed_object(POBJECT o, int speedx, int speedy)
{
20000944:	b580      	push	{r7, lr}
20000946:	b084      	sub	sp, #16
20000948:	af00      	add	r7, sp, #0
2000094a:	60f8      	str	r0, [r7, #12]
2000094c:	60b9      	str	r1, [r7, #8]
2000094e:	607a      	str	r2, [r7, #4]
    o->dirx = speedx;
20000950:	68fb      	ldr	r3, [r7, #12]
20000952:	68ba      	ldr	r2, [r7, #8]
20000954:	605a      	str	r2, [r3, #4]
    o->diry = speedy;
20000956:	68fb      	ldr	r3, [r7, #12]
20000958:	687a      	ldr	r2, [r7, #4]
2000095a:	609a      	str	r2, [r3, #8]
}
2000095c:	46c0      	nop			; (mov r8, r8)
2000095e:	46bd      	mov	sp, r7
20000960:	b004      	add	sp, #16
20000962:	bd80      	pop	{r7, pc}

20000964 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x)
{
20000964:	b580      	push	{r7, lr}
20000966:	b082      	sub	sp, #8
20000968:	af00      	add	r7, sp, #0
2000096a:	0002      	movs	r2, r0
2000096c:	1dfb      	adds	r3, r7, #7
2000096e:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x) | x;
20000970:	4b05      	ldr	r3, [pc, #20]	; (20000988 <ascii_ctrl_bit_set+0x24>)
20000972:	781a      	ldrb	r2, [r3, #0]
20000974:	4904      	ldr	r1, [pc, #16]	; (20000988 <ascii_ctrl_bit_set+0x24>)
20000976:	1dfb      	adds	r3, r7, #7
20000978:	781b      	ldrb	r3, [r3, #0]
2000097a:	4313      	orrs	r3, r2
2000097c:	b2db      	uxtb	r3, r3
2000097e:	700b      	strb	r3, [r1, #0]
}
20000980:	46c0      	nop			; (mov r8, r8)
20000982:	46bd      	mov	sp, r7
20000984:	b002      	add	sp, #8
20000986:	bd80      	pop	{r7, pc}
20000988:	40021014 	andmi	r1, r2, r4, lsl r0

2000098c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
2000098c:	b580      	push	{r7, lr}
2000098e:	b082      	sub	sp, #8
20000990:	af00      	add	r7, sp, #0
20000992:	0002      	movs	r2, r0
20000994:	1dfb      	adds	r3, r7, #7
20000996:	701a      	strb	r2, [r3, #0]
    *GRAPHIC_CTRL_ODR = (*GRAPHIC_CTRL_ODR & ~x);
20000998:	4b08      	ldr	r3, [pc, #32]	; (200009bc <ascii_ctrl_bit_clear+0x30>)
2000099a:	781b      	ldrb	r3, [r3, #0]
2000099c:	b25b      	sxtb	r3, r3
2000099e:	1dfa      	adds	r2, r7, #7
200009a0:	7812      	ldrb	r2, [r2, #0]
200009a2:	b252      	sxtb	r2, r2
200009a4:	43d2      	mvns	r2, r2
200009a6:	b252      	sxtb	r2, r2
200009a8:	4013      	ands	r3, r2
200009aa:	b25a      	sxtb	r2, r3
200009ac:	4b03      	ldr	r3, [pc, #12]	; (200009bc <ascii_ctrl_bit_clear+0x30>)
200009ae:	b2d2      	uxtb	r2, r2
200009b0:	701a      	strb	r2, [r3, #0]
}
200009b2:	46c0      	nop			; (mov r8, r8)
200009b4:	46bd      	mov	sp, r7
200009b6:	b002      	add	sp, #8
200009b8:	bd80      	pop	{r7, pc}
200009ba:	46c0      	nop			; (mov r8, r8)
200009bc:	40021014 	andmi	r1, r2, r4, lsl r0

200009c0 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
200009c0:	b580      	push	{r7, lr}
200009c2:	b082      	sub	sp, #8
200009c4:	af00      	add	r7, sp, #0
200009c6:	0002      	movs	r2, r0
200009c8:	1dfb      	adds	r3, r7, #7
200009ca:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
200009cc:	2040      	movs	r0, #64	; 0x40
200009ce:	f7ff ffc9 	bl	20000964 <ascii_ctrl_bit_set>
    *GRAPHIC_DATA_ODR = byte;
200009d2:	4a06      	ldr	r2, [pc, #24]	; (200009ec <ascii_write_controller+0x2c>)
200009d4:	1dfb      	adds	r3, r7, #7
200009d6:	781b      	ldrb	r3, [r3, #0]
200009d8:	7013      	strb	r3, [r2, #0]
    delay_250ns();
200009da:	f7ff fb71 	bl	200000c0 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
200009de:	2040      	movs	r0, #64	; 0x40
200009e0:	f7ff ffd4 	bl	2000098c <ascii_ctrl_bit_clear>
}
200009e4:	46c0      	nop			; (mov r8, r8)
200009e6:	46bd      	mov	sp, r7
200009e8:	b002      	add	sp, #8
200009ea:	bd80      	pop	{r7, pc}
200009ec:	40021015 	andmi	r1, r2, r5, lsl r0

200009f0 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
200009f0:	b580      	push	{r7, lr}
200009f2:	b082      	sub	sp, #8
200009f4:	af00      	add	r7, sp, #0
    unsigned char ret_val;
    
    ascii_ctrl_bit_set(B_E);
200009f6:	2040      	movs	r0, #64	; 0x40
200009f8:	f7ff ffb4 	bl	20000964 <ascii_ctrl_bit_set>
    
    delay_250ns();
200009fc:	f7ff fb60 	bl	200000c0 <delay_250ns>
    delay_250ns();
20000a00:	f7ff fb5e 	bl	200000c0 <delay_250ns>
    
    ret_val = *GRAPHIC_DATA_IDR;
20000a04:	4a06      	ldr	r2, [pc, #24]	; (20000a20 <ascii_read_controller+0x30>)
20000a06:	1dfb      	adds	r3, r7, #7
20000a08:	7812      	ldrb	r2, [r2, #0]
20000a0a:	701a      	strb	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_E);
20000a0c:	2040      	movs	r0, #64	; 0x40
20000a0e:	f7ff ffbd 	bl	2000098c <ascii_ctrl_bit_clear>
    
    return ret_val;
20000a12:	1dfb      	adds	r3, r7, #7
20000a14:	781b      	ldrb	r3, [r3, #0]
}
20000a16:	0018      	movs	r0, r3
20000a18:	46bd      	mov	sp, r7
20000a1a:	b002      	add	sp, #8
20000a1c:	bd80      	pop	{r7, pc}
20000a1e:	46c0      	nop			; (mov r8, r8)
20000a20:	40021011 	andmi	r1, r2, r1, lsl r0

20000a24 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000a24:	b580      	push	{r7, lr}
20000a26:	b082      	sub	sp, #8
20000a28:	af00      	add	r7, sp, #0
20000a2a:	0002      	movs	r2, r0
20000a2c:	1dfb      	adds	r3, r7, #7
20000a2e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RW | B_RS);
20000a30:	2003      	movs	r0, #3
20000a32:	f7ff ffab 	bl	2000098c <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000a36:	1dfb      	adds	r3, r7, #7
20000a38:	781b      	ldrb	r3, [r3, #0]
20000a3a:	0018      	movs	r0, r3
20000a3c:	f7ff ffc0 	bl	200009c0 <ascii_write_controller>
}
20000a40:	46c0      	nop			; (mov r8, r8)
20000a42:	46bd      	mov	sp, r7
20000a44:	b002      	add	sp, #8
20000a46:	bd80      	pop	{r7, pc}

20000a48 <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
20000a48:	b580      	push	{r7, lr}
20000a4a:	b082      	sub	sp, #8
20000a4c:	af00      	add	r7, sp, #0
20000a4e:	0002      	movs	r2, r0
20000a50:	1dfb      	adds	r3, r7, #7
20000a52:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000a54:	2001      	movs	r0, #1
20000a56:	f7ff ff85 	bl	20000964 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
20000a5a:	2002      	movs	r0, #2
20000a5c:	f7ff ff96 	bl	2000098c <ascii_ctrl_bit_clear>
    
    ascii_write_controller(data);
20000a60:	1dfb      	adds	r3, r7, #7
20000a62:	781b      	ldrb	r3, [r3, #0]
20000a64:	0018      	movs	r0, r3
20000a66:	f7ff ffab 	bl	200009c0 <ascii_write_controller>
}
20000a6a:	46c0      	nop			; (mov r8, r8)
20000a6c:	46bd      	mov	sp, r7
20000a6e:	b002      	add	sp, #8
20000a70:	bd80      	pop	{r7, pc}

20000a72 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
20000a72:	b590      	push	{r4, r7, lr}
20000a74:	b083      	sub	sp, #12
20000a76:	af00      	add	r7, sp, #0
    unsigned char status;
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x0000;
20000a78:	4b0b      	ldr	r3, [pc, #44]	; (20000aa8 <ascii_read_status+0x36>)
20000a7a:	2200      	movs	r2, #0
20000a7c:	801a      	strh	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_RS);
20000a7e:	2001      	movs	r0, #1
20000a80:	f7ff ff84 	bl	2000098c <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
20000a84:	2002      	movs	r0, #2
20000a86:	f7ff ff6d 	bl	20000964 <ascii_ctrl_bit_set>
    
    status = ascii_read_controller();
20000a8a:	1dfc      	adds	r4, r7, #7
20000a8c:	f7ff ffb0 	bl	200009f0 <ascii_read_controller>
20000a90:	0003      	movs	r3, r0
20000a92:	7023      	strb	r3, [r4, #0]
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x5555;
20000a94:	4b04      	ldr	r3, [pc, #16]	; (20000aa8 <ascii_read_status+0x36>)
20000a96:	4a05      	ldr	r2, [pc, #20]	; (20000aac <ascii_read_status+0x3a>)
20000a98:	801a      	strh	r2, [r3, #0]
    
    return status;
20000a9a:	1dfb      	adds	r3, r7, #7
20000a9c:	781b      	ldrb	r3, [r3, #0]
}
20000a9e:	0018      	movs	r0, r3
20000aa0:	46bd      	mov	sp, r7
20000aa2:	b003      	add	sp, #12
20000aa4:	bd90      	pop	{r4, r7, pc}
20000aa6:	46c0      	nop			; (mov r8, r8)
20000aa8:	40021002 	andmi	r1, r2, r2
20000aac:	00005555 	andeq	r5, r0, r5, asr r5

20000ab0 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000ab0:	b590      	push	{r4, r7, lr}
20000ab2:	b083      	sub	sp, #12
20000ab4:	af00      	add	r7, sp, #0
    unsigned char data;
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x0000;
20000ab6:	4b0a      	ldr	r3, [pc, #40]	; (20000ae0 <ascii_read_data+0x30>)
20000ab8:	2200      	movs	r2, #0
20000aba:	801a      	strh	r2, [r3, #0]
    
    ascii_ctrl_bit_set(B_RS | B_RW);
20000abc:	2003      	movs	r0, #3
20000abe:	f7ff ff51 	bl	20000964 <ascii_ctrl_bit_set>
    
    data = ascii_read_controller();
20000ac2:	1dfc      	adds	r4, r7, #7
20000ac4:	f7ff ff94 	bl	200009f0 <ascii_read_controller>
20000ac8:	0003      	movs	r3, r0
20000aca:	7023      	strb	r3, [r4, #0]
    
    * ( (unsigned short *) (portModer + 0x2)) = 0x5555;
20000acc:	4b04      	ldr	r3, [pc, #16]	; (20000ae0 <ascii_read_data+0x30>)
20000ace:	4a05      	ldr	r2, [pc, #20]	; (20000ae4 <ascii_read_data+0x34>)
20000ad0:	801a      	strh	r2, [r3, #0]
    
    return data;
20000ad2:	1dfb      	adds	r3, r7, #7
20000ad4:	781b      	ldrb	r3, [r3, #0]
}
20000ad6:	0018      	movs	r0, r3
20000ad8:	46bd      	mov	sp, r7
20000ada:	b003      	add	sp, #12
20000adc:	bd90      	pop	{r4, r7, pc}
20000ade:	46c0      	nop			; (mov r8, r8)
20000ae0:	40021002 	andmi	r1, r2, r2
20000ae4:	00005555 	andeq	r5, r0, r5, asr r5

20000ae8 <ascii_init>:

void ascii_init(void)
{
20000ae8:	b580      	push	{r7, lr}
20000aea:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_SELECT);
20000aec:	2004      	movs	r0, #4
20000aee:	f7ff ff39 	bl	20000964 <ascii_ctrl_bit_set>
    
    while( (ascii_read_status() & 0x80) == 0x80);
20000af2:	46c0      	nop			; (mov r8, r8)
20000af4:	f7ff ffbd 	bl	20000a72 <ascii_read_status>
20000af8:	0003      	movs	r3, r0
20000afa:	001a      	movs	r2, r3
20000afc:	2380      	movs	r3, #128	; 0x80
20000afe:	4013      	ands	r3, r2
20000b00:	2b80      	cmp	r3, #128	; 0x80
20000b02:	d0f7      	beq.n	20000af4 <ascii_init+0xc>
    
    delay_mikro(8);
20000b04:	2008      	movs	r0, #8
20000b06:	f7ff fb06 	bl	20000116 <delay_mikro>
    
    // Set font size to 5x8 and set 2 rows
    ascii_write_cmd(0x3C);
20000b0a:	203c      	movs	r0, #60	; 0x3c
20000b0c:	f7ff ff8a 	bl	20000a24 <ascii_write_cmd>
    delay_mikro(40);
20000b10:	2028      	movs	r0, #40	; 0x28
20000b12:	f7ff fb00 	bl	20000116 <delay_mikro>
    
    // Set display and marker on
    ascii_write_cmd(0x0E);
20000b16:	200e      	movs	r0, #14
20000b18:	f7ff ff84 	bl	20000a24 <ascii_write_cmd>
    delay_mikro(40);
20000b1c:	2028      	movs	r0, #40	; 0x28
20000b1e:	f7ff fafa 	bl	20000116 <delay_mikro>
    
    // Clear Display
    ascii_write_cmd(0x01);
20000b22:	2001      	movs	r0, #1
20000b24:	f7ff ff7e 	bl	20000a24 <ascii_write_cmd>
    delay_mili(2);
20000b28:	2002      	movs	r0, #2
20000b2a:	f7ff fb0b 	bl	20000144 <delay_mili>
    
    // Set addressing mode to increment, no buffer shift
    ascii_write_cmd(0x06);
20000b2e:	2006      	movs	r0, #6
20000b30:	f7ff ff78 	bl	20000a24 <ascii_write_cmd>
    delay_mikro(40);
20000b34:	2028      	movs	r0, #40	; 0x28
20000b36:	f7ff faee 	bl	20000116 <delay_mikro>
}
20000b3a:	46c0      	nop			; (mov r8, r8)
20000b3c:	46bd      	mov	sp, r7
20000b3e:	bd80      	pop	{r7, pc}

20000b40 <ascii_write_char>:

void ascii_write_char(char c)
{
20000b40:	b580      	push	{r7, lr}
20000b42:	b082      	sub	sp, #8
20000b44:	af00      	add	r7, sp, #0
20000b46:	0002      	movs	r2, r0
20000b48:	1dfb      	adds	r3, r7, #7
20000b4a:	701a      	strb	r2, [r3, #0]
    while( (ascii_read_status() & 0x80) == 0x80);
20000b4c:	46c0      	nop			; (mov r8, r8)
20000b4e:	f7ff ff90 	bl	20000a72 <ascii_read_status>
20000b52:	0003      	movs	r3, r0
20000b54:	001a      	movs	r2, r3
20000b56:	2380      	movs	r3, #128	; 0x80
20000b58:	4013      	ands	r3, r2
20000b5a:	2b80      	cmp	r3, #128	; 0x80
20000b5c:	d0f7      	beq.n	20000b4e <ascii_write_char+0xe>
    
    delay_mikro(8);
20000b5e:	2008      	movs	r0, #8
20000b60:	f7ff fad9 	bl	20000116 <delay_mikro>
    
    ascii_write_data(c);
20000b64:	1dfb      	adds	r3, r7, #7
20000b66:	781b      	ldrb	r3, [r3, #0]
20000b68:	0018      	movs	r0, r3
20000b6a:	f7ff ff6d 	bl	20000a48 <ascii_write_data>
    
    delay_mikro(43);
20000b6e:	202b      	movs	r0, #43	; 0x2b
20000b70:	f7ff fad1 	bl	20000116 <delay_mikro>
}
20000b74:	46c0      	nop			; (mov r8, r8)
20000b76:	46bd      	mov	sp, r7
20000b78:	b002      	add	sp, #8
20000b7a:	bd80      	pop	{r7, pc}

20000b7c <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b084      	sub	sp, #16
20000b80:	af00      	add	r7, sp, #0
20000b82:	6078      	str	r0, [r7, #4]
20000b84:	6039      	str	r1, [r7, #0]
    char address = x - 1;
20000b86:	687b      	ldr	r3, [r7, #4]
20000b88:	b2da      	uxtb	r2, r3
20000b8a:	230f      	movs	r3, #15
20000b8c:	18fb      	adds	r3, r7, r3
20000b8e:	3a01      	subs	r2, #1
20000b90:	701a      	strb	r2, [r3, #0]
    
    if (y == 2)
20000b92:	683b      	ldr	r3, [r7, #0]
20000b94:	2b02      	cmp	r3, #2
20000b96:	d105      	bne.n	20000ba4 <ascii_gotoxy+0x28>
    {
        address += 0x40;
20000b98:	220f      	movs	r2, #15
20000b9a:	18bb      	adds	r3, r7, r2
20000b9c:	18ba      	adds	r2, r7, r2
20000b9e:	7812      	ldrb	r2, [r2, #0]
20000ba0:	3240      	adds	r2, #64	; 0x40
20000ba2:	701a      	strb	r2, [r3, #0]
    }
    
    ascii_write_cmd( 0x80 | address);
20000ba4:	230f      	movs	r3, #15
20000ba6:	18fb      	adds	r3, r7, r3
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2280      	movs	r2, #128	; 0x80
20000bac:	4252      	negs	r2, r2
20000bae:	4313      	orrs	r3, r2
20000bb0:	b2db      	uxtb	r3, r3
20000bb2:	0018      	movs	r0, r3
20000bb4:	f7ff ff36 	bl	20000a24 <ascii_write_cmd>
}
20000bb8:	46c0      	nop			; (mov r8, r8)
20000bba:	46bd      	mov	sp, r7
20000bbc:	b004      	add	sp, #16
20000bbe:	bd80      	pop	{r7, pc}

20000bc0 <set_scoreboard>:

void set_scoreboard(void)
{
20000bc0:	b580      	push	{r7, lr}
20000bc2:	b082      	sub	sp, #8
20000bc4:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_SELECT);
20000bc6:	2004      	movs	r0, #4
20000bc8:	f7ff fecc 	bl	20000964 <ascii_ctrl_bit_set>
    
    ascii_clear_display();
20000bcc:	f000 f840 	bl	20000c50 <ascii_clear_display>
    
    char *str = PLAYER_1_STR;
20000bd0:	4b1b      	ldr	r3, [pc, #108]	; (20000c40 <set_scoreboard+0x80>)
20000bd2:	607b      	str	r3, [r7, #4]
    
    while(*str)
20000bd4:	e006      	b.n	20000be4 <set_scoreboard+0x24>
    {
        ascii_write_char(*str++);
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	1c5a      	adds	r2, r3, #1
20000bda:	607a      	str	r2, [r7, #4]
20000bdc:	781b      	ldrb	r3, [r3, #0]
20000bde:	0018      	movs	r0, r3
20000be0:	f7ff ffae 	bl	20000b40 <ascii_write_char>
    while(*str)
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	781b      	ldrb	r3, [r3, #0]
20000be8:	2b00      	cmp	r3, #0
20000bea:	d1f4      	bne.n	20000bd6 <set_scoreboard+0x16>
    }
    
    ascii_write_char(left_point + 48);
20000bec:	4b15      	ldr	r3, [pc, #84]	; (20000c44 <set_scoreboard+0x84>)
20000bee:	781b      	ldrb	r3, [r3, #0]
20000bf0:	b2db      	uxtb	r3, r3
20000bf2:	3330      	adds	r3, #48	; 0x30
20000bf4:	b2db      	uxtb	r3, r3
20000bf6:	0018      	movs	r0, r3
20000bf8:	f7ff ffa2 	bl	20000b40 <ascii_write_char>
    
    ascii_gotoxy(1,2);
20000bfc:	2102      	movs	r1, #2
20000bfe:	2001      	movs	r0, #1
20000c00:	f7ff ffbc 	bl	20000b7c <ascii_gotoxy>
    
    str = PLAYER_2_STR;
20000c04:	4b10      	ldr	r3, [pc, #64]	; (20000c48 <set_scoreboard+0x88>)
20000c06:	607b      	str	r3, [r7, #4]
    
    while(*str)
20000c08:	e006      	b.n	20000c18 <set_scoreboard+0x58>
    {
        ascii_write_char(*str++);
20000c0a:	687b      	ldr	r3, [r7, #4]
20000c0c:	1c5a      	adds	r2, r3, #1
20000c0e:	607a      	str	r2, [r7, #4]
20000c10:	781b      	ldrb	r3, [r3, #0]
20000c12:	0018      	movs	r0, r3
20000c14:	f7ff ff94 	bl	20000b40 <ascii_write_char>
    while(*str)
20000c18:	687b      	ldr	r3, [r7, #4]
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	2b00      	cmp	r3, #0
20000c1e:	d1f4      	bne.n	20000c0a <set_scoreboard+0x4a>
    }
    
    ascii_write_char(right_point + 48);
20000c20:	4b0a      	ldr	r3, [pc, #40]	; (20000c4c <set_scoreboard+0x8c>)
20000c22:	781b      	ldrb	r3, [r3, #0]
20000c24:	b2db      	uxtb	r3, r3
20000c26:	3330      	adds	r3, #48	; 0x30
20000c28:	b2db      	uxtb	r3, r3
20000c2a:	0018      	movs	r0, r3
20000c2c:	f7ff ff88 	bl	20000b40 <ascii_write_char>
    
    ascii_ctrl_bit_clear(B_SELECT);
20000c30:	2004      	movs	r0, #4
20000c32:	f7ff feab 	bl	2000098c <ascii_ctrl_bit_clear>
}
20000c36:	46c0      	nop			; (mov r8, r8)
20000c38:	46bd      	mov	sp, r7
20000c3a:	b002      	add	sp, #8
20000c3c:	bd80      	pop	{r7, pc}
20000c3e:	46c0      	nop			; (mov r8, r8)
20000c40:	20001070 	andcs	r1, r0, r0, ror r0
20000c44:	20000e0c 	andcs	r0, r0, ip, lsl #28
20000c48:	2000107c 	andcs	r1, r0, ip, ror r0
20000c4c:	20000e0d 	andcs	r0, r0, sp, lsl #28

20000c50 <ascii_clear_display>:

void ascii_clear_display(void)
{
20000c50:	b580      	push	{r7, lr}
20000c52:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_clear(B_RS);
20000c54:	2001      	movs	r0, #1
20000c56:	f7ff fe99 	bl	2000098c <ascii_ctrl_bit_clear>
    
    ascii_ctrl_bit_clear(B_RW);
20000c5a:	2002      	movs	r0, #2
20000c5c:	f7ff fe96 	bl	2000098c <ascii_ctrl_bit_clear>
    
    ascii_write_cmd(B_CLEAR);
20000c60:	2001      	movs	r0, #1
20000c62:	f7ff fedf 	bl	20000a24 <ascii_write_cmd>
    delay_mili(2);
20000c66:	2002      	movs	r0, #2
20000c68:	f7ff fa6c 	bl	20000144 <delay_mili>
}
20000c6c:	46c0      	nop			; (mov r8, r8)
20000c6e:	46bd      	mov	sp, r7
20000c70:	bd80      	pop	{r7, pc}

20000c72 <app_init>:

void app_init(void)
{   
20000c72:	b580      	push	{r7, lr}
20000c74:	af00      	add	r7, sp, #0
    left_point = 0;
20000c76:	4b0d      	ldr	r3, [pc, #52]	; (20000cac <app_init+0x3a>)
20000c78:	2200      	movs	r2, #0
20000c7a:	701a      	strb	r2, [r3, #0]
    right_point = 0;
20000c7c:	4b0c      	ldr	r3, [pc, #48]	; (20000cb0 <app_init+0x3e>)
20000c7e:	2200      	movs	r2, #0
20000c80:	701a      	strb	r2, [r3, #0]
   #ifdef USBDM
    *((unsigned long *) 0x40023830) = 0x18;
20000c82:	4b0c      	ldr	r3, [pc, #48]	; (20000cb4 <app_init+0x42>)
20000c84:	2218      	movs	r2, #24
20000c86:	601a      	str	r2, [r3, #0]
    __asm volatile ("LDR R0,=0x08000209\n BLX R0 \n");
20000c88:	485f      	ldr	r0, [pc, #380]	; (20000e08 <main+0x138>)
20000c8a:	4780      	blx	r0
    #endif
    *((unsigned long *) portModer) = 0x55555555;
20000c8c:	4b0a      	ldr	r3, [pc, #40]	; (20000cb8 <app_init+0x46>)
20000c8e:	4a0b      	ldr	r2, [pc, #44]	; (20000cbc <app_init+0x4a>)
20000c90:	601a      	str	r2, [r3, #0]
    * ( (unsigned int *) 0x40020C00) = 0x55005555;      // Configure port D bit 15-12, 7-0 as output
20000c92:	4b0b      	ldr	r3, [pc, #44]	; (20000cc0 <app_init+0x4e>)
20000c94:	4a0b      	ldr	r2, [pc, #44]	; (20000cc4 <app_init+0x52>)
20000c96:	601a      	str	r2, [r3, #0]
    * ( (unsigned char *) 0x40020C05) = 0;              // Configure port D GPIO_OTYPER
20000c98:	4b0b      	ldr	r3, [pc, #44]	; (20000cc8 <app_init+0x56>)
20000c9a:	2200      	movs	r2, #0
20000c9c:	701a      	strb	r2, [r3, #0]
    * ( (unsigned short *) 0x40020C0E) = 0xAA;          // Configure port D GPIO_PUPDR
20000c9e:	4b0b      	ldr	r3, [pc, #44]	; (20000ccc <app_init+0x5a>)
20000ca0:	22aa      	movs	r2, #170	; 0xaa
20000ca2:	801a      	strh	r2, [r3, #0]
}
20000ca4:	46c0      	nop			; (mov r8, r8)
20000ca6:	46bd      	mov	sp, r7
20000ca8:	bd80      	pop	{r7, pc}
20000caa:	46c0      	nop			; (mov r8, r8)
20000cac:	20000e0c 	andcs	r0, r0, ip, lsl #28
20000cb0:	20000e0d 	andcs	r0, r0, sp, lsl #28
20000cb4:	40023830 	andmi	r3, r2, r0, lsr r8
20000cb8:	40021000 	andmi	r1, r2, r0
20000cbc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000cc0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000cc4:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000cc8:	40020c05 	andmi	r0, r2, r5, lsl #24
20000ccc:	40020c0e 	andmi	r0, r2, lr, lsl #24

20000cd0 <main>:

void main(void)
{
20000cd0:	b590      	push	{r4, r7, lr}
20000cd2:	b085      	sub	sp, #20
20000cd4:	af00      	add	r7, sp, #0
    POBJECT p = &ball;
20000cd6:	4b49      	ldr	r3, [pc, #292]	; (20000dfc <main+0x12c>)
20000cd8:	60fb      	str	r3, [r7, #12]
    POBJECT lp = &left_paddle;
20000cda:	4b49      	ldr	r3, [pc, #292]	; (20000e00 <main+0x130>)
20000cdc:	60bb      	str	r3, [r7, #8]
    POBJECT rp = &right_paddle;
20000cde:	4b49      	ldr	r3, [pc, #292]	; (20000e04 <main+0x134>)
20000ce0:	607b      	str	r3, [r7, #4]
    
    app_init();
20000ce2:	f7ff ffc6 	bl	20000c72 <app_init>
    
    ascii_init();
20000ce6:	f7ff feff 	bl	20000ae8 <ascii_init>
    ascii_gotoxy(1,1);
20000cea:	2101      	movs	r1, #1
20000cec:	2001      	movs	r0, #1
20000cee:	f7ff ff45 	bl	20000b7c <ascii_gotoxy>
    
    graphic_initialize();
20000cf2:	f7ff fbb3 	bl	2000045c <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
20000cf6:	f7ff fbe2 	bl	200004be <graphic_clear_screen>
    
    unsigned char c1, c2;
    
    while(1)
    {
        set_scoreboard();
20000cfa:	f7ff ff61 	bl	20000bc0 <set_scoreboard>
        lp->move(lp);
20000cfe:	68bb      	ldr	r3, [r7, #8]
20000d00:	69db      	ldr	r3, [r3, #28]
20000d02:	68ba      	ldr	r2, [r7, #8]
20000d04:	0010      	movs	r0, r2
20000d06:	4798      	blx	r3
        rp->move(rp);
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	69db      	ldr	r3, [r3, #28]
20000d0c:	687a      	ldr	r2, [r7, #4]
20000d0e:	0010      	movs	r0, r2
20000d10:	4798      	blx	r3
        //delay_mili(40);
        c1 = keyb(1);
20000d12:	1cfc      	adds	r4, r7, #3
20000d14:	2001      	movs	r0, #1
20000d16:	f7ff f97b 	bl	20000010 <keyb>
20000d1a:	0003      	movs	r3, r0
20000d1c:	7023      	strb	r3, [r4, #0]
        c2 = keyb(4);
20000d1e:	1cbc      	adds	r4, r7, #2
20000d20:	2004      	movs	r0, #4
20000d22:	f7ff f975 	bl	20000010 <keyb>
20000d26:	0003      	movs	r3, r0
20000d28:	7023      	strb	r3, [r4, #0]
        switch (c1)
20000d2a:	1cfb      	adds	r3, r7, #3
20000d2c:	781b      	ldrb	r3, [r3, #0]
20000d2e:	2b01      	cmp	r3, #1
20000d30:	d002      	beq.n	20000d38 <main+0x68>
20000d32:	2b0e      	cmp	r3, #14
20000d34:	d013      	beq.n	20000d5e <main+0x8e>
20000d36:	e028      	b.n	20000d8a <main+0xba>
        {
            case 1: 
            if (lp->posy <= 0)
20000d38:	68bb      	ldr	r3, [r7, #8]
20000d3a:	691b      	ldr	r3, [r3, #16]
20000d3c:	2b00      	cmp	r3, #0
20000d3e:	dc06      	bgt.n	20000d4e <main+0x7e>
            {
                lp->set_speed(lp, 0, 0);
20000d40:	68bb      	ldr	r3, [r7, #8]
20000d42:	6a1b      	ldr	r3, [r3, #32]
20000d44:	68b8      	ldr	r0, [r7, #8]
20000d46:	2200      	movs	r2, #0
20000d48:	2100      	movs	r1, #0
20000d4a:	4798      	blx	r3
            }
            else
            {
                lp->set_speed(lp, 0, -4);
            }
            break;
20000d4c:	e01d      	b.n	20000d8a <main+0xba>
                lp->set_speed(lp, 0, -4);
20000d4e:	68bb      	ldr	r3, [r7, #8]
20000d50:	6a1b      	ldr	r3, [r3, #32]
20000d52:	2204      	movs	r2, #4
20000d54:	4252      	negs	r2, r2
20000d56:	68b8      	ldr	r0, [r7, #8]
20000d58:	2100      	movs	r1, #0
20000d5a:	4798      	blx	r3
            break;
20000d5c:	e015      	b.n	20000d8a <main+0xba>
            case 14:
            if ((lp->posy + lp->geo->sizey) >= 64)
20000d5e:	68bb      	ldr	r3, [r7, #8]
20000d60:	691a      	ldr	r2, [r3, #16]
20000d62:	68bb      	ldr	r3, [r7, #8]
20000d64:	681b      	ldr	r3, [r3, #0]
20000d66:	689b      	ldr	r3, [r3, #8]
20000d68:	18d3      	adds	r3, r2, r3
20000d6a:	2b3f      	cmp	r3, #63	; 0x3f
20000d6c:	dd06      	ble.n	20000d7c <main+0xac>
            {
                lp->set_speed(lp, 0, 0);
20000d6e:	68bb      	ldr	r3, [r7, #8]
20000d70:	6a1b      	ldr	r3, [r3, #32]
20000d72:	68b8      	ldr	r0, [r7, #8]
20000d74:	2200      	movs	r2, #0
20000d76:	2100      	movs	r1, #0
20000d78:	4798      	blx	r3
            }
            else
            {
                lp->set_speed(lp, 0, 4);
            }
            break;
20000d7a:	e005      	b.n	20000d88 <main+0xb8>
                lp->set_speed(lp, 0, 4);
20000d7c:	68bb      	ldr	r3, [r7, #8]
20000d7e:	6a1b      	ldr	r3, [r3, #32]
20000d80:	68b8      	ldr	r0, [r7, #8]
20000d82:	2204      	movs	r2, #4
20000d84:	2100      	movs	r1, #0
20000d86:	4798      	blx	r3
            break;
20000d88:	46c0      	nop			; (mov r8, r8)
        }
         switch (c2)
20000d8a:	1cbb      	adds	r3, r7, #2
20000d8c:	781b      	ldrb	r3, [r3, #0]
20000d8e:	2b0a      	cmp	r3, #10
20000d90:	d002      	beq.n	20000d98 <main+0xc8>
20000d92:	2b0d      	cmp	r3, #13
20000d94:	d013      	beq.n	20000dbe <main+0xee>
20000d96:	e028      	b.n	20000dea <main+0x11a>
        {
            case 0xA:
            if (rp->posy <= 0)
20000d98:	687b      	ldr	r3, [r7, #4]
20000d9a:	691b      	ldr	r3, [r3, #16]
20000d9c:	2b00      	cmp	r3, #0
20000d9e:	dc06      	bgt.n	20000dae <main+0xde>
            {
                rp->set_speed(rp, 0, 0);
20000da0:	687b      	ldr	r3, [r7, #4]
20000da2:	6a1b      	ldr	r3, [r3, #32]
20000da4:	6878      	ldr	r0, [r7, #4]
20000da6:	2200      	movs	r2, #0
20000da8:	2100      	movs	r1, #0
20000daa:	4798      	blx	r3
            }
            else
            {
                rp->set_speed(rp, 0, -4);
            }
            break;
20000dac:	e01d      	b.n	20000dea <main+0x11a>
                rp->set_speed(rp, 0, -4);
20000dae:	687b      	ldr	r3, [r7, #4]
20000db0:	6a1b      	ldr	r3, [r3, #32]
20000db2:	2204      	movs	r2, #4
20000db4:	4252      	negs	r2, r2
20000db6:	6878      	ldr	r0, [r7, #4]
20000db8:	2100      	movs	r1, #0
20000dba:	4798      	blx	r3
            break;
20000dbc:	e015      	b.n	20000dea <main+0x11a>
            case 0xD: 
            if ((rp->posy + rp->geo->sizey) >= 64)
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	691a      	ldr	r2, [r3, #16]
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	681b      	ldr	r3, [r3, #0]
20000dc6:	689b      	ldr	r3, [r3, #8]
20000dc8:	18d3      	adds	r3, r2, r3
20000dca:	2b3f      	cmp	r3, #63	; 0x3f
20000dcc:	dd06      	ble.n	20000ddc <main+0x10c>
            {
                rp->set_speed(rp, 0, 0);
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	6a1b      	ldr	r3, [r3, #32]
20000dd2:	6878      	ldr	r0, [r7, #4]
20000dd4:	2200      	movs	r2, #0
20000dd6:	2100      	movs	r1, #0
20000dd8:	4798      	blx	r3
            }
            else
            {
                rp->set_speed(rp, 0, 4);
            }
            break;
20000dda:	e005      	b.n	20000de8 <main+0x118>
                rp->set_speed(rp, 0, 4);
20000ddc:	687b      	ldr	r3, [r7, #4]
20000dde:	6a1b      	ldr	r3, [r3, #32]
20000de0:	6878      	ldr	r0, [r7, #4]
20000de2:	2204      	movs	r2, #4
20000de4:	2100      	movs	r1, #0
20000de6:	4798      	blx	r3
            break;
20000de8:	46c0      	nop			; (mov r8, r8)
        }
         p->move(p);
20000dea:	68fb      	ldr	r3, [r7, #12]
20000dec:	69db      	ldr	r3, [r3, #28]
20000dee:	68fa      	ldr	r2, [r7, #12]
20000df0:	0010      	movs	r0, r2
20000df2:	4798      	blx	r3
#ifndef SIMULATOR
        delay_mili(30); // 25 bilder per sekund
20000df4:	201e      	movs	r0, #30
20000df6:	f7ff f9a5 	bl	20000144 <delay_mili>
        set_scoreboard();
20000dfa:	e77e      	b.n	20000cfa <main+0x2a>
20000dfc:	20000fc4 	andcs	r0, r0, r4, asr #31
20000e00:	20000fe8 	andcs	r0, r0, r8, ror #31
20000e04:	2000100c 	andcs	r1, r0, ip
20000e08:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000e0c <left_point>:
	...

20000e0d <right_point>:
20000e0d:	 	strne	r0, [r0, #-0]

20000e10 <keypad_out>:
20000e10:	40020c15 	andmi	r0, r2, r5, lsl ip

20000e14 <keypad_in>:
20000e14:	40020c11 	andmi	r0, r2, r1, lsl ip

20000e18 <display_out>:
20000e18:	40020c14 	andmi	r0, r2, r4, lsl ip

20000e1c <ball_geometry>:
20000e1c:	0000000c 	andeq	r0, r0, ip
20000e20:	00000004 	andeq	r0, r0, r4
20000e24:	00000004 	andeq	r0, r0, r4
20000e28:	02000100 	andeq	r0, r0, #0, 2
20000e2c:	01010001 	tsteq	r1, r1
20000e30:	03010201 	movweq	r0, #4609	; 0x1201
20000e34:	01020002 	tsteq	r2, r2
20000e38:	03020202 	movweq	r0, #8706	; 0x2202
20000e3c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000ef0 <paddle_geometry>:
20000ef0:	00000028 	andeq	r0, r0, r8, lsr #32
20000ef4:	00000002 	andeq	r0, r0, r2
20000ef8:	00000014 	andeq	r0, r0, r4, lsl r0
20000efc:	00010000 	andeq	r0, r1, r0
20000f00:	01010100 	mrseq	r0, (UNDEF: 17)
20000f04:	02010200 	andeq	r0, r1, #0, 4
20000f08:	03010300 	movweq	r0, #4864	; 0x1300
20000f0c:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20000f10:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
20000f14:	06010600 	streq	r0, [r1], -r0, lsl #12
20000f18:	07010700 	streq	r0, [r1, -r0, lsl #14]
20000f1c:	08010800 	stmdaeq	r1, {fp}
20000f20:	09010900 	stmdbeq	r1, {r8, fp}
20000f24:	0a010a00 	beq	2004372c <KeyValues+0x426ec>
20000f28:	0b010b00 	bleq	20043b30 <KeyValues+0x42af0>
20000f2c:	0c010c00 	stceq	12, cr0, [r1], {-0}
20000f30:	0d010d00 	stceq	13, cr0, [r1, #-0]
20000f34:	0e010e00 	cdpeq	14, 0, cr0, cr1, cr0, {0}
20000f38:	0f010f00 	svceq	0x00010f00
20000f3c:	10011000 	andne	r1, r1, r0
20000f40:	11011100 	mrsne	r1, (UNDEF: 17)
20000f44:	12011200 	andne	r1, r1, #0, 4
20000f48:	13011300 	movwne	r1, #4864	; 0x1300
	...

20000fc4 <ball>:
20000fc4:	20000e1c 	andcs	r0, r0, ip, lsl lr
20000fc8:	00000004 	andeq	r0, r0, r4
20000fcc:	00000004 	andeq	r0, r0, r4
20000fd0:	00000040 	andeq	r0, r0, r0, asr #32
20000fd4:	00000020 	andeq	r0, r0, r0, lsr #32
20000fd8:	200006b9 			; <UNDEFINED> instruction: 0x200006b9
20000fdc:	20000717 	andcs	r0, r0, r7, lsl r7
20000fe0:	20000775 	andcs	r0, r0, r5, ror r7
20000fe4:	20000945 	andcs	r0, r0, r5, asr #18

20000fe8 <left_paddle>:
20000fe8:	20000ef0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000ff4:	00000002 	andeq	r0, r0, r2
20000ff8:	0000001b 	andeq	r0, r0, fp, lsl r0
20000ffc:	200006b9 			; <UNDEFINED> instruction: 0x200006b9
20001000:	20000717 	andcs	r0, r0, r7, lsl r7
20001004:	200008d9 	ldrdcs	r0, [r0], -r9
20001008:	20000945 	andcs	r0, r0, r5, asr #18

2000100c <right_paddle>:
2000100c:	20000ef0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20001018:	0000007e 	andeq	r0, r0, lr, ror r0
2000101c:	0000001b 	andeq	r0, r0, fp, lsl r0
20001020:	200006b9 			; <UNDEFINED> instruction: 0x200006b9
20001024:	20000717 	andcs	r0, r0, r7, lsl r7
20001028:	200008d9 	ldrdcs	r0, [r0], -r9
2000102c:	20000945 	andcs	r0, r0, r5, asr #18

20001030 <SegCodes>:
20001030:	4f5b063f 	svcmi	0x005b063f
20001034:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001038:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
2000103c:	71795e39 	cmnvc	r9, r9, lsr lr

20001040 <KeyValues>:
20001040:	0a030201 	beq	200c184c <KeyValues+0xc080c>
20001044:	0b060504 	bleq	2018245c <KeyValues+0x18141c>
20001048:	0c090807 	stceq	8, cr0, [r9], {7}
2000104c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000101c <right_paddle+0x10>
20001050:	2000057a 	andcs	r0, r0, sl, ror r5
20001054:	20000584 	andcs	r0, r0, r4, lsl #11
20001058:	2000058e 	andcs	r0, r0, lr, lsl #11
2000105c:	20000598 	mulcs	r0, r8, r5
20001060:	200005a2 	andcs	r0, r0, r2, lsr #11
20001064:	200005ac 	andcs	r0, r0, ip, lsr #11
20001068:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
2000106c:	200005c0 	andcs	r0, r0, r0, asr #11
20001070:	59414c50 	stmdbpl	r1, {r4, r6, sl, fp, lr}^
20001074:	31205245 			; <UNDEFINED> instruction: 0x31205245
20001078:	0000203a 	andeq	r2, r0, sl, lsr r0
2000107c:	59414c50 	stmdbpl	r1, {r4, r6, sl, fp, lr}^
20001080:	32205245 	eorcc	r5, r0, #1342177284	; 0x50000004
20001084:	0000203a 	andeq	r2, r0, sl, lsr r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000009e1 	andeq	r0, r0, r1, ror #19
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000024b 	andeq	r0, r0, fp, asr #4
  10:	0001320c 	andeq	r3, r1, ip, lsl #4
  14:	00007700 	andeq	r7, r0, r0, lsl #14
	...
  24:	00480200 	subeq	r0, r8, r0, lsl #4
  28:	00350000 	eorseq	r0, r5, r0
  2c:	3a030000 	bcc	c0034 <startup-0x1ff3ffcc>
  30:	0f000000 	svceq	0x00000000
  34:	00250400 	eoreq	r0, r5, r0, lsl #8
  38:	04050000 	streq	r0, [r5], #-0
  3c:	00030507 	andeq	r0, r3, r7, lsl #10
  40:	08010500 	stmdaeq	r1, {r8, sl}
  44:	00000226 	andeq	r0, r0, r6, lsr #4
  48:	00004104 	andeq	r4, r0, r4, lsl #2
  4c:	04890600 	streq	r0, [r9], #1536	; 0x600
  50:	05010000 	streq	r0, [r1, #-0]
  54:	00000035 	andeq	r0, r0, r5, lsr r0
  58:	10300305 	eorsne	r0, r0, r5, lsl #6
  5c:	48022000 	stmdami	r2, {sp}
  60:	74000000 	strvc	r0, [r0], #-0
  64:	03000000 	movweq	r0, #0
  68:	0000003a 	andeq	r0, r0, sl, lsr r0
  6c:	003a0303 	eorseq	r0, sl, r3, lsl #6
  70:	00030000 	andeq	r0, r3, r0
  74:	00005e04 	andeq	r5, r0, r4, lsl #28
  78:	04b00600 	ldrteq	r0, [r0], #1536	; 0x600
  7c:	06010000 	streq	r0, [r1], -r0
  80:	00000074 	andeq	r0, r0, r4, ror r0
  84:	10400305 	subne	r0, r0, r5, lsl #6
  88:	2a062000 	bcs	188090 <startup-0x1fe77f70>
  8c:	01000003 	tsteq	r0, r3
  90:	00009b08 	andeq	r9, r0, r8, lsl #22
  94:	10030500 	andne	r0, r3, r0, lsl #10
  98:	0720000e 	streq	r0, [r0, -lr]!
  9c:	00004104 	andeq	r4, r0, r4, lsl #2
  a0:	01f60600 	mvnseq	r0, r0, lsl #12
  a4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
  a8:	0000009b 	muleq	r0, fp, r0
  ac:	0e140305 	cdpeq	3, 1, cr0, cr4, cr5, {0}
  b0:	6b062000 	blvs	1880b8 <startup-0x1fe77f48>
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00009b0a 	andeq	r9, r0, sl, lsl #22
  bc:	18030500 	stmdane	r3, {r8, sl}
  c0:	0820000e 	stmdaeq	r0!, {r1, r2, r3}
  c4:	0000010a 	andeq	r0, r0, sl, lsl #2
  c8:	00413e01 	subeq	r3, r1, r1, lsl #28
  cc:	e3090000 	movw	r0, #36864	; 0x9000
  d0:	02000002 	andeq	r0, r0, #2
  d4:	00ef4001 	rsceq	r4, pc, r1
  d8:	780a0000 	stmdavc	sl, {}	; <UNPREDICTABLE>
  dc:	c3420100 	movtgt	r0, #8448	; 0x2100
  e0:	00000000 	andeq	r0, r0, r0
  e4:	0100790a 	tsteq	r0, sl, lsl #18
  e8:	0000c343 	andeq	ip, r0, r3, asr #6
  ec:	08000100 	stmdaeq	r0, {r8}
  f0:	0000012c 	andeq	r0, r0, ip, lsr #2
  f4:	00ce4401 	sbceq	r4, lr, r1, lsl #8
  f8:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
  fc:	d4000000 	strle	r0, [r0], #-0
 100:	01364601 	teqeq	r6, r1, lsl #12
 104:	1c0b0000 	stcne	0, cr0, [fp], {-0}
 108:	01000002 	tsteq	r0, r2
 10c:	00013648 	andeq	r3, r1, r8, asr #12
 110:	de0b0000 	cdple	0, 0, cr0, cr11, cr0, {0}
 114:	01000001 	tsteq	r0, r1
 118:	00013649 	andeq	r3, r1, r9, asr #12
 11c:	e40b0400 	str	r0, [fp], #-1024	; 0xfffffc00
 120:	01000001 	tsteq	r0, r1
 124:	0001364a 	andeq	r3, r1, sl, asr #12
 128:	700a0800 	andvc	r0, sl, r0, lsl #16
 12c:	4b010078 	blmi	40314 <startup-0x1ffbfcec>
 130:	0000013d 	andeq	r0, r0, sp, lsr r1
 134:	040c000c 	streq	r0, [ip], #-12
 138:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 13c:	00ef0200 	rsceq	r0, pc, r0, lsl #4
 140:	014d0000 	mrseq	r0, (UNDEF: 77)
 144:	3a030000 	bcc	c014c <startup-0x1ff3feb4>
 148:	63000000 	movwvs	r0, #0
 14c:	00e60800 	rsceq	r0, r6, r0, lsl #16
 150:	4c010000 	stcmi	0, cr0, [r1], {-0}
 154:	000000fa 	strdeq	r0, [r0], -sl
 158:	0000e508 	andeq	lr, r0, r8, lsl #10
 15c:	634c0100 	movtvs	r0, #49408	; 0xc100
 160:	07000001 	streq	r0, [r0, -r1]
 164:	0000fa04 	andeq	pc, r0, r4, lsl #20
 168:	038b0900 	orreq	r0, fp, #0, 18
 16c:	01240000 			; <UNDEFINED> instruction: 0x01240000
 170:	0001e24e 	andeq	lr, r1, lr, asr #4
 174:	65670a00 	strbvs	r0, [r7, #-2560]!	; 0xfffff600
 178:	5001006f 	andpl	r0, r1, pc, rrx
 17c:	00000158 	andeq	r0, r0, r8, asr r1
 180:	01a60b00 			; <UNDEFINED> instruction: 0x01a60b00
 184:	51010000 	mrspl	r0, (UNDEF: 1)
 188:	00000136 	andeq	r0, r0, r6, lsr r1
 18c:	01ab0b04 			; <UNDEFINED> instruction: 0x01ab0b04
 190:	51010000 	mrspl	r0, (UNDEF: 1)
 194:	00000136 	andeq	r0, r0, r6, lsr r1
 198:	00190b08 	andseq	r0, r9, r8, lsl #22
 19c:	52010000 	andpl	r0, r1, #0
 1a0:	00000136 	andeq	r0, r0, r6, lsr r1
 1a4:	018b0b0c 	orreq	r0, fp, ip, lsl #22
 1a8:	52010000 	andpl	r0, r1, #0
 1ac:	00000136 	andeq	r0, r0, r6, lsr r1
 1b0:	03e20b10 	mvneq	r0, #16, 22	; 0x4000
 1b4:	53010000 	movwpl	r0, #4096	; 0x1000
 1b8:	000001f8 	strdeq	r0, [r0], -r8
 1bc:	02450b14 	subeq	r0, r5, #20, 22	; 0x5000
 1c0:	54010000 	strpl	r0, [r1], #-0
 1c4:	00000214 	andeq	r0, r0, r4, lsl r2
 1c8:	04ba0b18 	ldrteq	r0, [sl], #2840	; 0xb18
 1cc:	55010000 	strpl	r0, [r1, #-0]
 1d0:	00000230 	andeq	r0, r0, r0, lsr r2
 1d4:	03e70b1c 	mvneq	r0, #28, 22	; 0x7000
 1d8:	56010000 	strpl	r0, [r1], -r0
 1dc:	00000256 	andeq	r0, r0, r6, asr r2
 1e0:	ed0d0020 	stc	0, cr0, [sp, #-128]	; 0xffffff80
 1e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1e8:	000001ed 	andeq	r0, r0, sp, ror #3
 1ec:	f3040700 	vabd.u8	d0, d4, d0
 1f0:	0f000001 	svceq	0x00000001
 1f4:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
 1f8:	01e20407 	mvneq	r0, r7, lsl #8
 1fc:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
 200:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 204:	00000209 	andeq	r0, r0, r9, lsl #4
 208:	0f040700 	svceq	0x00040700
 20c:	0f000002 	svceq	0x00000002
 210:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
 214:	01fe0407 	mvnseq	r0, r7, lsl #8
 218:	250d0000 	strcs	r0, [sp, #-0]
 21c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 220:	00000225 	andeq	r0, r0, r5, lsr #4
 224:	2b040700 	blcs	101e2c <startup-0x1fefe1d4>
 228:	0f000002 	svceq	0x00000002
 22c:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
 230:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
 234:	4b0d0000 	blmi	34023c <startup-0x1fcbfdc4>
 238:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 23c:	0000024b 	andeq	r0, r0, fp, asr #4
 240:	0001360e 	andeq	r3, r1, lr, lsl #12
 244:	01360e00 	teqeq	r6, r0, lsl #28
 248:	07000000 	streq	r0, [r0, -r0]
 24c:	00025104 	andeq	r5, r2, r4, lsl #2
 250:	04bf0f00 	ldrteq	r0, [pc], #3840	; 258 <startup-0x1ffffda8>
 254:	04070000 	streq	r0, [r7], #-0
 258:	00000236 	andeq	r0, r0, r6, lsr r2
 25c:	00049b08 	andeq	r9, r4, r8, lsl #22
 260:	69570100 	ldmdbvs	r7, {r8}^
 264:	08000001 	stmdaeq	r0, {r0}
 268:	0000049a 	muleq	r0, sl, r4
 26c:	02725701 	rsbseq	r5, r2, #262144	; 0x40000
 270:	04070000 	streq	r0, [r7], #-0
 274:	00000169 	andeq	r0, r0, r9, ror #2
 278:	00041606 	andeq	r1, r4, r6, lsl #12
 27c:	4d5f0100 	ldfmie	f0, [pc, #-0]	; 284 <startup-0x1ffffd7c>
 280:	05000001 	streq	r0, [r0, #-1]
 284:	000e1c03 	andeq	r1, lr, r3, lsl #24
 288:	00d50620 	sbcseq	r0, r5, r0, lsr #12
 28c:	6a010000 	bvs	40294 <startup-0x1ffbfd6c>
 290:	0000014d 	andeq	r0, r0, sp, asr #2
 294:	0ef00305 	cdpeq	3, 15, cr0, cr0, cr5, {0}
 298:	49102000 	ldmdbmi	r0, {sp}
 29c:	01000000 	mrseq	r0, (UNDEF: 0)
 2a0:	00025c86 	andeq	r5, r2, r6, lsl #25
 2a4:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
 2a8:	1020000f 	eorne	r0, r0, pc
 2ac:	000000c9 	andeq	r0, r0, r9, asr #1
 2b0:	025c9101 	subseq	r9, ip, #1073741824	; 0x40000000
 2b4:	03050000 	movweq	r0, #20480	; 0x5000
 2b8:	20000fe8 	andcs	r0, r0, r8, ror #31
 2bc:	00046c10 	andeq	r6, r4, r0, lsl ip
 2c0:	5c9c0100 	ldfpls	f0, [ip], {0}
 2c4:	05000002 	streq	r0, [r0, #-2]
 2c8:	00100c03 	andseq	r0, r0, r3, lsl #24
 2cc:	01801020 	orreq	r1, r0, r0, lsr #32
 2d0:	a7010000 	strge	r0, [r1, -r0]
 2d4:	000002e5 	andeq	r0, r0, r5, ror #5
 2d8:	0e0c0305 	cdpeq	3, 0, cr0, cr12, cr5, {0}
 2dc:	01052000 	mrseq	r2, (UNDEF: 5)
 2e0:	00022f08 	andeq	r2, r2, r8, lsl #30
 2e4:	02de1100 	sbcseq	r1, lr, #0, 2
 2e8:	35100000 	ldrcc	r0, [r0, #-0]
 2ec:	01000003 	tsteq	r0, r3
 2f0:	0002e5a8 	andeq	lr, r2, r8, lsr #11
 2f4:	0d030500 	cfstr32eq	mvfx0, [r3, #-0]
 2f8:	1220000e 	eorne	r0, r0, #14
 2fc:	000000c4 	andeq	r0, r0, r4, asr #1
 300:	d0033001 	andle	r3, r3, r1
 304:	3820000c 	stmdacc	r0!, {r2, r3}
 308:	01000001 	tsteq	r0, r1
 30c:	0003579c 	muleq	r3, ip, r7
 310:	00701300 	rsbseq	r1, r0, r0, lsl #6
 314:	67033201 	strvs	r3, [r3, -r1, lsl #4]
 318:	02000002 	andeq	r0, r0, #2
 31c:	6c136c91 	ldcvs	12, cr6, [r3], {145}	; 0x91
 320:	33010070 	movwcc	r0, #4208	; 0x1070
 324:	00026703 	andeq	r6, r2, r3, lsl #14
 328:	68910200 	ldmvs	r1, {r9}
 32c:	00707213 	rsbseq	r7, r0, r3, lsl r2
 330:	67033401 	strvs	r3, [r3, -r1, lsl #8]
 334:	02000002 	andeq	r0, r0, #2
 338:	63136491 	tstvs	r3, #-1862270976	; 0x91000000
 33c:	44010031 	strmi	r0, [r1], #-49	; 0xffffffcf
 340:	00004103 	andeq	r4, r0, r3, lsl #2
 344:	63910200 	orrsvs	r0, r1, #0, 4
 348:	00326313 	eorseq	r6, r2, r3, lsl r3
 34c:	41034401 	tstmi	r3, r1, lsl #8
 350:	02000000 	andeq	r0, r0, #0
 354:	14006291 	strne	r6, [r0], #-657	; 0xfffffd6f
 358:	00000424 	andeq	r0, r0, r4, lsr #8
 35c:	72032201 	andvc	r2, r3, #268435456	; 0x10000000
 360:	5e20000c 	cdppl	0, 2, cr0, cr0, cr12, {0}
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	0432159c 	ldrteq	r1, [r2], #-1436	; 0xfffffa64
 36c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 370:	000c5003 	andeq	r5, ip, r3
 374:	00002220 	andeq	r2, r0, r0, lsr #4
 378:	129c0100 	addsne	r0, ip, #0, 2
 37c:	0000045d 	andeq	r0, r0, sp, asr r4
 380:	c002fb01 	andgt	pc, r2, r1, lsl #22
 384:	9020000b 	eorls	r0, r0, fp
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	0003b39c 	muleq	r3, ip, r3
 390:	04321600 	ldrteq	r1, [r2], #-1536	; 0xfffffa00
 394:	ff010000 			; <UNDEFINED> instruction: 0xff010000
 398:	00013602 	andeq	r3, r1, r2, lsl #12
 39c:	0003a300 	andeq	sl, r3, r0, lsl #6
 3a0:	13001700 	movwne	r1, #1792	; 0x700
 3a4:	00727473 	rsbseq	r7, r2, r3, ror r4
 3a8:	b3030101 	movwlt	r0, #12545	; 0x3101
 3ac:	02000003 	andeq	r0, r0, #3
 3b0:	07007491 			; <UNDEFINED> instruction: 0x07007491
 3b4:	0002de04 	andeq	sp, r2, r4, lsl #28
 3b8:	03581200 	cmpeq	r8, #0, 4
 3bc:	ef010000 	svc	0x00010000
 3c0:	000b7c02 	andeq	r7, fp, r2, lsl #24
 3c4:	00004420 	andeq	r4, r0, r0, lsr #8
 3c8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
 3cc:	18000003 	stmdane	r0, {r0, r1}
 3d0:	ef010078 	svc	0x00010078
 3d4:	00013602 	andeq	r3, r1, r2, lsl #12
 3d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3dc:	01007918 	tsteq	r0, r8, lsl r9
 3e0:	013602ef 	teqeq	r6, pc, ror #5
 3e4:	91020000 	mrsls	r0, (UNDEF: 2)
 3e8:	02ea1968 	rsceq	r1, sl, #104, 18	; 0x1a0000
 3ec:	f1010000 	setend	le
 3f0:	0002de02 	andeq	sp, r2, r2, lsl #28
 3f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3f8:	01121200 	tsteq	r2, r0, lsl #4
 3fc:	e4010000 	str	r0, [r1], #-0
 400:	000b4002 	andeq	r4, fp, r2
 404:	00003c20 	andeq	r3, r0, r0, lsr #24
 408:	1d9c0100 	ldfnes	f0, [ip]
 40c:	18000004 	stmdane	r0, {r2}
 410:	e4010063 	str	r0, [r1], #-99	; 0xffffff9d
 414:	0002de02 	andeq	sp, r2, r2, lsl #28
 418:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 41c:	04c41500 	strbeq	r1, [r4], #1280	; 0x500
 420:	cb010000 	blgt	40428 <startup-0x1ffbfbd8>
 424:	000ae802 	andeq	lr, sl, r2, lsl #16
 428:	00005820 	andeq	r5, r0, r0, lsr #16
 42c:	1a9c0100 	bne	fe700834 <KeyValues+0xde6ff7f4>
 430:	00000479 	andeq	r0, r0, r9, ror r4
 434:	4102bc01 	tstmi	r2, r1, lsl #24
 438:	b0000000 	andlt	r0, r0, r0
 43c:	3820000a 	stmdacc	r0!, {r1, r3}
 440:	01000000 	mrseq	r0, (UNDEF: 0)
 444:	0004599c 	muleq	r4, ip, r9
 448:	01d41900 	bicseq	r1, r4, r0, lsl #18
 44c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
 450:	00004102 	andeq	r4, r0, r2, lsl #2
 454:	6f910200 	svcvs	0x00910200
 458:	03bf1a00 			; <UNDEFINED> instruction: 0x03bf1a00
 45c:	ac010000 	stcge	0, cr0, [r1], {-0}
 460:	00004102 	andeq	r4, r0, r2, lsl #2
 464:	000a7200 	andeq	r7, sl, r0, lsl #4
 468:	00003e20 	andeq	r3, r0, r0, lsr #28
 46c:	839c0100 	orrshi	r0, ip, #0, 2
 470:	19000004 	stmdbne	r0, {r2}
 474:	000003ca 	andeq	r0, r0, sl, asr #7
 478:	4102ae01 	tstmi	r2, r1, lsl #28
 47c:	02000000 	andeq	r0, r0, #0
 480:	12006f91 	andne	r6, r0, #580	; 0x244
 484:	000003d1 	ldrdeq	r0, [r0], -r1
 488:	4802a401 	stmdami	r2, {r0, sl, sp, pc}
 48c:	2a20000a 	bcs	8004bc <startup-0x1f7ffb44>
 490:	01000000 	mrseq	r0, (UNDEF: 0)
 494:	0004a99c 	muleq	r4, ip, r9
 498:	01d41b00 	bicseq	r1, r4, r0, lsl #22
 49c:	a4010000 	strge	r0, [r1], #-0
 4a0:	00004102 	andeq	r4, r0, r2, lsl #2
 4a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4a8:	04cf1200 	strbeq	r1, [pc], #512	; 4b0 <startup-0x1ffffb50>
 4ac:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
 4b0:	000a2402 	andeq	r2, sl, r2, lsl #8
 4b4:	00002420 	andeq	r2, r0, r0, lsr #8
 4b8:	cf9c0100 	svcgt	0x009c0100
 4bc:	1b000004 	blne	4d4 <startup-0x1ffffb2c>
 4c0:	0000019e 	muleq	r0, lr, r1
 4c4:	41029e01 	tstmi	r2, r1, lsl #28
 4c8:	02000000 	andeq	r0, r0, #0
 4cc:	1a007791 	bne	1e318 <startup-0x1ffe1ce8>
 4d0:	000003a9 	andeq	r0, r0, r9, lsr #7
 4d4:	41028e01 	tstmi	r2, r1, lsl #28
 4d8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 4dc:	34200009 	strtcc	r0, [r0], #-9
 4e0:	01000000 	mrseq	r0, (UNDEF: 0)
 4e4:	0004f99c 	muleq	r4, ip, r9
 4e8:	00bc1900 	adcseq	r1, ip, r0, lsl #18
 4ec:	90010000 	andls	r0, r1, r0
 4f0:	00004102 	andeq	r4, r0, r2, lsl #2
 4f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4f8:	04461200 	strbeq	r1, [r6], #-512	; 0xfffffe00
 4fc:	86010000 	strhi	r0, [r1], -r0
 500:	0009c002 	andeq	ip, r9, r2
 504:	00003020 	andeq	r3, r0, r0, lsr #32
 508:	1f9c0100 	svcne	0x009c0100
 50c:	1b000005 	blne	528 <startup-0x1ffffad8>
 510:	0000042d 	andeq	r0, r0, sp, lsr #8
 514:	41028601 	tstmi	r2, r1, lsl #12
 518:	02000000 	andeq	r0, r0, #0
 51c:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 520:	00000207 	andeq	r0, r0, r7, lsl #4
 524:	8c028101 	stfhid	f0, [r2], {1}
 528:	34200009 	strtcc	r0, [r0], #-9
 52c:	01000000 	mrseq	r0, (UNDEF: 0)
 530:	0005439c 	muleq	r5, ip, r3
 534:	00781800 	rsbseq	r1, r8, r0, lsl #16
 538:	41028101 	tstmi	r2, r1, lsl #2
 53c:	02000000 	andeq	r0, r0, #0
 540:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 544:	00000058 	andeq	r0, r0, r8, asr r0
 548:	64027c01 	strvs	r7, [r2], #-3073	; 0xfffff3ff
 54c:	28200009 	stmdacs	r0!, {r0, r3}
 550:	01000000 	mrseq	r0, (UNDEF: 0)
 554:	0005679c 	muleq	r5, ip, r7
 558:	00781800 	rsbseq	r1, r8, r0, lsl #16
 55c:	41027c01 	tstmi	r2, r1, lsl #24
 560:	02000000 	andeq	r0, r0, #0
 564:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 568:	00000365 	andeq	r0, r0, r5, ror #6
 56c:	44027601 	strmi	r7, [r2], #-1537	; 0xfffff9ff
 570:	20200009 	eorcs	r0, r0, r9
 574:	01000000 	mrseq	r0, (UNDEF: 0)
 578:	0005a99c 	muleq	r5, ip, r9
 57c:	006f1800 	rsbeq	r1, pc, r0, lsl #16
 580:	67027601 	strvs	r7, [r2, -r1, lsl #12]
 584:	02000002 	andeq	r0, r0, #2
 588:	001b7491 	mulseq	fp, r1, r4
 58c:	01000002 	tsteq	r0, r2
 590:	01360276 	teqeq	r6, r6, ror r2
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	00001b70 	andeq	r1, r0, r0, ror fp
 59c:	76010000 	strvc	r0, [r1], -r0
 5a0:	00013602 	andeq	r3, r1, r2, lsl #12
 5a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5a8:	000d1200 	andeq	r1, sp, r0, lsl #4
 5ac:	61010000 	mrsvs	r0, (UNDEF: 1)
 5b0:	0008d802 	andeq	sp, r8, r2, lsl #16
 5b4:	00006c20 	andeq	r6, r0, r0, lsr #24
 5b8:	cd9c0100 	ldfgts	f0, [ip]
 5bc:	18000005 	stmdane	r0, {r0, r2}
 5c0:	6101006f 	tstvs	r1, pc, rrx
 5c4:	00026702 	andeq	r6, r2, r2, lsl #14
 5c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5cc:	03411200 	movteq	r1, #4608	; 0x1200
 5d0:	2d010000 	stccs	0, cr0, [r1, #-0]
 5d4:	00077402 	andeq	r7, r7, r2, lsl #8
 5d8:	00016420 	andeq	r6, r1, r0, lsr #8
 5dc:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
 5e0:	18000005 	stmdane	r0, {r0, r2}
 5e4:	2d01006f 	stccs	0, cr0, [r1, #-444]	; 0xfffffe44
 5e8:	00026702 	andeq	r6, r2, r2, lsl #14
 5ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5f0:	04091200 	streq	r1, [r9], #-512	; 0xfffffe00
 5f4:	23010000 	movwcs	r0, #4096	; 0x1000
 5f8:	00071602 	andeq	r1, r7, r2, lsl #12
 5fc:	00005e20 	andeq	r5, r0, r0, lsr #28
 600:	229c0100 	addscs	r0, ip, #0, 2
 604:	18000006 	stmdane	r0, {r1, r2}
 608:	2301006f 	movwcs	r0, #4207	; 0x106f
 60c:	00026702 	andeq	r6, r2, r2, lsl #14
 610:	6c910200 	lfmvs	f0, 4, [r1], {0}
 614:	01006913 	tsteq	r0, r3, lsl r9
 618:	01360225 	teqeq	r6, r5, lsr #4
 61c:	91020000 	mrsls	r0, (UNDEF: 2)
 620:	12120074 	andsne	r0, r2, #116	; 0x74
 624:	01000003 	tsteq	r0, r3
 628:	06b80219 	ssateq	r0, #25, r9, lsl #4
 62c:	005e2000 	subseq	r2, lr, r0
 630:	9c010000 	stcls	0, cr0, [r1], {-0}
 634:	00000653 	andeq	r0, r0, r3, asr r6
 638:	01006f18 	tsteq	r0, r8, lsl pc
 63c:	02670219 	rsbeq	r0, r7, #-1879048191	; 0x90000001
 640:	91020000 	mrsls	r0, (UNDEF: 2)
 644:	0069136c 	rsbeq	r1, r9, ip, ror #6
 648:	36021b01 	strcc	r1, [r2], -r1, lsl #22
 64c:	02000001 	andeq	r0, r0, #1
 650:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
 654:	0000001e 	andeq	r0, r0, lr, lsl r0
 658:	2401d101 	strcs	sp, [r1], #-257	; 0xfffffeff
 65c:	94200005 	strtls	r0, [r0], #-5
 660:	01000001 	tsteq	r0, r1
 664:	0006de9c 	muleq	r6, ip, lr
 668:	00781800 	rsbseq	r1, r8, r0, lsl #16
 66c:	3a01d101 	bcc	74a78 <startup-0x1ff8b588>
 670:	02000000 	andeq	r0, r0, #0
 674:	79185c91 	ldmdbvc	r8, {r0, r4, r7, sl, fp, ip, lr}
 678:	01d10100 	bicseq	r0, r1, r0, lsl #2
 67c:	0000003a 	andeq	r0, r0, sl, lsr r0
 680:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
 684:	00746573 	rsbseq	r6, r4, r3, ror r5
 688:	3a01d101 	bcc	74a94 <startup-0x1ff8b56c>
 68c:	02000000 	andeq	r0, r0, #0
 690:	78195491 	ldmdavc	r9, {r0, r4, r7, sl, ip, lr}
 694:	01000001 	tsteq	r0, r1
 698:	00c301d8 	ldrdeq	r0, [r3], #24
 69c:	91020000 	mrsls	r0, (UNDEF: 2)
 6a0:	03b41967 			; <UNDEFINED> instruction: 0x03b41967
 6a4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
 6a8:	0000c301 	andeq	ip, r0, r1, lsl #6
 6ac:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 6b0:	00012319 	andeq	r2, r1, r9, lsl r3
 6b4:	01d80100 	bicseq	r0, r8, r0, lsl #2
 6b8:	000000c3 	andeq	r0, r0, r3, asr #1
 6bc:	19659102 	stmdbne	r5!, {r1, r8, ip, pc}^
 6c0:	0000002b 	andeq	r0, r0, fp, lsr #32
 6c4:	c301d801 	movwgt	sp, #6145	; 0x1801
 6c8:	02000000 	andeq	r0, r0, #0
 6cc:	31196491 			; <UNDEFINED> instruction: 0x31196491
 6d0:	01000000 	mrseq	r0, (UNDEF: 0)
 6d4:	00c30209 	sbceq	r0, r3, r9, lsl #4
 6d8:	91020000 	mrsls	r0, (UNDEF: 2)
 6dc:	f5120063 			; <UNDEFINED> instruction: 0xf5120063
 6e0:	01000000 	mrseq	r0, (UNDEF: 0)
 6e4:	04be01c1 	ldrteq	r0, [lr], #449	; 0x1c1
 6e8:	00662000 	rsbeq	r2, r6, r0
 6ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 6f0:	00000713 	andeq	r0, r0, r3, lsl r7
 6f4:	0001c219 	andeq	ip, r1, r9, lsl r2
 6f8:	01c30100 	biceq	r0, r3, r0, lsl #2
 6fc:	000002de 	ldrdeq	r0, [r0], -lr
 700:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
 704:	00646461 	rsbeq	r6, r4, r1, ror #8
 708:	de01c301 	cdple	3, 0, cr12, cr1, cr1, {0}
 70c:	02000002 	andeq	r0, r0, #2
 710:	15007691 	strne	r7, [r0, #-1681]	; 0xfffff96f
 714:	000002f2 	strdeq	r0, [r0], -r2
 718:	5c01ab01 			; <UNDEFINED> instruction: 0x5c01ab01
 71c:	62200004 	eorvs	r0, r0, #4
 720:	01000000 	mrseq	r0, (UNDEF: 0)
 724:	01c71a9c 			; <UNDEFINED> instruction: 0x01c71a9c
 728:	a5010000 	strge	r0, [r1, #-0]
 72c:	0000c301 	andeq	ip, r0, r1, lsl #6
 730:	00043200 	andeq	r3, r4, r0, lsl #4
 734:	00002a20 	andeq	r2, r0, r0, lsr #20
 738:	4f9c0100 	svcmi	0x009c0100
 73c:	1b000007 	blne	760 <startup-0x1ffff8a0>
 740:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
 744:	c301a501 	movwgt	sl, #5377	; 0x1501
 748:	02000000 	andeq	r0, r0, #0
 74c:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 750:	00000036 	andeq	r0, r0, r6, lsr r0
 754:	ec019901 			; <UNDEFINED> instruction: 0xec019901
 758:	46200003 	strtmi	r0, [r0], -r3
 75c:	01000000 	mrseq	r0, (UNDEF: 0)
 760:	0007849c 	muleq	r7, ip, r4
 764:	01d41b00 	bicseq	r1, r4, r0, lsl #22
 768:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 76c:	0000c301 	andeq	ip, r0, r1, lsl #6
 770:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 774:	0003b41b 	andeq	fp, r3, fp, lsl r4
 778:	01990100 	orrseq	r0, r9, r0, lsl #2
 77c:	000000c3 	andeq	r0, r0, r3, asr #1
 780:	00769102 	rsbseq	r9, r6, r2, lsl #2
 784:	00019012 	andeq	r9, r1, r2, lsl r0
 788:	018e0100 	orreq	r0, lr, r0, lsl #2
 78c:	200003ac 	andcs	r0, r0, ip, lsr #7
 790:	00000040 	andeq	r0, r0, r0, asr #32
 794:	07b99c01 	ldreq	r9, [r9, r1, lsl #24]!
 798:	63180000 	tstvs	r8, #0
 79c:	0100646d 	tsteq	r0, sp, ror #8
 7a0:	00c3018e 	sbceq	r0, r3, lr, lsl #3
 7a4:	91020000 	mrsls	r0, (UNDEF: 2)
 7a8:	03b41b77 			; <UNDEFINED> instruction: 0x03b41b77
 7ac:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 7b0:	0000c301 	andeq	ip, r0, r1, lsl #6
 7b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 7b8:	04a21200 	strteq	r1, [r2], #512	; 0x200
 7bc:	71010000 	mrsvc	r0, (UNDEF: 1)
 7c0:	00032c01 	andeq	r2, r3, r1, lsl #24
 7c4:	00008020 	andeq	r8, r0, r0, lsr #32
 7c8:	ee9c0100 	fmle	f0, f4, f0
 7cc:	1b000007 	blne	7f0 <startup-0x1ffff810>
 7d0:	000000ef 	andeq	r0, r0, pc, ror #1
 7d4:	c3017101 	movwgt	r7, #4353	; 0x1101
 7d8:	02000000 	andeq	r0, r0, #0
 7dc:	b41b7791 	ldrlt	r7, [fp], #-1937	; 0xfffff86f
 7e0:	01000003 	tsteq	r0, r3
 7e4:	00c30171 	sbceq	r0, r3, r1, ror r1
 7e8:	91020000 	mrsls	r0, (UNDEF: 2)
 7ec:	9c1a0076 	ldcls	0, cr0, [sl], {118}	; 0x76
 7f0:	01000003 	tsteq	r0, r3
 7f4:	00c3014d 	sbceq	r0, r3, sp, asr #2
 7f8:	029c0000 	addseq	r0, ip, #0
 7fc:	00902000 	addseq	r2, r0, r0
 800:	9c010000 	stcls	0, cr0, [r1], {-0}
 804:	00000827 	andeq	r0, r0, r7, lsr #16
 808:	0003b41b 	andeq	fp, r3, fp, lsl r4
 80c:	014d0100 	mrseq	r0, (UNDEF: 93)
 810:	000000c3 	andeq	r0, r0, r3, asr #1
 814:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 818:	000000bc 	strheq	r0, [r0], -ip
 81c:	c3014f01 	movwgt	r4, #7937	; 0x1f01
 820:	02000000 	andeq	r0, r0, #0
 824:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 828:	000003f1 	strdeq	r0, [r0], -r1
 82c:	2e013001 	cdpcs	0, 0, cr3, cr1, cr1, {0}
 830:	6e200002 	cdpvs	0, 2, cr0, cr0, cr2, {0}
 834:	01000000 	mrseq	r0, (UNDEF: 0)
 838:	00084d9c 	muleq	r8, ip, sp
 83c:	04041900 	streq	r1, [r4], #-2304	; 0xfffff700
 840:	3b010000 	blcc	40848 <startup-0x1ffbf7b8>
 844:	00004101 	andeq	r4, r0, r1, lsl #2
 848:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 84c:	01b01200 	lslseq	r1, r0, #4
 850:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 854:	0001d401 	andeq	sp, r1, r1, lsl #8
 858:	00005a20 	andeq	r5, r0, r0, lsr #20
 85c:	739c0100 	orrsvc	r0, ip, #0, 2
 860:	1b000008 	blne	888 <startup-0x1ffff778>
 864:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
 868:	c3011901 	movwgt	r1, #6401	; 0x1901
 86c:	02000000 	andeq	r0, r0, #0
 870:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 874:	00000234 	andeq	r0, r0, r4, lsr r2
 878:	a0011401 	andge	r1, r1, r1, lsl #8
 87c:	34200001 	strtcc	r0, [r0], #-1
 880:	01000000 	mrseq	r0, (UNDEF: 0)
 884:	0008979c 	muleq	r8, ip, r7
 888:	00781800 	rsbseq	r1, r8, r0, lsl #16
 88c:	c3011401 	movwgt	r1, #5121	; 0x1401
 890:	02000000 	andeq	r0, r0, #0
 894:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 898:	00000376 	andeq	r0, r0, r6, ror r3
 89c:	76010f01 	strvc	r0, [r1], -r1, lsl #30
 8a0:	2a200001 	bcs	8008ac <startup-0x1f7ff754>
 8a4:	01000000 	mrseq	r0, (UNDEF: 0)
 8a8:	0008bb9c 	muleq	r8, ip, fp
 8ac:	00781800 	rsbseq	r1, r8, r0, lsl #16
 8b0:	c3010f01 	movwgt	r0, #7937	; 0x1f01
 8b4:	02000000 	andeq	r0, r0, #0
 8b8:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 8bc:	0000034d 	andeq	r0, r0, sp, asr #6
 8c0:	44010101 	strmi	r0, [r1], #-257	; 0xfffffeff
 8c4:	32200001 	eorcc	r0, r0, #1
 8c8:	01000000 	mrseq	r0, (UNDEF: 0)
 8cc:	0008fc9c 	muleq	r8, ip, ip
 8d0:	736d1800 	cmnvc	sp, #0, 16
 8d4:	01010100 	mrseq	r0, (UNDEF: 17)
 8d8:	0000003a 	andeq	r0, r0, sl, lsr r0
 8dc:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 8e0:	03010069 	movweq	r0, #4201	; 0x1069
 8e4:	00013601 	andeq	r3, r1, r1, lsl #12
 8e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8ec:	00000719 	andeq	r0, r0, r9, lsl r7
 8f0:	01030100 	mrseq	r0, (UNDEF: 19)
 8f4:	00000136 	andeq	r0, r0, r6, lsr r1
 8f8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 8fc:	0003901d 	andeq	r9, r3, sp, lsl r0
 900:	16ed0100 	strbtne	r0, [sp], r0, lsl #2
 904:	2e200001 	cdpcs	0, 2, cr0, cr0, cr1, {0}
 908:	01000000 	mrseq	r0, (UNDEF: 0)
 90c:	00094c9c 	muleq	r9, ip, ip
 910:	73751e00 	cmnvc	r5, #0, 28
 914:	3aed0100 	bcc	ffb40d1c <KeyValues+0xdfb3fcdc>
 918:	02000000 	andeq	r0, r0, #0
 91c:	691f6c91 	ldmdbvs	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
 920:	36ef0100 	strbtcc	r0, [pc], r0, lsl #2
 924:	10000001 	andne	r0, r0, r1
 928:	00000007 	andeq	r0, r0, r7
 92c:	0136ef01 	teqeq	r6, r1, lsl #30
 930:	91020000 	mrsls	r0, (UNDEF: 2)
 934:	01242070 			; <UNDEFINED> instruction: 0x01242070
 938:	00182000 	andseq	r2, r8, r0
 93c:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
 940:	36fb0100 	ldrbtcc	r0, [fp], r0, lsl #2
 944:	02000001 	andeq	r0, r0, #1
 948:	00007491 	muleq	r0, r1, r4
 94c:	00031e22 	andeq	r1, r3, r2, lsr #28
 950:	04e70100 	strbteq	r0, [r7], #256	; 0x100
 954:	12200001 	eorne	r0, r0, #1
 958:	01000000 	mrseq	r0, (UNDEF: 0)
 95c:	01ea239c 			; <UNDEFINED> instruction: 0x01ea239c
 960:	d1010000 	mrsle	r0, (UNDEF: 1)
 964:	200000c0 	andcs	r0, r0, r0, asr #1
 968:	00000044 	andeq	r0, r0, r4, asr #32
 96c:	d9249c01 	stmdble	r4!, {r0, sl, fp, ip, pc}
 970:	01000001 	tsteq	r0, r1
 974:	000041b3 			; <UNDEFINED> instruction: 0x000041b3
 978:	00001000 	andeq	r1, r0, r0
 97c:	0000b020 	andeq	fp, r0, r0, lsr #32
 980:	d39c0100 	orrsle	r0, ip, #0, 2
 984:	25000009 	strcs	r0, [r0, #-9]
 988:	00000024 	andeq	r0, r0, r4, lsr #32
 98c:	02deb301 	sbcseq	fp, lr, #67108864	; 0x4000000
 990:	91020000 	mrsls	r0, (UNDEF: 2)
 994:	6f722167 	svcvs	0x00722167
 998:	b5010077 	strlt	r0, [r1, #-119]	; 0xffffff89
 99c:	000002de 	ldrdeq	r0, [r0], -lr
 9a0:	1f779102 	svcne	0x00779102
 9a4:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 9a8:	02deb501 	sbcseq	fp, lr, #4194304	; 0x400000
 9ac:	b3100000 	tstlt	r0, #0
 9b0:	01000000 	mrseq	r0, (UNDEF: 0)
 9b4:	0002deb5 			; <UNDEFINED> instruction: 0x0002deb5
 9b8:	6f910200 	svcvs	0x00910200
 9bc:	00003a20 	andeq	r3, r0, r0, lsr #20
 9c0:	00001420 	andeq	r1, r0, r0, lsr #8
 9c4:	00692100 	rsbeq	r2, r9, r0, lsl #2
 9c8:	0136bd01 	teqeq	r6, r1, lsl #26
 9cc:	91020000 	mrsls	r0, (UNDEF: 2)
 9d0:	23000070 	movwcs	r0, #112	; 0x70
 9d4:	00000492 	muleq	r0, r2, r4
 9d8:	0000ab01 	andeq	sl, r0, r1, lsl #22
 9dc:	000c2000 	andeq	r2, ip, r0
 9e0:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	13490101 	movtne	r0, #37121	; 0x9101
  18:	00001301 	andeq	r1, r0, r1, lsl #6
  1c:	49002103 	stmdbmi	r0, {r0, r1, r8, sp}
  20:	000b2f13 	andeq	r2, fp, r3, lsl pc
  24:	00260400 	eoreq	r0, r6, r0, lsl #8
  28:	00001349 	andeq	r1, r0, r9, asr #6
  2c:	0b002405 	bleq	9048 <startup-0x1fff6fb8>
  30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  34:	0600000e 	streq	r0, [r0], -lr
  38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  3c:	0b3b0b3a 	bleq	ec2d2c <startup-0x1f13d2d4>
  40:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  44:	00001802 	andeq	r1, r0, r2, lsl #16
  48:	0b000f07 	bleq	3c6c <startup-0x1fffc394>
  4c:	0013490b 	andseq	r4, r3, fp, lsl #18
  50:	00160800 	andseq	r0, r6, r0, lsl #16
  54:	0b3a0e03 	bleq	e83868 <startup-0x1f17c798>
  58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  5c:	13090000 	movwne	r0, #36864	; 0x9000
  60:	0b0e0301 	bleq	380c6c <startup-0x1fc7f394>
  64:	3b0b3a0b 	blcc	2ce898 <startup-0x1fd31768>
  68:	0013010b 	andseq	r0, r3, fp, lsl #2
  6c:	000d0a00 	andeq	r0, sp, r0, lsl #20
  70:	0b3a0803 	bleq	e82084 <startup-0x1f17df7c>
  74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  78:	00000b38 	andeq	r0, r0, r8, lsr fp
  7c:	03000d0b 	movweq	r0, #3339	; 0xd0b
  80:	3b0b3a0e 	blcc	2ce8c0 <startup-0x1fd31740>
  84:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  88:	0c00000b 	stceq	0, cr0, [r0], {11}
  8c:	0b0b0024 	bleq	2c0124 <startup-0x1fd3fedc>
  90:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  94:	150d0000 	strne	r0, [sp, #-0]
  98:	01192701 	tsteq	r9, r1, lsl #14
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	13490005 	movtne	r0, #36869	; 0x9005
  a4:	130f0000 	movwne	r0, #61440	; 0xf000
  a8:	3c0e0300 	stccc	3, cr0, [lr], {-0}
  ac:	10000019 	andne	r0, r0, r9, lsl r0
  b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  b4:	0b3b0b3a 	bleq	ec2da4 <startup-0x1f13d25c>
  b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  bc:	35110000 	ldrcc	r0, [r1, #-0]
  c0:	00134900 	andseq	r4, r3, r0, lsl #18
  c4:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d0:	01111927 	tsteq	r1, r7, lsr #18
  d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  dc:	13000013 	movwne	r0, #19
  e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ec:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
  f0:	03193f00 	tsteq	r9, #0, 30
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	11192705 	tstne	r9, r5, lsl #14
  fc:	40061201 	andmi	r1, r6, r1, lsl #4
 100:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 104:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 108:	03193f00 	tsteq	r9, #0, 30
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	11192705 	tstne	r9, r5, lsl #14
 114:	40061201 	andmi	r1, r6, r1, lsl #4
 118:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 11c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 120:	03193f01 	tsteq	r9, #1, 30
 124:	3b0b3a0e 	blcc	2ce964 <startup-0x1fd3169c>
 128:	3c134905 			; <UNDEFINED> instruction: 0x3c134905
 12c:	00130119 	andseq	r0, r3, r9, lsl r1
 130:	00181700 	andseq	r1, r8, r0, lsl #14
 134:	05180000 	ldreq	r0, [r8, #-0]
 138:	3a080300 	bcc	200d40 <startup-0x1fdff2c0>
 13c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	00180213 	andseq	r0, r8, r3, lsl r2
 144:	00341900 	eorseq	r1, r4, r0, lsl #18
 148:	0b3a0e03 	bleq	e8395c <startup-0x1f17c6a4>
 14c:	1349053b 	movtne	r0, #38203	; 0x953b
 150:	00001802 	andeq	r1, r0, r2, lsl #16
 154:	3f012e1a 	svccc	0x00012e1a
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 160:	11134919 	tstne	r3, r9, lsl r9
 164:	40061201 	andmi	r1, r6, r1, lsl #4
 168:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 16c:	00001301 	andeq	r1, r0, r1, lsl #6
 170:	0300051b 	movweq	r0, #1307	; 0x51b
 174:	3b0b3a0e 	blcc	2ce9b4 <startup-0x1fd3164c>
 178:	02134905 	andseq	r4, r3, #81920	; 0x14000
 17c:	1c000018 	stcne	0, cr0, [r0], {24}
 180:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	00130119 	andseq	r0, r3, r9, lsl r1
 198:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 19c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 1b4:	08030005 	stmdaeq	r3, {r0, r2}
 1b8:	0b3b0b3a 	bleq	ec2ea8 <startup-0x1f13d158>
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	341f0000 	ldrcc	r0, [pc], #-0	; 1c8 <startup-0x1ffffe38>
 1c4:	3a080300 	bcc	200dcc <startup-0x1fdff234>
 1c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	20000013 	andcs	r0, r0, r3, lsl r0
 1d0:	0111010b 	tsteq	r1, fp, lsl #2
 1d4:	00000612 	andeq	r0, r0, r2, lsl r6
 1d8:	03003421 	movweq	r3, #1057	; 0x421
 1dc:	3b0b3a08 	blcc	2cea04 <startup-0x1fd315fc>
 1e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e4:	22000018 	andcs	r0, r0, #24
 1e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1ec:	0b3a0e03 	bleq	e83a00 <startup-0x1f17c600>
 1f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1fc:	23000019 	movwcs	r0, #25
 200:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 204:	0b3a0e03 	bleq	e83a18 <startup-0x1f17c5e8>
 208:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 214:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
 218:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 224:	01111349 	tsteq	r1, r9, asr #6
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 230:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 234:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 240:	Address 0x00000240 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000df8 	strdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000e08 	andcs	r0, r0, r8, lsl #28
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000002dd 	ldrdeq	r0, [r0], -sp
   4:	005c0002 	subseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	55472f3a 	strbpl	r2, [r7, #-3898]	; 0xfffff0c6
  20:	5449442f 	strbpl	r4, [r9], #-1071	; 0xfffffbd1
  24:	20313531 	eorscs	r3, r1, r1, lsr r5
  28:	614d202d 	cmpvs	sp, sp, lsr #32
  2c:	6e696b73 	vmovvs.8	d9[7], r6
  30:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  38:	50206461 	eorpl	r6, r0, r1, ror #8
  3c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  40:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  44:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  48:	646f432f 	strbtvs	r4, [pc], #-815	; 50 <startup-0x1fffffb0>
  4c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  50:	6f702f65 	svcvs	0x00702f65
  54:	0000676e 	andeq	r6, r0, lr, ror #14
  58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  5c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	05000000 	streq	r0, [r0, #-0]
  68:	00000002 	andeq	r0, r0, r2
  6c:	01ab0320 			; <UNDEFINED> instruction: 0x01ab0320
  70:	21211301 			; <UNDEFINED> instruction: 0x21211301
  74:	0302212f 	movweq	r2, #8495	; 0x212f
  78:	00010100 	andeq	r0, r1, r0, lsl #2
  7c:	00100205 	andseq	r0, r0, r5, lsl #4
  80:	b3032000 	movwlt	r2, #12288	; 0x3000
  84:	5b690101 	blpl	1a40490 <startup-0x1e5bfb70>
  88:	040200a1 	streq	r0, [r2], #-161	; 0xffffff5f
  8c:	003c0603 	eorseq	r0, ip, r3, lsl #12
  90:	3c010402 	cfstrscc	mvf0, [r1], {2}
  94:	a0854f06 	addge	r4, r5, r6, lsl #30
  98:	02040200 	andeq	r0, r4, #0, 4
  9c:	040200b0 	streq	r0, [r2], #-176	; 0xffffff50
  a0:	4a6c0302 	bmi	1b00cb0 <startup-0x1e4ff350>
  a4:	01040200 	mrseq	r0, R12_usr
  a8:	03066606 	movweq	r6, #26118	; 0x6606
  ac:	bd215817 	stclt	8, cr5, [r1, #-92]!	; 0xffffffa4
  b0:	3f423f2f 	svccc	0x00423f2f
  b4:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
  b8:	06200601 	strteq	r0, [r0], -r1, lsl #12
  bc:	2fa13d68 	svccs	0x00a13d68
  c0:	4b3f2f2f 	blmi	fcbd84 <startup-0x1f03427c>
  c4:	003c0c03 	eorseq	r0, ip, r3, lsl #24
  c8:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
  cc:	03040200 	movweq	r0, #16896	; 0x4200
  d0:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
  d4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
  d8:	424b4d4e 	submi	r4, fp, #4992	; 0x1380
  dc:	03040200 	movweq	r0, #16896	; 0x4200
  e0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  e4:	02004803 	andeq	r4, r0, #196608	; 0x30000
  e8:	3c060104 	stfccs	f0, [r6], {4}
  ec:	674d4e06 	strbvs	r4, [sp, -r6, lsl #28]
  f0:	c9677783 	stmdbgt	r7!, {r0, r1, r7, r8, r9, sl, ip, sp, lr}^
  f4:	11036777 	tstne	r3, r7, ror r7
  f8:	206f0374 	rsbcs	r0, pc, r4, ror r3	; <UNPREDICTABLE>
  fc:	034a1103 	movteq	r1, #41219	; 0xa103
 100:	223d2072 	eorscs	r2, sp, #114	; 0x72
 104:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 108:	243d223d 	ldrtcs	r2, [sp], #-573	; 0xfffffdc3
 10c:	3e3e3d4d 	cdpcc	13, 3, cr3, cr14, cr13, {2}
 110:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 114:	00340104 	eorseq	r0, r4, r4, lsl #2
 118:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 11c:	01040200 	mrseq	r0, R12_usr
 120:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 124:	02006801 	andeq	r6, r0, #65536	; 0x10000
 128:	003d0104 	eorseq	r0, sp, r4, lsl #2
 12c:	2f010402 	svccs	0x00010402
 130:	bd3d3e4c 	ldclt	14, cr3, [sp, #-304]!	; 0xfffffed0
 134:	3e3e3e69 	cdpcc	14, 3, cr3, cr14, cr9, {3}
 138:	303d3059 	eorscc	r3, sp, r9, asr r0
 13c:	4c3e3e5a 	ldcmi	14, cr3, [lr], #-360	; 0xfffffe98
 140:	3d4c303d 	stclcc	0, cr3, [ip, #-244]	; 0xffffff0c
 144:	91cb3d31 	bicls	r3, fp, r1, lsr sp
 148:	3d30594c 			; <UNDEFINED> instruction: 0x3d30594c
 14c:	3d5a3e2f 	ldclcc	14, cr3, [sl, #-188]	; 0xffffff44
 150:	313d5a30 	teqcc	sp, r0, lsr sl
 154:	773d3e3e 			; <UNDEFINED> instruction: 0x773d3e3e
 158:	3e5a3e91 	mrccc	14, 2, r3, cr10, cr1, {4}
 15c:	3e914d83 	cdpcc	13, 9, cr4, cr1, cr3, {4}
 160:	833e3d5a 	teqhi	lr, #5760	; 0x1680
 164:	6759674d 	ldrbvs	r6, [r9, -sp, asr #14]
 168:	3e3d2f4d 	cdpcc	15, 3, cr2, cr13, cr13, {2}
 16c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 170:	4b4b4b3e 	blmi	12d2e70 <startup-0x1ed2d190>
 174:	3f3d4c4b 	svccc	0x003d4c4b
 178:	4c9f4c3f 	ldcmi	12, cr4, [pc], {63}	; 0x3f
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 184:	02004803 	andeq	r4, r0, #196608	; 0x30000
 188:	58060104 	stmdapl	r6, {r2, r8}
 18c:	02040200 	andeq	r0, r4, #0, 4
 190:	02004506 	andeq	r4, r0, #25165824	; 0x1800000
 194:	58060104 	stmdapl	r6, {r2, r8}
 198:	4a0a0306 	bmi	280db8 <startup-0x1fd7f248>
 19c:	0200674d 	andeq	r6, r0, #20185088	; 0x1340000
 1a0:	4a060104 	bmi	1805b8 <startup-0x1fe7fa48>
 1a4:	02040200 	andeq	r0, r4, #0, 4
 1a8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 1ac:	02004a03 	andeq	r4, r0, #12288	; 0x3000
 1b0:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
 1b4:	4baf684f 	blmi	febda2f8 <KeyValues+0xdebd92b8>
 1b8:	4b224b22 	blmi	892e48 <startup-0x1f76d1b8>
 1bc:	4b224b22 	blmi	892e4c <startup-0x1f76d1b4>
 1c0:	4b224b22 	blmi	892e50 <startup-0x1f76d1b0>
 1c4:	3e234b22 	vmulcc.f64	d4, d3, d18
 1c8:	784b3e69 	stmdavc	fp, {r0, r3, r5, r6, r9, sl, fp, ip, sp}^
 1cc:	cac9694b 	bgt	ff25a700 <KeyValues+0xdf2596c0>
 1d0:	a23eae92 	eorsge	sl, lr, #2336	; 0x920
 1d4:	7fbf0393 	svcvc	0x00bf0393
 1d8:	00c203ac 	sbceq	r0, r2, ip, lsr #7
 1dc:	004d6920 	subeq	r6, sp, r0, lsr #18
 1e0:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1e4:	03040200 	movweq	r0, #16896	; 0x4200
 1e8:	02009c08 	andeq	r9, r0, #8, 24	; 0x800
 1ec:	3c060104 	stfccs	f0, [r6], {4}
 1f0:	4d4d6a06 	vstrmi	s13, [sp, #-24]	; 0xffffffe8
 1f4:	03040200 	movweq	r0, #16896	; 0x4200
 1f8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1fc:	009c0803 	addseq	r0, ip, r3, lsl #16
 200:	06010402 	streq	r0, [r1], -r2, lsl #8
 204:	4d6a063c 	stclmi	6, cr0, [sl, #-240]!	; 0xffffff10
 208:	76754c4b 	ldrbtvc	r4, [r5], -fp, asr #24
 20c:	01040200 	mrseq	r0, R12_usr
 210:	d8066606 	stmdale	r6, {r1, r2, r9, sl, sp, lr}
 214:	4c8659a0 			; <UNDEFINED> instruction: 0x4c8659a0
 218:	3d84763d 	stccc	6, cr7, [r4, #244]	; 0xf4
 21c:	04020077 	streq	r0, [r2], #-119	; 0xffffff89
 220:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 224:	8a59a0d8 	bhi	166858c <startup-0x1e997a74>
 228:	5b845a4c 	blpl	fe116b60 <KeyValues+0xde115b20>
 22c:	4c4bbd4b 	mcrrmi	13, 4, fp, fp, cr11
 230:	3e4c7675 	mcrcc	6, 2, r7, cr12, cr5, {3}
 234:	3d4b3f84 	stclcc	15, cr3, [fp, #-528]	; 0xfffffdf0
 238:	3d674d3d 	stclcc	13, cr4, [r7, #-244]!	; 0xffffff0c
 23c:	83674d3d 	cmnhi	r7, #3904	; 0xf40
 240:	77c96769 	strbvc	r6, [r9, r9, ror #14]
 244:	2f4b3d67 	svccs	0x004b3d67
 248:	3e3f693d 			; <UNDEFINED> instruction: 0x3e3f693d
 24c:	3e4c302f 	cdpcc	0, 4, cr3, cr12, cr15, {1}
 250:	3d67772f 	stclcc	7, cr7, [r7, #-188]!	; 0xffffff44
 254:	3d674d59 	stclcc	13, cr4, [r7, #-356]!	; 0xfffffe9c
 258:	3f4d593e 	svccc	0x004d593e
 25c:	5a3e3d3e 	bpl	f8f75c <startup-0x1f0708a4>
 260:	3f932f3e 	svccc	0x00932f3e
 264:	3e5a3e3e 	mrccc	14, 2, r3, cr10, cr14, {1}
 268:	3e2f932f 	cdpcc	3, 2, cr9, cr15, cr15, {1}
 26c:	01040200 	mrseq	r0, R12_usr
 270:	84062006 	strhi	r2, [r6], #-6
 274:	3d3f3d3f 	ldccc	13, cr3, [pc, #-252]!	; 180 <startup-0x1ffffe80>
 278:	3d3f3d3f 	ldccc	13, cr3, [pc, #-252]!	; 184 <startup-0x1ffffe7c>
 27c:	00673f3d 	rsbeq	r3, r7, sp, lsr pc
 280:	06010402 	streq	r0, [r1], -r2, lsl #8
 284:	3e840620 	cdpcc	6, 8, cr0, cr4, cr0, {1}
 288:	594d3d5a 	stmdbpl	sp, {r1, r3, r4, r6, r8, sl, fp, ip, sp}^
 28c:	9f693e68 	svcls	0x00693e68
 290:	303e3d4d 	eorscc	r3, lr, sp, asr #26
 294:	4f722230 	svcmi	0x00722230
 298:	22304c84 	eorscs	r4, r0, #132, 24	; 0x8400
 29c:	3d844f72 	stccc	15, cr4, [r4, #456]	; 0x1c8
 2a0:	3e3e2fcb 	cdpcc	15, 3, cr2, cr14, cr11, {6}
 2a4:	2f3f3d3d 	svccs	0x003f3d3d
 2a8:	303d3e3d 	eorscc	r3, sp, sp, lsr lr
 2ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2b0:	2f3d5b08 	svccs	0x003d5b08
 2b4:	2f30302f 	svccs	0x0030302f
 2b8:	0b03304c 	bleq	cc3f0 <startup-0x1ff33c10>
 2bc:	5a592f2e 	bpl	164bf7c <startup-0x1e9b4084>
 2c0:	4c776767 	ldclmi	7, cr6, [r7], #-412	; 0xfffffe64
 2c4:	22761e6c 	rsbscs	r1, r6, #108, 28	; 0x6c0
 2c8:	681e6c84 	ldmdavs	lr, {r2, r7, sl, fp, sp, lr}
 2cc:	6c4c7722 	mcrrvs	7, 2, r7, ip, cr2
 2d0:	8422761e 	strthi	r7, [r2], #-1566	; 0xfffff9e2
 2d4:	22681e6c 	rsbcs	r1, r8, #108, 28	; 0x6c0
 2d8:	3c4a035a 	mcrrcc	3, 5, r0, sl, cr10
 2dc:	01000902 	tsteq	r0, r2, lsl #18
 2e0:	Address 0x000002e0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	6c007964 			; <UNDEFINED> instruction: 0x6c007964
   8:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
   c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  10:	61705f65 	cmnvs	r0, r5, ror #30
  14:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  18:	736f7000 	cmnvc	pc, #0
  1c:	69700078 	ldmdbvs	r0!, {r3, r4, r5, r6}^
  20:	006c6578 	rsbeq	r6, ip, r8, ror r5
  24:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
  28:	69006e6d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r9, sl, fp, sp, lr}
  2c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
  30:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  34:	72670070 	rsbvc	r0, r7, #112	; 0x70
  38:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  3c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  40:	5f657469 	svcpl	0x00657469
  44:	61746164 	cmnvs	r4, r4, ror #2
  48:	6c616200 	sfmvs	f6, 2, [r1], #-0
  4c:	4774006c 	ldrbmi	r0, [r4, -ip, rrx]!
  50:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  54:	00797274 	rsbseq	r7, r9, r4, ror r2
  58:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  5c:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
  60:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  64:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  68:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
  6c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  70:	6f5f7961 	svcvs	0x005f7961
  74:	5a007475 	bpl	1d250 <startup-0x1ffe2db0>
  78:	55475c3a 	strbpl	r5, [r7, #-3130]	; 0xfffff3c6
  7c:	5449445c 	strbpl	r4, [r9], #-1116	; 0xfffffba4
  80:	20313531 	eorscs	r3, r1, r1, lsr r5
  84:	614d202d 	cmpvs	sp, sp, lsr #32
  88:	6e696b73 	vmovvs.8	d9[7], r6
  8c:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
  90:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  94:	50206461 	eorpl	r6, r0, r1, ror #8
  98:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  9c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  a0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  a4:	646f435c 	strbtvs	r4, [pc], #-860	; ac <startup-0x1fffff54>
  a8:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  ac:	6f705c65 	svcvs	0x00705c65
  b0:	6300676e 	movwvs	r6, #1902	; 0x76e
  b4:	765f6c6f 	ldrbvc	r6, [pc], -pc, ror #24
  b8:	00736c61 	rsbseq	r6, r3, r1, ror #24
  bc:	5f746572 	svcpl	0x00746572
  c0:	006c6176 	rsbeq	r6, ip, r6, ror r1
  c4:	6e69616d 	powvsez	f6, f1, #5.0
  c8:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
  cc:	61705f74 	cmnvs	r0, r4, ror pc
  d0:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  d4:	64617000 	strbtvs	r7, [r1], #-0
  d8:	5f656c64 	svcpl	0x00656c64
  dc:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff48 <KeyValues+0xdfffef08>
  e0:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  e4:	45475000 	strbmi	r5, [r7, #-0]
  e8:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  ec:	76005952 			; <UNDEFINED> instruction: 0x76005952
  f0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  f4:	61726700 	cmnvs	r2, r0, lsl #14
  f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  fc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 100:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 104:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 108:	6975006e 	ldmdbvs	r5!, {r1, r2, r3, r5, r6}^
 10c:	5f38746e 	svcpl	0x0038746e
 110:	73610074 	cmnvc	r1, #116	; 0x74
 114:	5f696963 	svcpl	0x00696963
 118:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 11c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 120:	78007261 	stmdavc	r0, {r0, r5, r6, r9, ip, sp, lr}
 124:	7379665f 	cmnvc	r9, #99614720	; 0x5f00000
 128:	006b7369 	rsbeq	r7, fp, r9, ror #6
 12c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 130:	3a5a0054 	bcc	1680288 <startup-0x1e97fd78>
 134:	2f55472f 	svccs	0x0055472f
 138:	31544944 	cmpcc	r4, r4, asr #18
 13c:	2d203135 	stfcss	f3, [r0, #-212]!	; 0xffffff2c
 140:	73614d20 	cmnvc	r1, #32, 26	; 0x800
 144:	6f6e696b 	svcvs	0x006e696b
 148:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 14c:	61726574 	cmnvs	r2, r4, ror r5
 150:	72502064 	subsvc	r2, r0, #100	; 0x64
 154:	6172676f 	cmnvs	r2, pc, ror #14
 158:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 15c:	2f676e69 	svccs	0x00676e69
 160:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 164:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 168:	6e6f702f 	cdpvs	0, 6, cr7, cr15, cr15, {1}
 16c:	74732f67 	ldrbtvc	r2, [r3], #-3943	; 0xfffff099
 170:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 174:	00632e70 	rsbeq	r2, r3, r0, ror lr
 178:	6d746962 			; <UNDEFINED> instruction: 0x6d746962
 17c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 180:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 184:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 188:	7000746e 	andvc	r7, r0, lr, ror #8
 18c:	0079736f 	rsbseq	r7, r9, pc, ror #6
 190:	70617267 	rsbvc	r7, r1, r7, ror #4
 194:	5f636968 	svcpl	0x00636968
 198:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 19c:	6f635f65 	svcvs	0x00635f65
 1a0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 1a4:	69640064 	stmdbvs	r4!, {r2, r5, r6}^
 1a8:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 1ac:	00797269 	rsbseq	r7, r9, r9, ror #4
 1b0:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 1b4:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 1b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1c0:	61700072 	cmnvs	r0, r2, ror r0
 1c4:	67006567 	strvs	r6, [r0, -r7, ror #10]
 1c8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1cc:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 1d0:	5f646165 	svcpl	0x00646165
 1d4:	61746164 	cmnvs	r4, r4, ror #2
 1d8:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 1dc:	69730062 	ldmdbvs	r3!, {r1, r5, r6}^
 1e0:	0078657a 	rsbseq	r6, r8, sl, ror r5
 1e4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1e8:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 1ec:	5f79616c 	svcpl	0x0079616c
 1f0:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 1f4:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 1f8:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 1fc:	006e695f 	rsbeq	r6, lr, pc, asr r9
 200:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 204:	61007864 	tstvs	r0, r4, ror #16
 208:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 20c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 210:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 214:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 218:	00726165 	rsbseq	r6, r2, r5, ror #2
 21c:	706d756e 	rsbvc	r7, sp, lr, ror #10
 220:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 224:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
 228:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 22c:	63206465 			; <UNDEFINED> instruction: 0x63206465
 230:	00726168 	rsbseq	r6, r2, r8, ror #2
 234:	70617267 	rsbvc	r7, r1, r7, ror #4
 238:	5f636968 	svcpl	0x00636968
 23c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 240:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 244:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 248:	47007261 	strmi	r7, [r0, -r1, ror #4]
 24c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 250:	37203939 			; <UNDEFINED> instruction: 0x37203939
 254:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 258:	31303220 	teqcc	r0, r0, lsr #4
 25c:	30393037 	eorscc	r3, r9, r7, lsr r0
 260:	72282034 	eorvc	r2, r8, #52	; 0x34
 264:	61656c65 	cmnvs	r5, r5, ror #24
 268:	20296573 	eorcs	r6, r9, r3, ror r5
 26c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 270:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
 274:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 278:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
 27c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 280:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 284:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 288:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 28c:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
 290:	205d3430 	subscs	r3, sp, r0, lsr r4
 294:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 298:	20626d75 	rsbcs	r6, r2, r5, ror sp
 29c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 2a0:	613d6863 	teqvs	sp, r3, ror #16
 2a4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 2a8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 2ac:	6f6c666d 	svcvs	0x006c666d
 2b0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 2b4:	733d6962 	teqvc	sp, #1605632	; 0x188000
 2b8:	2074666f 	rsbscs	r6, r4, pc, ror #12
 2bc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 2c0:	20626d75 	rsbcs	r6, r2, r5, ror sp
 2c4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 2c8:	613d6863 	teqvs	sp, r3, ror #16
 2cc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 2d0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 2d4:	4f2d2067 	svcmi	0x002d2067
 2d8:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 2dc:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 2e0:	74003939 	strvc	r3, [r0], #-2361	; 0xfffff6c7
 2e4:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 2e8:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
 2ec:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 2f0:	72670073 	rsbvc	r0, r7, #115	; 0x73
 2f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2fc:	61697469 	cmnvs	r9, r9, ror #8
 300:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 304:	736e7500 	cmnvc	lr, #0, 10
 308:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 30c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 310:	72640074 	rsbvc	r0, r4, #116	; 0x74
 314:	6f5f7761 	svcvs	0x005f7761
 318:	63656a62 	cmnvs	r5, #401408	; 0x62000
 31c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 320:	5f79616c 	svcpl	0x0079616c
 324:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 328:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 32c:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 330:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
 334:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
 338:	705f7468 	subsvc	r7, pc, r8, ror #8
 33c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 340:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 344:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 348:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 34c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 350:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 296 <startup-0x1ffffd6a>	; <UNPREDICTABLE>
 354:	00696c69 	rsbeq	r6, r9, r9, ror #24
 358:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 35c:	6f675f69 	svcvs	0x00675f69
 360:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 364:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 368:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 36c:	6f5f6465 	svcvs	0x005f6465
 370:	63656a62 	cmnvs	r5, #401408	; 0x62000
 374:	72670074 	rsbvc	r0, r7, #116	; 0x74
 378:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 37c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 380:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 384:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 388:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 38c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 390:	616c6564 	cmnvs	ip, r4, ror #10
 394:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 398:	006f726b 	rsbeq	r7, pc, fp, ror #4
 39c:	70617267 	rsbvc	r7, r1, r7, ror #4
 3a0:	5f636968 	svcpl	0x00636968
 3a4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3a8:	63736100 	cmnvs	r3, #0, 2
 3ac:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 3b0:	5f646165 	svcpl	0x00646165
 3b4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 3b8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 3bc:	61007265 	tstvs	r0, r5, ror #4
 3c0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3c4:	6165725f 	cmnvs	r5, pc, asr r2
 3c8:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 3cc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 3d0:	63736100 	cmnvs	r3, #0, 2
 3d4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 3d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 3dc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 3e0:	72640061 	rsbvc	r0, r4, #97	; 0x61
 3e4:	73007761 	movwvc	r7, #1889	; 0x761
 3e8:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 3ec:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3f0:	61726700 	cmnvs	r2, r0, lsl #14
 3f4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3f8:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3fc:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 400:	00796461 	rsbseq	r6, r9, r1, ror #8
 404:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
 408:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 40c:	6f5f7261 	svcvs	0x005f7261
 410:	63656a62 	cmnvs	r5, #401408	; 0x62000
 414:	61620074 	smcvs	8196	; 0x2004
 418:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 41c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 420:	00797274 	rsbseq	r7, r9, r4, ror r2
 424:	5f707061 	svcpl	0x00707061
 428:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 42c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 430:	73610065 	cmnvc	r1, #101	; 0x65
 434:	5f696963 	svcpl	0x00696963
 438:	61656c63 	cmnvs	r5, r3, ror #24
 43c:	69645f72 	stmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 440:	616c7073 	smcvs	50947	; 0xc703
 444:	73610079 	cmnvc	r1, #121	; 0x79
 448:	5f696963 	svcpl	0x00696963
 44c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 450:	6f635f65 	svcvs	0x00635f65
 454:	6f72746e 	svcvs	0x0072746e
 458:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 45c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 460:	6f63735f 	svcvs	0x0063735f
 464:	6f626572 	svcvs	0x00626572
 468:	00647261 	rsbeq	r7, r4, r1, ror #4
 46c:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 470:	61705f74 	cmnvs	r0, r4, ror pc
 474:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 478:	63736100 	cmnvs	r3, #0, 2
 47c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 480:	5f646165 	svcpl	0x00646165
 484:	61746164 	cmnvs	r4, r4, ror #2
 488:	67655300 	strbvs	r5, [r5, -r0, lsl #6]!
 48c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 490:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
 494:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 498:	4f500070 	svcmi	0x00500070
 49c:	43454a42 	movtmi	r4, #23106	; 0x5a42
 4a0:	72670054 	rsbvc	r0, r7, #84	; 0x54
 4a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 4ac:	00657469 	rsbeq	r7, r5, r9, ror #8
 4b0:	5679654b 	ldrbtpl	r6, [r9], -fp, asr #10
 4b4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 4b8:	6f6d0073 	svcvs	0x006d0073
 4bc:	74006576 	strvc	r6, [r0], #-1398	; 0xfffffa8a
 4c0:	006a626f 	rsbeq	r6, sl, pc, ror #4
 4c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4c8:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 4cc:	61007469 	tstvs	r0, r9, ror #8
 4d0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4d4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4d8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4dc:	Address 0x000004dc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <KeyValues+0xdfffe2ce>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	200e4101 	andcs	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	200000c0 	andcs	r0, r0, r0, asr #1
  4c:	00000044 	andeq	r0, r0, r4, asr #32
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000104 	andcs	r0, r0, r4, lsl #2
  68:	00000012 	andeq	r0, r0, r2, lsl r0
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000116 	andcs	r0, r0, r6, lsl r1
  84:	0000002e 	andeq	r0, r0, lr, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000144 	andcs	r0, r0, r4, asr #2
  a4:	00000032 	andeq	r0, r0, r2, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000176 	andcs	r0, r0, r6, ror r1
  c4:	0000002a 	andeq	r0, r0, sl, lsr #32
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001a0 	andcs	r0, r0, r0, lsr #3
  e4:	00000034 	andeq	r0, r0, r4, lsr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001d4 	ldrdcs	r0, [r0], -r4
 104:	0000005a 	andeq	r0, r0, sl, asr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	2000022e 	andcs	r0, r0, lr, lsr #4
 124:	0000006e 	andeq	r0, r0, lr, rrx
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	2000029c 	mulcs	r0, ip, r2
 144:	00000090 	muleq	r0, r0, r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	2000032c 	andcs	r0, r0, ip, lsr #6
 164:	00000080 	andeq	r0, r0, r0, lsl #1
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200003ac 	andcs	r0, r0, ip, lsr #7
 184:	00000040 	andeq	r0, r0, r0, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003ec 	andcs	r0, r0, ip, ror #7
 1a4:	00000046 	andeq	r0, r0, r6, asr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	20000432 	andcs	r0, r0, r2, lsr r4
 1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000045c 	andcs	r0, r0, ip, asr r4
 1e4:	00000062 	andeq	r0, r0, r2, rrx
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200004be 			; <UNDEFINED> instruction: 0x200004be
 200:	00000066 	andeq	r0, r0, r6, rrx
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	00000000 	andeq	r0, r0, r0
 21c:	20000524 	andcs	r0, r0, r4, lsr #10
 220:	00000194 	muleq	r0, r4, r1
 224:	40140e41 	andsmi	r0, r4, r1, asr #28
 228:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 22c:	03864004 	orreq	r4, r6, #4
 230:	40028740 	andmi	r8, r2, r0, asr #14
 234:	0e41018e 	dvfeqd	f0, f1, #0.5
 238:	070d4130 	smladxeq	sp, r0, r1, r4
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 248:	0000005e 	andeq	r0, r0, lr, asr r0
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	180e4101 	stmdane	lr, {r0, r8, lr}
 258:	00070d41 	andeq	r0, r7, r1, asr #26
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	00000000 	andeq	r0, r0, r0
 264:	20000716 	andcs	r0, r0, r6, lsl r7
 268:	0000005e 	andeq	r0, r0, lr, asr r0
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	180e4101 	stmdane	lr, {r0, r8, lr}
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	20000774 	andcs	r0, r0, r4, ror r7
 288:	00000164 	andeq	r0, r0, r4, ror #2
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	200008d8 	ldrdcs	r0, [r0], -r8
 2a8:	0000006c 	andeq	r0, r0, ip, rrx
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	100e4101 	andne	r4, lr, r1, lsl #2
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	20000944 	andcs	r0, r0, r4, asr #18
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	40080e41 	andmi	r0, r8, r1, asr #28
 2d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d8:	00070d41 	andeq	r0, r7, r1, asr #26
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	20000964 	andcs	r0, r0, r4, ror #18
 2e8:	00000028 	andeq	r0, r0, r8, lsr #32
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	00000000 	andeq	r0, r0, r0
 304:	2000098c 	andcs	r0, r0, ip, lsl #19
 308:	00000034 	andeq	r0, r0, r4, lsr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	100e4101 	andne	r4, lr, r1, lsl #2
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	00000000 	andeq	r0, r0, r0
 324:	200009c0 	andcs	r0, r0, r0, asr #19
 328:	00000030 	andeq	r0, r0, r0, lsr r0
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 348:	00000034 	andeq	r0, r0, r4, lsr r0
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	20000a24 	andcs	r0, r0, r4, lsr #20
 368:	00000024 	andeq	r0, r0, r4, lsr #32
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	100e4101 	andne	r4, lr, r1, lsl #2
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000000 	andeq	r0, r0, r0
 384:	20000a48 	andcs	r0, r0, r8, asr #20
 388:	0000002a 	andeq	r0, r0, sl, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	00000020 	andeq	r0, r0, r0, lsr #32
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	20000a72 	andcs	r0, r0, r2, ror sl
 3a8:	0000003e 	andeq	r0, r0, lr, lsr r0
 3ac:	400c0e41 	andmi	r0, ip, r1, asr #28
 3b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3b4:	018e4002 	orreq	r4, lr, r2
 3b8:	41180e41 	tstmi	r8, r1, asr #28
 3bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 3c0:	00000020 	andeq	r0, r0, r0, lsr #32
 3c4:	00000000 	andeq	r0, r0, r0
 3c8:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 3cc:	00000038 	andeq	r0, r0, r8, lsr r0
 3d0:	400c0e41 	andmi	r0, ip, r1, asr #28
 3d4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3d8:	018e4002 	orreq	r4, lr, r2
 3dc:	41180e41 	tstmi	r8, r1, asr #28
 3e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	20000ae8 	andcs	r0, r0, r8, ror #21
 3f0:	00000058 	andeq	r0, r0, r8, asr r0
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 400:	0000001c 	andeq	r0, r0, ip, lsl r0
 404:	00000000 	andeq	r0, r0, r0
 408:	20000b40 	andcs	r0, r0, r0, asr #22
 40c:	0000003c 	andeq	r0, r0, ip, lsr r0
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	100e4101 	andne	r4, lr, r1, lsl #2
 41c:	00070d41 	andeq	r0, r7, r1, asr #26
 420:	0000001c 	andeq	r0, r0, ip, lsl r0
 424:	00000000 	andeq	r0, r0, r0
 428:	20000b7c 	andcs	r0, r0, ip, ror fp
 42c:	00000044 	andeq	r0, r0, r4, asr #32
 430:	40080e41 	andmi	r0, r8, r1, asr #28
 434:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 438:	180e4101 	stmdane	lr, {r0, r8, lr}
 43c:	00070d41 	andeq	r0, r7, r1, asr #26
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000000 	andeq	r0, r0, r0
 448:	20000bc0 	andcs	r0, r0, r0, asr #23
 44c:	00000090 	muleq	r0, r0, r0
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	00000018 	andeq	r0, r0, r8, lsl r0
 464:	00000000 	andeq	r0, r0, r0
 468:	20000c50 	andcs	r0, r0, r0, asr ip
 46c:	00000022 	andeq	r0, r0, r2, lsr #32
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 47c:	00000018 	andeq	r0, r0, r8, lsl r0
 480:	00000000 	andeq	r0, r0, r0
 484:	20000c72 	andcs	r0, r0, r2, ror ip
 488:	0000005e 	andeq	r0, r0, lr, asr r0
 48c:	40080e41 	andmi	r0, r8, r1, asr #28
 490:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 494:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 498:	00000020 	andeq	r0, r0, r0, lsr #32
 49c:	00000000 	andeq	r0, r0, r0
 4a0:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4a4:	00000138 	andeq	r0, r0, r8, lsr r1
 4a8:	400c0e41 	andmi	r0, ip, r1, asr #28
 4ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4b0:	018e4002 	orreq	r4, lr, r2
 4b4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 4b8:	0000070d 	andeq	r0, r0, sp, lsl #14
